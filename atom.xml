<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codingAc&#39;s blog</title>
  
  <subtitle>改变,永远不嫌晚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-30T09:04:56.466Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Achun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hibernate 中利用Sql进行查询</title>
    <link href="http://yoursite.com/2018/06/29/Hibernate-%E4%B8%AD%E5%88%A9%E7%94%A8Sql%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2018/06/29/Hibernate-中利用Sql进行查询/</id>
    <published>2018-06-29T01:20:52.000Z</published>
    <updated>2018-06-30T09:04:56.466Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚开始接触Hibernate框架，不知道如何使用，现在也弄得迷迷糊糊的。使用一段时间，发现Hibernte中hql语句查询也是很方便，后来在网上查阅资料，发现也能用原生的sql查询。<br>根据网上的资料，记录一下自己学习Hibernate框架，以后也可以方便自己查看。<br><a id="more"></a></p><h1 id="Hibernate-查询方式"><a href="#Hibernate-查询方式" class="headerlink" title="Hibernate 查询方式"></a>Hibernate 查询方式</h1><p>hibernate的查询方式有HQL,Cretiria和SQL.<br>hql查询面向对象的语句风格确实要简洁一些(只是那么一点),<br>cretiria本人目前没在项目中使用过.<br>有一半的时候, 我在Hibernate框架中使用的是SQL查询,<br>简单,可控, 原生. 使用起来风格原始,简单有效, 不增加学习成本,且利于多人开发的维护. </p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Service层代码</span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; findAbandoned2(String name ,String  kjyear) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ToolStr.isEmpty(name) &amp;&amp; ToolStr.isEmpty(kjyear))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;String , Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String , Object&gt; params2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params2.put(<span class="string">" consumableName.name like "</span>,name);</span><br><span class="line">        params2.put(<span class="string">" consumableAudit = "</span> ,<span class="number">1</span> );</span><br><span class="line">        List&lt;Consumables&gt; conlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        conlist.addAll(     consumablesService.find4Params(params2));</span><br><span class="line">        List&lt;Long&gt; listIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listIds.addAll(conlist.stream().map(Consumables::getId).collect(Collectors.toList()));</span><br><span class="line">        StringBuffer bs = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        listIds.forEach( id -&gt; &#123;</span><br><span class="line">            bs.append(id + <span class="string">","</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        String sql = <span class="string">"SELECT\n"</span> +</span><br><span class="line">                <span class="string">"chejian.id 购入车间id,\n"</span> +</span><br><span class="line">                <span class="string">"chejian.`name` 购入者车间,\n"</span> +</span><br><span class="line">                <span class="string">"ren.name 购入者,\n"</span> +</span><br><span class="line">                <span class="string">"wupin.updateTime 购入日期,\n"</span> +</span><br><span class="line">                <span class="string">"wupin.price 购入单价,\n"</span> +</span><br><span class="line">                <span class="string">"wupin.maxNum 购入数量,\n"</span> +</span><br><span class="line">                <span class="string">"wupin.totalAmount 购入金额,\n"</span> +</span><br><span class="line">                <span class="string">"(wupin.maxNum-wupin.num) 领取数量\n"</span> +</span><br><span class="line">                <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"FROM\n"</span> +</span><br><span class="line">                <span class="string">"admin_consumables wupin\n"</span> +</span><br><span class="line">                <span class="string">"LEFT JOIN admin_workerman ren ON wupin.conPribcipal = ren.`code`\n"</span> +</span><br><span class="line">                <span class="string">"LEFT JOIN admin_workerman banzu ON ren.fatherId = banzu.id\n"</span> +</span><br><span class="line">                <span class="string">"LEFT JOIN admin_workerman chejian ON banzu.fatherId = chejian.id\n"</span> +</span><br><span class="line">                <span class="string">"LEFT JOIN admin_consumablestype pinming ON pinming.id = wupin.consumableName_id\n"</span> +</span><br><span class="line">                <span class="string">"WHERE wupin.id in( "</span>+</span><br><span class="line">                bs.substring(<span class="number">0</span>,bs.length()-<span class="number">1</span>)</span><br><span class="line">                + <span class="string">") and wupin.kjYear = :kjyear \n"</span> +</span><br><span class="line">                <span class="string">"GROUP BY chejian.id\n"</span> +</span><br><span class="line">                <span class="string">"ORDER BY chejian.id ASC"</span>;</span><br><span class="line"></span><br><span class="line">        params.put(<span class="string">"kjyear"</span>,Integer.valueOf(kjyear));</span><br><span class="line">        <span class="keyword">return</span> abandonedDao.find4SQL(sql, params);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里sql语句没有看懂，以后再看。如果分页的话，可以用Hierbante封装的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dao层代码</span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; find4SQL(<span class="keyword">final</span> String sql, <span class="keyword">final</span> Map&lt;String, Object&gt; params) &#123;</span><br><span class="line">        SQLQuery query = getSession().createSQLQuery(sql);</span><br><span class="line">        <span class="comment">// 转成Map</span></span><br><span class="line">        query.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);</span><br><span class="line"><span class="comment">//        query.setCacheable(true);</span></span><br><span class="line">        QUERY_INIT(query, params);</span><br><span class="line">        <span class="keyword">return</span> query.list();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>查询出来是List&lt;Map&lt;String,Object&gt;&gt; 我用的是jsp页面 ，在jsp页面容易遍历。直接遍历list，然后直接点出来 查询时候的列名称 就可以取到值了。<br>如果是List<string> 在jsp页面中 直接  Object[index]就可以取出想要的值。<br>搬运来自： <a href="https://blog.csdn.net/hjiacheng/article/details/53717727" target="_blank" rel="noopener">https://blog.csdn.net/hjiacheng/article/details/53717727</a> Hibernate SQLQuery原生sql查询<br><a href="https://blog.csdn.net/woduoxiangfeiya/article/details/53536033" target="_blank" rel="noopener">https://blog.csdn.net/woduoxiangfeiya/article/details/53536033</a> 前端jsp页面获取List&lt;List<string>&gt;格式数据<br><a href="https://blog.csdn.net/leave417/article/details/78346088" target="_blank" rel="noopener">https://blog.csdn.net/leave417/article/details/78346088</a> jsp页面遍历List&lt;Map&lt;String,Object&gt;&gt;</string></string></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刚开始接触Hibernate框架，不知道如何使用，现在也弄得迷迷糊糊的。使用一段时间，发现Hibernte中hql语句查询也是很方便，后来在网上查阅资料，发现也能用原生的sql查询。&lt;br&gt;根据网上的资料，记录一下自己学习Hibernate框架，以后也可以方便自己查看。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate用Sql查询in的用法</title>
    <link href="http://yoursite.com/2018/06/29/Hibernate%E7%94%A8Sql%E6%9F%A5%E8%AF%A2in%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/29/Hibernate用Sql查询in的用法/</id>
    <published>2018-06-29T00:27:23.000Z</published>
    <updated>2018-06-30T09:04:55.917Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始接触Hibernate,不是很会Hibernate框架，因为要做一个查询，编写的是SQL语句，想用Hibernate框架查询，后来在网上查阅资料，发现和一般的hql语句查询几乎一样。<br>由于在Hibernate用到了sql语句，所以记录一下自己学到的一些新东西。能方便以后查看。在处理Hibernate的实体查询，一般可以采用多种方式处理复杂的查询，比如HQL的灵活使用，<br>Query的外部参数化赋值等。但是，对于IN字句在sql中的处理，也会出现，不过，一般不建议使用这样的sql处理，转而采用关联条件来处理这种查询。<br><a id="more"></a></p><h1 id="编写MySQL语句"><a href="#编写MySQL语句" class="headerlink" title="编写MySQL语句"></a>编写MySQL语句</h1><p>首先在可视化工具中编写sql语句，如果可以达到想要的结果，这一步就搞定了。</p><h1 id="在Hibernate中利用sql语句查询"><a href="#在Hibernate中利用sql语句查询" class="headerlink" title="在Hibernate中利用sql语句查询"></a>在Hibernate中利用sql语句查询</h1><p>一般对于可变参数传入在in字句中，大概有下面几种总结的方法：<br>1、直接外面拼转sql,这种拼sql的方式容易出现sql注入，比如in(123,drop table ttt,)，而且如果in字句字符串太多，也会受限的，所以一般不赞成使用。</p><p>2、进一步解决上面的问题就是拼赋值sql,采用预处理处理，比如Select * from tab t where t.id in(?,?,?….),参数一并传入就行额。缺点还是受限于要包含的那些记录数据量。</p><p>3、一般在hibernate处理这个也比较方便，采用显示参数传递赋值，如 : String sql =  from Task t where t.id(:ids)</p><p>4、建议系统中出现的in处理，直接采用关联查询处理，in字句本来性能就差，没做好就是是全表扫描。</p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Service层代码：</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行查询手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deptIds 传入的部门id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">find4Phone</span><span class="params">(String[] deptIds)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 将String数组转成Long数组</span></span><br><span class="line">        Long[] deptId = (Long[]) ConvertUtils.convert(deptIds, Long.class);</span><br><span class="line">        <span class="comment">// SQL 语句</span></span><br><span class="line">        String sql = <span class="string">"SELECT phone from core_department_phone WHERE department_id IN (:deptId)"</span>;</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        <span class="keyword">return</span> departmentPhoneDao.find4Phone(sql, deptId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先部门id不是String类型的。先转成Long类型的数组，将sql语句写上，这里使用占位符的方式，避免SQL注入。in语句处理容易全表扫描，所以可以优化一下in语句。<br>Dao层代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deptId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  List&lt;String&gt; <span class="title">find4Phone</span><span class="params">(String sql, Long[] deptId)</span> </span>&#123;</span><br><span class="line">        SQLQuery query = <span class="keyword">this</span>.getSession().createSQLQuery(sql);</span><br><span class="line">        query.setParameterList(<span class="string">"deptId"</span>,deptId);</span><br><span class="line">        <span class="keyword">return</span> query.list();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里用到了setParameterList中key的属性是前面in语句中占位符的内容deptId需要传入的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setParameterList方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> Query <span class="title">setParameterList</span><span class="params">(String name, Object[] values)</span></span>;</span><br></pre></td></tr></table></figure></p><p>后面可以传入任意类型的对象数组，也可以传入List集合。<br>搬运来自 ： <a href="https://blog.csdn.net/wodestudy/article/details/38200421" target="_blank" rel="noopener">https://blog.csdn.net/wodestudy/article/details/38200421</a> Hibernate 处理查询 in 字句<br><a href="https://blog.csdn.net/qq_23339149/article/details/54692942" target="_blank" rel="noopener">https://blog.csdn.net/qq_23339149/article/details/54692942</a> Hibernate如何使用in关键字</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始接触Hibernate,不是很会Hibernate框架，因为要做一个查询，编写的是SQL语句，想用Hibernate框架查询，后来在网上查阅资料，发现和一般的hql语句查询几乎一样。&lt;br&gt;由于在Hibernate用到了sql语句，所以记录一下自己学到的一些新东西。能方便以后查看。在处理Hibernate的实体查询，一般可以采用多种方式处理复杂的查询，比如HQL的灵活使用，&lt;br&gt;Query的外部参数化赋值等。但是，对于IN字句在sql中的处理，也会出现，不过，一般不建议使用这样的sql处理，转而采用关联条件来处理这种查询。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JS中return的用法</title>
    <link href="http://yoursite.com/2018/06/28/JS%E4%B8%ADreturn%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/28/JS中return的用法/</id>
    <published>2018-06-28T05:08:20.000Z</published>
    <updated>2018-06-28T14:22:27.248Z</updated>
    
    <content type="html"><![CDATA[<p>在网上看到一篇关于JS中return的用法特此记录一下、以便自己加深印象<br><a id="more"></a></p><h1 id="一、返回控制与函数结果"><a href="#一、返回控制与函数结果" class="headerlink" title="一、返回控制与函数结果"></a>一、返回控制与函数结果</h1><p>语法为：return 表达式; 语句结束函数执行，返回调用函数，而且把表达式的值作为函数的结果</p><h1 id="二、返回控制"><a href="#二、返回控制" class="headerlink" title="二、返回控制"></a>二、返回控制</h1><p>在大多数情况下,为事件处理函数返回false,可以防止默认的事件行为.例如,默认情况下点击一个<a>元素,页面会跳转到该元素href属性指定的页.<br> Return False 就相当于终止符，Return True 就相当于执行符。<br> 在js中return false的作用一般是用来取消默认动作的。比如你单击一个链接除了触发你的<br> onclick时间（如果你指定的话）以外还要触发一个默认事件就是执行页面的跳转。所以如果<br> 你想取消对象的默认动作就可以return false。</a></p><p>首先在js中，我们常用return false来阻止提交表单或者继续执行下面的代码，通俗的来说就是阻止执行默认的行为。<br><code>`</code>JavaScript<br>function a() {<br>    if (True) {<br>    return false;<br>}<br>}<br>这是没有任何问题的。<br>如果改成这种<br>function Test() {<br>    a();<br>    b();<br>    c();<br>}<br>即使a函数返回return false 阻止提交了，但是不影响 b（）以及 c（）函数的执行。<br>在Test（）函数里调用a()函数，那里面return false 对于Test（）函数来说，只是相当于返回值。而不能阻止Test（）函数执行。<br>总之：return false 只在当前函数有效，不会影响其他外部函数的执行。</p><h1 id="三：总结"><a href="#三：总结" class="headerlink" title="三：总结"></a>三：总结</h1><p>retrun true； 返回正确的处理结果。<br>return false；返回错误的处理结果，终止处理。<br>return；把控制权返回给页面。</p><h1 id="四：区别"><a href="#四：区别" class="headerlink" title="四：区别"></a>四：区别</h1><ol><li>return;返回null，起到中断方法执行的效果，只要不return false事件处理函数将会继续执行，表单将提交</li><li>return false;，事件处理函数会取消事件，不再继续向下执行。比如表单将终止提交。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网上看到一篇关于JS中return的用法特此记录一下、以便自己加深印象&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS实现输入模糊查询下拉选</title>
    <link href="http://yoursite.com/2018/06/28/JS%E5%AE%9E%E7%8E%B0%E8%BE%93%E5%85%A5%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E4%B8%8B%E6%8B%89%E9%80%89/"/>
    <id>http://yoursite.com/2018/06/28/JS实现输入模糊查询下拉选/</id>
    <published>2018-06-28T03:24:32.000Z</published>
    <updated>2018-06-28T14:22:27.904Z</updated>
    
    <content type="html"><![CDATA[<p>一开始没有接触过JS，今天看了一些JS，记录一下自己学习JS的过程吧。不是太懂JS<br><a id="more"></a></p><h1 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h1><p>本次主要是实现输入之后模糊查询下拉框中显示input输入框中模糊的内容，具体html代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row cl"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-label col-xs-4 col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">class</span>=<span class="string">"c-red"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>物品名称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"formControls col-xs-4 col-sm-3"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"makeupCo"</span> <span class="attr">id</span>=<span class="string">"makeupCo"</span> <span class="attr">class</span>=<span class="string">"makeinp"</span> <span class="attr">onfocus</span>=<span class="string">"setinput()"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">onblur</span>=<span class="string">"setinput();"</span> <span class="attr">onmouseup</span>=<span class="string">"setinput();"</span> <span class="attr">placeholder</span>=<span class="string">"请选择或输入"</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"select-box  f-14 conchildtype"</span> <span class="attr">name</span>=<span class="string">"consumableName.id"</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">id</span>=<span class="string">"conchildtype"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">onchange</span>=<span class="string">"changeF(this)"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">count</span>=<span class="string">"-1"</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">%--selected="selected"--%</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h1><p>首先当鼠标获取到焦点时触发setinput方法，onblur 事件会在对象失去焦点时发生。当在段落上松开鼠标按钮时执行 JavaScript：<br>具体setinput方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** input 改变 下拉选改变 可输入input */</span> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setinput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 把所有下拉选去掉</span></span><br><span class="line">     $(<span class="string">".conchildtype option"</span>).attr(<span class="string">'selected'</span>, <span class="literal">false</span>);</span><br><span class="line">     <span class="comment">// 获取物品名称的值</span></span><br><span class="line">     <span class="keyword">var</span> value = $(<span class="string">"#makeupCo"</span>).val();</span><br><span class="line">     <span class="comment">// 遍历下拉选</span></span><br><span class="line">     $(<span class="string">".conchildtype option"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 下拉选的所有的值</span></span><br><span class="line">         <span class="keyword">var</span> selectstr = $(<span class="keyword">this</span>).text();</span><br><span class="line">         <span class="comment">//console.log(selectstr.indexOf(value) != -1);</span></span><br><span class="line">         <span class="keyword">if</span> (selectstr.indexOf(value, <span class="number">0</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">             <span class="comment">// 将下拉选的值选中</span></span><br><span class="line">             $(<span class="keyword">this</span>).prop(<span class="string">'selected'</span>, <span class="string">'selected'</span>);</span><br><span class="line">             <span class="comment">// console.log($(this).prop('selected'));</span></span><br><span class="line">             <span class="comment">// 找到则不在遍历 退出循环</span></span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>当改变下拉选的值，执行onchange里面的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeF</span>(<span class="params">this_</span>) </span>&#123;</span><br><span class="line">      $(this_).prev(<span class="string">"input"</span>).val($(this_).find(<span class="string">"option:selected"</span>).text());</span><br><span class="line">      <span class="comment">//$("#conchildtype").css(&#123;"display":"none"&#125;);</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>参考自： <a href="https://blog.csdn.net/sun2015_07_24/article/details/53023167" target="_blank" rel="noopener">https://blog.csdn.net/sun2015_07_24/article/details/53023167</a> 简单实用js——可输入可选择可模糊查询的select下拉</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始没有接触过JS，今天看了一些JS，记录一下自己学习JS的过程吧。不是太懂JS&lt;br&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>云MAS 发送短信</title>
    <link href="http://yoursite.com/2018/06/28/%E4%BA%91MAS-%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/"/>
    <id>http://yoursite.com/2018/06/28/云MAS-发送短信/</id>
    <published>2018-06-28T00:30:36.000Z</published>
    <updated>2018-06-28T14:22:28.341Z</updated>
    
    <content type="html"><![CDATA[<p>使用中国移动接口，用Http请求，进行发送短信<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先阅读短信接口文档，采用什么方式进行访问，参数是哪些。这里以云MAS 接口文档为例。<br>接口中包含的信息，url地址，类型，请求方式，特别的如一些加密方式，下面也会有一些示例<br>代码，以及请求成功后响应的信息。<br>这里参考网上一些资料，请求封装参数。进行发送短信<br>本篇文章主要讲的是POST请求，进行加密传输。</p><h1 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h1><p>具体代码如下封装成一个工具类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.net.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.PostMethod;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.httpclient.methods.StringRequestEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 发送短信</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-06-27 08:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求的接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"http://***"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集团客户名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ECNAME = <span class="string">"***"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String APID = <span class="string">"***"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRETKEY = <span class="string">"***"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网管签名编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIGN = <span class="string">"***"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ADDSERIAL = <span class="string">"***"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API输入参数签名结果，签名算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String mac = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到加密的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone   手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 短信内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEncode</span><span class="params">(String phone, String content)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        map.put(<span class="string">"ecName"</span>, ECNAME);</span><br><span class="line">        map.put(<span class="string">"apId"</span>, APID);</span><br><span class="line">        map.put(<span class="string">"secretKey"</span>, SECRETKEY);</span><br><span class="line">        map.put(<span class="string">"mobiles"</span>, phone);</span><br><span class="line">        map.put(<span class="string">"content"</span>, content);</span><br><span class="line">        map.put(<span class="string">"addSerial"</span>, ADDSERIAL);</span><br><span class="line">        map.put(<span class="string">"sign"</span>, SIGN);</span><br><span class="line">        <span class="comment">// 封装成StringBuffer</span></span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        stringBuffer.append(ECNAME);</span><br><span class="line">        stringBuffer.append(APID);</span><br><span class="line">        stringBuffer.append(SECRETKEY);</span><br><span class="line">        stringBuffer.append(phone);</span><br><span class="line">        stringBuffer.append(content);</span><br><span class="line">        stringBuffer.append(SIGN);</span><br><span class="line">        stringBuffer.append(ADDSERIAL);</span><br><span class="line">        <span class="comment">// 进行MD5加密(使用工具类)</span></span><br><span class="line">        mac = MD5Util.md5(stringBuffer.toString());</span><br><span class="line">        map.put(<span class="string">"mac"</span>, mac);</span><br><span class="line">        <span class="comment">// 转成JSON</span></span><br><span class="line">        String request = JSON.toJSONString(map);</span><br><span class="line">        String encode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里要进行UTF-8 不然在WEB中请求中文就会出现乱码，main方法不会  进行64位加密</span></span><br><span class="line">            encode = Base64.encodeBase64String(request.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(encode);</span><br><span class="line">        <span class="keyword">return</span> encode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信发送</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone   手机号 有的可能传的是数组，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 短信内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">sendSms</span><span class="params">(String phone, String content)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        String encode = getEncode(phone, content);</span><br><span class="line">        <span class="comment">// 使用HttpClient 请求</span></span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        <span class="comment">// Post请求的方式</span></span><br><span class="line">        PostMethod method = <span class="keyword">new</span> PostMethod(URL);</span><br><span class="line">        <span class="comment">// 请求头</span></span><br><span class="line">        method.addRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断加密得到的Base64位是否为空</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(encode)) &#123;</span><br><span class="line">            <span class="comment">// 进行封装参数</span></span><br><span class="line">                StringRequestEntity entity = <span class="keyword">new</span> StringRequestEntity(encode, <span class="string">"application/json; charset=utf-8"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">                method.setRequestEntity(entity);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行并获取到状态码</span></span><br><span class="line">            <span class="keyword">int</span> i = httpClient.executeMethod(method);</span><br><span class="line">            <span class="keyword">if</span> (HttpStatus.SC_OK == i) &#123;</span><br><span class="line">            <span class="comment">// 取到服务器相应的信息</span></span><br><span class="line">                <span class="comment">// 取到服务器相应的信息</span></span><br><span class="line">                InputStream inputStream = method.getResponseBodyAsStream();</span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">                StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                String str = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stringBuffer.append(str);</span><br><span class="line">                &#125;</span><br><span class="line">                JSONObject jsonObject = JSON.parseObject(stringBuffer.toString());</span><br><span class="line">                params.put(<span class="string">"response"</span>, jsonObject);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                params.put(<span class="string">"error"</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HttpException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * List&lt;String&gt;转成字符串并以","隔开</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  &#123;[type]&#125; List&lt;String&gt; list          查询出来的list集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;[type]&#125;              "123,456,789"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToString</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">boolean</span> first = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//第一个前面不拼接","</span></span><br><span class="line">        <span class="keyword">for</span>(String string :list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(first) &#123;</span><br><span class="line">                first=<span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result.append(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result.append(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="感触"><a href="#感触" class="headerlink" title="感触"></a>感触</h2><p>以上就是发送短信代码，这里主要是参考网上的各种去写，第一次接触这种访问接口，记录一下，便于以后学习，<br>我的个人理解就是使用Http请求，然后拼接参数，请求成功后，返回一些信息。就能完成调用接口的操作。<br>还有个就是MD5加密方式，直接复制网上的，你也可以根据自己实际需求，编写或者查询一些工具</p><h1 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h1><p>具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: MD5 32位 小写加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-06-27 09:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密算法</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> text  需要加密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest digest = MessageDigest.getInstance(<span class="string">"md5"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] result = digest.digest(text.getBytes());</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : result) &#123;</span><br><span class="line">                <span class="keyword">int</span> number = b &amp; <span class="number">0xff</span>;</span><br><span class="line">                String hex = Integer.toHexString(number);</span><br><span class="line">                <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">"0"</span> + hex);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(hex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密 32 位 小写加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  &#123;[type]&#125; String value         需要加密的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;[type]&#125;        返回的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        MessageDigest md5 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            md5.update((value).getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchAlgorithmException error)&#123;</span><br><span class="line">            error.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnsupportedEncodingException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span> b[] = md5.digest();</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        StringBuffer buf = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> offset=<span class="number">0</span>; offset&lt;b.length; offset++)&#123;</span><br><span class="line">            i = b[offset];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                i+=<span class="number">256</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                buf.append(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            buf.append(Integer.toHexString(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = buf.toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h1><p>以及需要的一些jar包，pom文件配置如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- httpclientjar包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-httpclient&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-httpclient&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;4.5.3&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;!-- 阿里巴巴json工具类 --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.40&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>搬运参考来自：<a href="https://www.cnblogs.com/mengrennwpu/p/6418114.html" target="_blank" rel="noopener">https://www.cnblogs.com/mengrennwpu/p/6418114.html</a> Java使用HttpClient实现Post请求<br><a href="https://www.cnblogs.com/hunt/p/7071053.html" target="_blank" rel="noopener">https://www.cnblogs.com/hunt/p/7071053.html</a> NameValuePair方式传参数<br><a href="https://www.cnblogs.com/shuilangyizu/p/5844566.html" target="_blank" rel="noopener">https://www.cnblogs.com/shuilangyizu/p/5844566.html</a> java实现发送短信<br><a href="https://blog.csdn.net/u010256388/article/details/68491509" target="_blank" rel="noopener">https://blog.csdn.net/u010256388/article/details/68491509</a> HTTP请求行、请求头、请求体详解<br><a href="https://blog.csdn.net/jonatha_n/article/details/52217392" target="_blank" rel="noopener">https://blog.csdn.net/jonatha_n/article/details/52217392</a> MD5 32位 小写加密和大写加密<br><a href="https://blog.csdn.net/u012965373/article/details/79195592" target="_blank" rel="noopener">https://blog.csdn.net/u012965373/article/details/79195592</a> Java 实现对字符串MD5值加密32位大写小写<br><a href="https://blog.csdn.net/cat_book_milk/article/details/52954618" target="_blank" rel="noopener">https://blog.csdn.net/cat_book_milk/article/details/52954618</a> java MD5加密（大、小写32位）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用中国移动接口，用Http请求，进行发送短信&lt;br&gt;
    
    </summary>
    
    
      <category term="HttpClient" scheme="http://yoursite.com/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot 项目部署到tomcat容器中</title>
    <link href="http://yoursite.com/2018/06/22/Spring-boot-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0tomcat%E5%AE%B9%E5%99%A8%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/06/22/Spring-boot-项目部署到tomcat容器中/</id>
    <published>2018-06-22T00:44:34.000Z</published>
    <updated>2018-06-27T23:39:22.370Z</updated>
    
    <content type="html"><![CDATA[<p>把spring-boot项目按照平常的web项目一样发布到tomcat容器下<br><a id="more"></a></p><h1 id="一、修改打包形式"><a href="#一、修改打包形式" class="headerlink" title="一、修改打包形式"></a>一、修改打包形式</h1><p>在pom.xml里设置 <font color="red"><packaging>war</packaging></font><br><img src="/images/springbootpom.png" alt="SpringBoot中POM文件"></p><h1 id="二、移除嵌入式tomcat插件"><a href="#二、移除嵌入式tomcat插件" class="headerlink" title="二、移除嵌入式tomcat插件"></a>二、移除嵌入式tomcat插件</h1><p>在pom.xml里找到<font color="red">spring-boot-starter-web</font>依赖节点，在其中添加如下代码，<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;!-- 移除嵌入式tomcat插件 --&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/springbootpom1.png" alt="SpringBoot中POM文件"></p><h1 id="三、添加servlet-api的依赖"><a href="#三、添加servlet-api的依赖" class="headerlink" title="三、添加servlet-api的依赖"></a>三、添加servlet-api的依赖</h1><p>下面两种方式都可以，任选其一<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-servlet-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.36&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/springbootpom2.png" alt="SpringBoot中POM文件"></p><h1 id="四、修改启动类，并重写初始化方法"><a href="#四、修改启动类，并重写初始化方法" class="headerlink" title="四、修改启动类，并重写初始化方法"></a>四、修改启动类，并重写初始化方法</h1><p>我们平常用main方法启动的方式，都有一个App的启动类，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们需要类似于web.xml的配置方式来启动spring上下文了，在Application类的同级添加一个SpringBootStartApplication类，其代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改启动类，继承 SpringBootServletInitializer 并重写 configure 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootStartApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意这里要指向原先用main方法执行的Application启动类</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/springbootjava.png" alt="SpringBoot中Java文件"></p><h1 id="五、打包部署"><a href="#五、打包部署" class="headerlink" title="五、打包部署"></a>五、打包部署</h1><p>在项目根目录下（即包含pom.xml的目录），在命令行里输入： </p><p><font color="red">mvn clean package</font>即可， 等待打包完成，出现<font color="red">[INFO] BUILD SUCCESS?</font>即为打包成功。<br>然后把target目录下的war包放到tomcat的webapps目录下，启动tomcat，即可自动解压部署。<br>最后在浏览器中输入</p><p><font color="red"><a href="http://localhost:[端口号]/[打包项目名]/" target="_blank" rel="noopener">http://localhost:[端口号]/[打包项目名]/</a><font></font></font></p><p>发布成功</p><p>搬运来自：<a href="https://blog.csdn.net/javahighness/article/details/52515226" target="_blank" rel="noopener">https://blog.csdn.net/javahighness/article/details/52515226</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把spring-boot项目按照平常的web项目一样发布到tomcat容器下&lt;br&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>从零学习—MySQL</title>
    <link href="http://yoursite.com/2018/06/10/%E4%BB%8E%E9%9B%B6%E5%AD%A6%E4%B9%A0%E2%80%94MySQL/"/>
    <id>http://yoursite.com/2018/06/10/从零学习—MySQL/</id>
    <published>2018-06-10T02:06:53.000Z</published>
    <updated>2018-06-27T23:43:45.877Z</updated>
    
    <content type="html"><![CDATA[<p>记录自己一步一步学习MySQL的过程。之前一点不懂，现在想学习一下，所有的文章都是搬运其他人的Blog。感谢他们。<br><a id="more"></a></p><h1 id="Union和Union-All的区别"><a href="#Union和Union-All的区别" class="headerlink" title="Union和Union All的区别"></a>Union和Union All的区别</h1><p>首先有一个表是Student，包括以下字段。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student  </span><br><span class="line">(  </span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,  </span><br><span class="line"><span class="keyword">name</span> <span class="keyword">nvarchar2</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,  </span><br><span class="line">score <span class="built_in">number</span> <span class="keyword">not</span> <span class="literal">null</span>  </span><br><span class="line">);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Aaron'</span>,<span class="number">78</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Bill'</span>,<span class="number">76</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Cindy'</span>,<span class="number">89</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Damon'</span>,<span class="number">90</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Ella'</span>,<span class="number">73</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">'Frado'</span>,<span class="number">61</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'Gill'</span>,<span class="number">99</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'Hellen'</span>,<span class="number">56</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'Ivan'</span>,<span class="number">93</span>);  </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">'Jay'</span>,<span class="number">90</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></p><p>首先，我们来看一下UNION的例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select *  </span><br><span class="line">  2  from student  </span><br><span class="line">  3  where id&lt;4  </span><br><span class="line">  4  union  </span><br><span class="line">  5  <span class="keyword">select</span> *  </span><br><span class="line">  <span class="number">6</span>  <span class="keyword">from</span> student  </span><br><span class="line">  <span class="number">7</span>  <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">2</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;<span class="number">6</span>  </span><br><span class="line">  <span class="number">8</span>  ;  </span><br><span class="line">  </span><br><span class="line">        ID NAME                                SCORE  </span><br><span class="line"><span class="comment">---------- ------------------------------ ----------  </span></span><br><span class="line">         1 Aaron                                  78  </span><br><span class="line">         2 Bill                                   76  </span><br><span class="line">         3 Cindy                                  89  </span><br><span class="line">         4 Damon                                  90  </span><br><span class="line">         5 Ella                                   73  </span><br><span class="line">  </span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure></p><p>如果换成Union All连接两个结果集，则结果如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select *  </span><br><span class="line">  2  from student  </span><br><span class="line">  3  where id&lt;4  </span><br><span class="line">  4  union all  </span><br><span class="line">  5  <span class="keyword">select</span> *  </span><br><span class="line">  <span class="number">6</span>  <span class="keyword">from</span> student  </span><br><span class="line">  <span class="number">7</span>  <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">2</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;<span class="number">6</span>  </span><br><span class="line">  <span class="number">8</span>  ;  </span><br><span class="line">  </span><br><span class="line">        ID NAME                                SCORE  </span><br><span class="line"><span class="comment">---------- ------------------------------ ----------  </span></span><br><span class="line">         1 Aaron                                  78  </span><br><span class="line">         2 Bill                                   76  </span><br><span class="line">         3 Cindy                                  89  </span><br><span class="line">         3 Cindy                                  89  </span><br><span class="line">         4 Damon                                  90  </span><br><span class="line">         5 Ella                                   73  </span><br><span class="line">  </span><br><span class="line">6 rows selected.</span><br></pre></td></tr></table></figure></p><p>可以看到，<font color="red">Union和Union All的区别之一在于对重复结果的处理。</font><br>接下来，我们交换一个两个SELECT语句的顺序，看看结果是怎样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select *  </span><br><span class="line">  2  from student  </span><br><span class="line">  3  where id&gt;2 and id&lt;6  </span><br><span class="line">  4  union  </span><br><span class="line">  5  select *  </span><br><span class="line">  6  from student  </span><br><span class="line">  7  where id&lt;4  </span><br><span class="line">  8  ;  </span><br><span class="line">  </span><br><span class="line">        ID NAME                                SCORE  </span><br><span class="line">---------- ------------------------------ ----------  </span><br><span class="line">         1 Aaron                                  78  </span><br><span class="line">         2 Bill                                   76  </span><br><span class="line">         3 Cindy                                  89  </span><br><span class="line">         4 Damon                                  90  </span><br><span class="line">         5 Ella                                   73  </span><br><span class="line">  </span><br><span class="line">SQL&gt; select *  </span><br><span class="line">  2  from student  </span><br><span class="line">  3  where id&gt;2 and id&lt;6  </span><br><span class="line">  4  union all  </span><br><span class="line">  5  select *  </span><br><span class="line">  6  from student  </span><br><span class="line">  7  where id&lt;4  </span><br><span class="line">  8  ;  </span><br><span class="line">  </span><br><span class="line">        ID NAME                                SCORE  </span><br><span class="line">---------- ------------------------------ ----------  </span><br><span class="line">         3 Cindy                                  89  </span><br><span class="line">         4 Damon                                  90  </span><br><span class="line">         5 Ella                                   73  </span><br><span class="line">         1 Aaron                                  78  </span><br><span class="line">         2 Bill                                   76  </span><br><span class="line">         3 Cindy                                  89  </span><br><span class="line">  </span><br><span class="line">6 rows selected.</span><br></pre></td></tr></table></figure></p><p>可以看到，对于UNION来说，交换两个SELECT语句的顺序后结果仍然是一样的，这是因为UNION会自动排序。而UNION ALL在交换了SELECT语句的顺序后结果则不相同，因为UNION ALL不会对结果自动进行排序。</p><p>那么这个自动排序的规则是什么呢？我们交换一下SELECT后面选择字段的顺序（前面使用SELECT *相当于SELECT ID,NAME,SCORE），看看结果如何：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select score,id,name  </span><br><span class="line">  2  from student  </span><br><span class="line">  3  where id&lt;4  </span><br><span class="line">  4  union  </span><br><span class="line">  5  select score,id,name  </span><br><span class="line">  6  from student  </span><br><span class="line">  7  where id&gt;2 and id&lt;6  </span><br><span class="line">  8  ;  </span><br><span class="line">  </span><br><span class="line">     SCORE         ID NAME  </span><br><span class="line">---------- ---------- ------------------------------  </span><br><span class="line">        73          5 Ella  </span><br><span class="line">        76          2 Bill  </span><br><span class="line">        78          1 Aaron  </span><br><span class="line">        89          3 Cindy  </span><br><span class="line">        90          4 Damon</span><br></pre></td></tr></table></figure></p><p>可是看到，此时是按照字段SCORE来对结果进行排序的（前面SELECT *的时候是按照ID进行排序的）。<br>那么有人会问，如果我想自行控制排序，能不能使用ORDER BY呢？当然可以。不过在写法上有需要注意的地方：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select score,id,name  </span><br><span class="line">from student  </span><br><span class="line">where id &gt; 2 and id &lt; 7  </span><br><span class="line">  </span><br><span class="line">union  </span><br><span class="line">  </span><br><span class="line">select score,id,name  </span><br><span class="line">from student  </span><br><span class="line">where id &lt; 4  </span><br><span class="line">  </span><br><span class="line">union  </span><br><span class="line">  </span><br><span class="line">select score,id,name  </span><br><span class="line">from student  </span><br><span class="line">where id &gt; 8  </span><br><span class="line">order by id desc</span><br></pre></td></tr></table></figure></p><p>order by子句必须写在最后一个结果集里，并且其排序规则将改变操作后的排序结果。对于Union、Union All、Intersect、Minus都有效。</p><p>其他的集合操作符，如Intersect和Minus的操作和Union基本一致，这里一起总结一下：</p><p>Union，对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序；</p><p>Union All，对两个结果集进行并集操作，包括重复行，不进行排序；</p><p>Intersect，对两个结果集进行交集操作，不包括重复行，同时进行默认规则的排序；</p><p>Minus，对两个结果集进行差操作，不包括重复行，同时进行默认规则的排序。</p><p>可以在最后一个结果集中指定Order by子句改变排序方式。</p><h1 id="Mysql中TO-DAYS函数"><a href="#Mysql中TO-DAYS函数" class="headerlink" title="Mysql中TO_DAYS函数"></a>Mysql中TO_DAYS函数</h1><p>SQL博大精深</p><p>TO_DAYS函数 返回一个天数! 啊哈？什么天数? 从年份0开始的天数 </p><p>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT TO_DAYS(‘1997-10-07′);</span><br></pre></td></tr></table></figure></p><p>结果  729669<br>就是从0年开始 到1997年10月7号之间的天数</p><p>理解这个之后那么一切就变得拉么简单！有一张表！lito表 有一个字段 create_time  类型 datetime  </p><p>如果要查询当前表中昨天的数据那么<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from lito where to_days(now())-to_days(create_time)&lt;1</span><br></pre></td></tr></table></figure></p><p>前天的?那就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from lito where to_days(now())-to_days(create_time)&lt;2 and to_days(now())-to_days(create_time)&gt;1</span><br></pre></td></tr></table></figure></p><p>搬运来自：<a href="https://blog.csdn.net/sinat_19569023/article/details/50417273" target="_blank" rel="noopener">https://blog.csdn.net/sinat_19569023/article/details/50417273</a>   Mysql中TO_DAYS函数<br>          <a href="https://blog.csdn.net/wanghai__/article/details/4712555/" target="_blank" rel="noopener">https://blog.csdn.net/wanghai__/article/details/4712555/</a>          Union和Union All的区别</p><h1 id="Mysql数据库If语句的使用"><a href="#Mysql数据库If语句的使用" class="headerlink" title="Mysql数据库If语句的使用"></a>Mysql数据库If语句的使用</h1><p>MySQL的if既可以作为表达式用，也可在存储过程中作为流程控制语句使用，如下是做为表达式使用：<br>IF表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(expr1,expr2,expr3)</span><br></pre></td></tr></table></figure></p><p>如果 expr1 是TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL)，则 IF()的返回值为expr2; 否则返回值则为 expr3。IF() 的返回值为数字值或字符串值，具体情况视其所在语境而定。<br>IFNULL(expr1,expr2)<br>假如expr1 不为 NULL，则 IFNULL() 的返回值为 expr1; 否则其返回值为 expr2。IFNULL()的返回值是数字或是字符串，具体情况取决于其所使用的语境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT IFNULL(1,0);  </span><br><span class="line">        -&gt; 1  </span><br><span class="line">mysql&gt; SELECT IFNULL(NULL,10);  </span><br><span class="line">        -&gt; 10  </span><br><span class="line">mysql&gt; SELECT IFNULL(1/0,10);  </span><br><span class="line">        -&gt; 10  </span><br><span class="line">mysql&gt; SELECT IFNULL(1/0,&apos;yes&apos;);  </span><br><span class="line">        -&gt; &apos;yes&apos;</span><br></pre></td></tr></table></figure></p><p>IFNULL(expr1,expr2) 的默认结果值为两个表达式中更加“通用”的一个，顺序为STRING、 REAL或 INTEGER。<br>IF ELSE 做为流程控制语句使用<br>if实现条件判断，满足不同条件执行不同的操作，这个我们只要学编程的都知道if的作用了，下面我们来看看mysql 存储过程中的if是如何使用的吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF search_condition THEN   </span><br><span class="line">    statement_list    </span><br><span class="line">[ELSEIF search_condition THEN]    </span><br><span class="line">    statement_list ...    </span><br><span class="line">[ELSE   </span><br><span class="line">    statement_list]    </span><br><span class="line">END IF</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录自己一步一步学习MySQL的过程。之前一点不懂，现在想学习一下，所有的文章都是搬运其他人的Blog。感谢他们。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java从零开始—反射  2018-06-01</title>
    <link href="http://yoursite.com/2018/06/01/Java%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E2%80%94%E5%8F%8D%E5%B0%84-2018-06-01/"/>
    <id>http://yoursite.com/2018/06/01/Java从零开始—反射-2018-06-01/</id>
    <published>2018-05-31T23:02:10.000Z</published>
    <updated>2018-06-10T02:26:06.924Z</updated>
    
    <content type="html"><![CDATA[<p>从这篇文章之后，记录自己从零开始学习Java基础。时光是美好的，我们应该去尽情地去享受。<br>改变，永远不嫌晚，就怕你不去改变，而在原地踏步。以后写的文章，都是参考网上资料。会写明出处<br>这篇文章主要是反射，写文章的目的，主要是供自己方便查看。也会给别人带来方便。<br><a id="more"></a></p><p><font color="red" face="黑体" size="5">反射是框架设计的灵魂</font><br>    <font color="red" size="3">（使用的前提条件：必须先得到代表的字节码的Class，Class类用于表示.class文件（字节码））</font></p><h1 id="一、反射的概述"><a href="#一、反射的概述" class="headerlink" title="一、反射的概述"></a>一、反射的概述</h1><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。<br>要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</p><p>以上的总结就是什么是反射</p><p><font color="red" face="黑体" size="4">反射就是把java类中的各种成分映射成一个个的Java对象</font><br>例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。<br>     （其实：一个类中这些成员方法、构造方法、在加入类中都有一个类来描述）<br>如图是类的正常加载过程：反射的原理在与class对象。<br>熟悉一下加载的时候：Class对象的由来是将class文件读入内存，并为之创建一个Class对象。<br><img src="/images/reflection.png" alt="反射原理图"><br>其中这个Class对象很特殊。我们先了解一下这个Class类</p><h1 id="二、查看Class类在java中的api详解（1-6的API）"><a href="#二、查看Class类在java中的api详解（1-6的API）" class="headerlink" title="二、查看Class类在java中的api详解（1.6的API）"></a>二、查看Class类在java中的api详解（1.6的API）</h1><p><img src="/images/jdkapi.png" alt="jdkClass&lt;T&gt;对象"><br>    <font color="red">Class</font> 类的实例表示正在运行的 Java 应用程序中的类和接口。也就是jvm中有N多的实例每个类都有该<font color="red">Class</font>对象。（包括基本数据类型）<br>Class 没有公共构造方法。<font color="red">Class</font> 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的<font color="red">defineClass </font> 方法自动构造的。也就是这不需要我们自己去处理创建，JVM已经帮我们创建好了。</p><p>没有公共的构造方法，方法共有64个太多了。下面用到哪个就详解哪个吧<br><img src="/images/jdkmethod.png" alt="jdkClass&lt;T&gt;对象"> </p><h1 id="三、反射的使用-这里使用Student类做演示"><a href="#三、反射的使用-这里使用Student类做演示" class="headerlink" title="三、反射的使用(这里使用Student类做演示)"></a>三、反射的使用(这里使用Student类做演示)</h1><p>先编写Student类</p><h2 id="1、-获取Class对象的三种方式"><a href="#1、-获取Class对象的三种方式" class="headerlink" title="1、 获取Class对象的三种方式"></a>1、 获取Class对象的三种方式</h2><p>1.1 Object ——&gt; getClass();<br>1.2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性<br>1.3 通过Class类的静态方法：forName（String  className）(常用)</p><p>其中1.1是因为Object类中的getClass方法、因为所有类都继承Object类。从而调用Object类来获取<br><img src="/images/jdkgetclass.png" alt="jdkClass&lt;T&gt;对象"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package top.wycfight.study;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: wycfight@163.com</span><br><span class="line"> * @Description: Java基础-反射</span><br><span class="line"> *   获取Class对象的三种方式</span><br><span class="line"> *   1. Object ——&gt; getClass();</span><br><span class="line"> *   2. 任何数据类型 (包括基本数据类型) 都有一个<span class="string">"静态"</span>的class属性</span><br><span class="line"> *   3. 通过Class类的静态方法： forName(String className)(常用)</span><br><span class="line"> * @Date: Created <span class="keyword">in</span> 6:43 2018/6/1</span><br><span class="line"> * @Modified By:</span><br><span class="line"> */</span><br><span class="line">public class Reflection &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 第一种方式获取 new 会残生一个Student对象 和Class对象</span><br><span class="line">        Student student = new Student();</span><br><span class="line">        Class stuClass = student.getClass();</span><br><span class="line">        System.out.println(stuClass.getName());</span><br><span class="line"></span><br><span class="line">        // 第二种方式获取 class 对象</span><br><span class="line">        Class stuClass2 = Student.class;</span><br><span class="line">        // 判断两种方式获取到的Class对象是否是同一个</span><br><span class="line">        System.out.println(stuClass2.equals(stuClass));</span><br><span class="line"></span><br><span class="line">        // 第三种方式获取 （常用）</span><br><span class="line">        try &#123;</span><br><span class="line">            // forName 必须使用 包名.类名的形式</span><br><span class="line">            Class stuClass3  = Class.forName(<span class="string">"top.wycfight.study.Student"</span>);</span><br><span class="line">            // 判断三种获取的是否是通过一个对象</span><br><span class="line">            System.out.println(stuClass3 == stuClass2);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font size="4">注意：在运行期间，一个类，只有一个Class对象产生。</font><br>三种方式常用第三种，第一种对象都有了还要反射干什么。第二种需要导入类的包，依赖太强，不导包就抛编译错误。一般都第三种，一个字符串可以传入也可写在配置文件中等多种方法。</p><p>搬运来自：    <a href="https://blog.csdn.net/sinat_38259539/article/details/71799078" target="_blank" rel="noopener">https://blog.csdn.net/sinat_38259539/article/details/71799078</a>  Java基础之—反射（非常重要）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从这篇文章之后，记录自己从零开始学习Java基础。时光是美好的，我们应该去尽情地去享受。&lt;br&gt;改变，永远不嫌晚，就怕你不去改变，而在原地踏步。以后写的文章，都是参考网上资料。会写明出处&lt;br&gt;这篇文章主要是反射，写文章的目的，主要是供自己方便查看。也会给别人带来方便。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模板导出Excel;</title>
    <link href="http://yoursite.com/2018/05/30/%E6%A8%A1%E6%9D%BF%E5%AF%BC%E5%87%BAExcel/"/>
    <id>http://yoursite.com/2018/05/30/模板导出Excel/</id>
    <published>2018-05-29T22:38:03.000Z</published>
    <updated>2018-05-29T23:10:53.702Z</updated>
    
    <content type="html"><![CDATA[<p>导出Excel非常常见，因为在一些管理系统中，需要导出的东西非常多。<br>之前用的导出都是普通导出，并没有用到模板。后来看到能将html页面中的table<br>转成Excel就觉得非常厉害。本文主要讲解的是用模板进行导出Excel。<br><a id="more"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载有关pom文件的jar包。如果是Maven项目，配置如下。<br>pom.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>首先在项目某个目录下放入模板，因为需要将模板信息读出来，这里我在<br><img src="/images/model.png" alt="模板存放位置"><br>模板导出Excel思路，主要是创建文件输入流对象，根据模板创建工作簿，因为之前都是setXXX<br>现在改成了getXXX，具体实现代码如下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> XSSFWorkbook <span class="title">exportTemplate</span><span class="params">(String shipTime, List&lt;ContractProduct&gt; contractProductList)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前日期并格式化</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM"</span>);</span><br><span class="line">        String nowTime = sdf.format(date);</span><br><span class="line">        <span class="comment">// 通用变量</span></span><br><span class="line">        <span class="keyword">int</span> rowNo = <span class="number">0</span>,cellNo = <span class="number">1</span>;</span><br><span class="line">        Row row = <span class="keyword">null</span>;</span><br><span class="line">        Cell cell = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 根据相对路径找绝对路径</span></span><br><span class="line">        String path = <span class="string">"D:\\IdeaProject\\employee-manager\\web\\resources\\make\\tOUTPRODUCT.xls"</span>;</span><br><span class="line">        <span class="comment">//  创建工作簿</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建文件的输入流对象</span></span><br><span class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(is);</span><br><span class="line">            <span class="comment">// 读取工作表</span></span><br><span class="line">            Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            row = sheet.getRow(rowNo++);</span><br><span class="line">            row.getCell(cellNo);</span><br><span class="line">            cell.setCellValue(shipTime.replace(<span class="string">"-0"</span>,<span class="string">"年"</span>).replace(<span class="string">"-"</span>,<span class="string">"年"</span>)+<span class="string">"月份出货表"</span>);</span><br><span class="line">            <span class="comment">// 小标题 跳过第二行</span></span><br><span class="line">            rowNo++;</span><br><span class="line">            <span class="comment">// 读取第三行</span></span><br><span class="line">            row = sheet.getRow(rowNo);</span><br><span class="line">            <span class="comment">//获取每个单元格的样式</span></span><br><span class="line">            CellStyle customCellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">            CellStyle orderNoCellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">            CellStyle productNoCellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">            CellStyle CellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">            CellStyle cNumbercustomCellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">            CellStyle factoryCellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">            CellStyle deliveryCellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">            CellStyle shipTimeCellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">            CellStyle tradeTermsCellStyle = row.getCell(cellNo++).getCellStyle();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>以上就是模板打印方法，下面介绍下workBook接口中的实现类。</p><p>###区别：<br>用JavaPOI导出Excel时，我们会考虑到Excel版本及数据量的问题。针对不同的Excel版本，要采用不同的工具类。</p><p>HSSFWorkbook:是操作Excel2003以前（包括2003）的版本，扩展名是.xls；</p><p>XSSFWorkbook:是操作Excel2007的版本，扩展名是.xlsx；</p><p>对于不同版本的EXCEL文档要使用不同的工具类，如果使用错了，会提示如下错误信息。</p><p>org.apache.poi.openxml4j.exceptions.InvalidOperationException</p><p>org.apache.poi.poifs.filesystem.OfficeXmlFileException</p><p>从POI 3.8版本开始，提供了一种基于XSSF的低内存占用的API—-SXSSF</p><p>当数据量超出65536条后，在使用HSSFWorkbook或XSSFWorkbook，程序会报OutOfMemoryError：Javaheap space;内存溢出错误。这时应该用SXSSFworkbook。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>针对 SXSSF Beta 3.8下，会有临时文件产生，比如：<br>poi-sxssf-sheet4654655121378979321.xml<br>文件位置：java.io.tmpdir这个环境变量下的位置<br>Windows 7下是C:\Users\xxxxxAppData\Local\Temp<br>Linux下是 /var/tmp/<br>要根据实际情况，看是否删除这些临时文件</p><p>与XSSF的对比<br>在一个时间点上，只可以访问一定数量的数据<br>不再支持Sheet.clone()<br>不再支持公式的求值</p><p>在使用Excel模板下载数据时将不能动态改变表头，因为这种方式已经提前把excel写到硬盘的了就不能再改了</p><h3 id="简单定义"><a href="#简单定义" class="headerlink" title="简单定义"></a>简单定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input = classPathResource.getInputStream();</span><br><span class="line">           input = classPathResource.getInputStream();</span><br><span class="line">            Workbook wb = <span class="keyword">null</span>;</span><br><span class="line">            HSSFWorkbook hwb=<span class="keyword">null</span>;</span><br><span class="line">            XSSFWorkbook xwb=<span class="keyword">null</span>;</span><br><span class="line">            SXSSFWorkbook swb = <span class="keyword">null</span>;</span><br><span class="line">            Sheet sh = <span class="keyword">null</span>;</span><br><span class="line">            wb = WorkbookFactory.create(input);</span><br><span class="line">            hwb = (HSSFWorkbook) WorkbookFactory.create(input);</span><br><span class="line">            xwb = (XSSFWorkbook) WorkbookFactory.create(input);</span><br><span class="line">            swb = <span class="keyword">new</span> SXSSFWorkbook(xwb,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;导出Excel非常常见，因为在一些管理系统中，需要导出的东西非常多。&lt;br&gt;之前用的导出都是普通导出，并没有用到模板。后来看到能将html页面中的table&lt;br&gt;转成Excel就觉得非常厉害。本文主要讲解的是用模板进行导出Excel。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java 使用 jacob 将微软office中 word excel ppt转成pdf</title>
    <link href="http://yoursite.com/2018/05/24/Java-%E4%BD%BF%E7%94%A8-jacob-%E5%B0%86%E5%BE%AE%E8%BD%AFoffice%E4%B8%AD-word-excel-ppt-jpg%E8%BD%AC%E6%88%90pdf/"/>
    <id>http://yoursite.com/2018/05/24/Java-使用-jacob-将微软office中-word-excel-ppt-jpg转成pdf/</id>
    <published>2018-05-23T23:20:17.000Z</published>
    <updated>2018-05-28T23:09:00.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-将-word-excel-ppt如何转pdf"><a href="#Java-将-word-excel-ppt如何转pdf" class="headerlink" title="Java 将 word,excel,ppt如何转pdf"></a>Java 将 word,excel,ppt如何转pdf</h2><p>首先：windows server下用 jacob; linux server下 用openoffice。<br>        1.<strong>本文中说的是windows server下用 jacob这一部分,之后说openoffice的解决方案。</strong><br>        2.<strong>本文中说的解决方案支持将doc,docx,xls,xlsx,ppt,pptx这些格式转成pdf。</strong><br>        3.<strong>jacob可以调用windows com组件，但不是不止这一种方案：可以搜“java调用com”，查看其它的解决方案</strong><br><a id="more"></a><br>本次用的主要是文件附件的预览，后来想到查阅资料说：要将一些office中word，excel，ppt转成pdf。<br>首先本机中必须安装Office软件，因为jacob需要借助Office软件转PDF。而且服务器是windows server。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先下载jacob.zip ,地址：<a href="https://sourceforge.net/projects/jacob-project/" target="_blank" rel="noopener">https://sourceforge.net/projects/jacob-project/</a><br>打开压缩包 64位系统就用 x64的dll，32位系统就用x86的dll。将dll文件放入放入jdk/bin目录下。<br>如果是Maven项目 将jar放到项目任意目录下 用maven引入就行。<br>下面是借鉴别人的工具类，具体代码如下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.yijia.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.*;</span><br><span class="line"><span class="keyword">import</span> com.itextpdf.text.pdf.PdfWriter;</span><br><span class="line"><span class="keyword">import</span> com.jacob.activeX.ActiveXComponent;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.ComThread;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Dispatch;</span><br><span class="line"><span class="keyword">import</span> com.jacob.com.Variant;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: word excel ppt 转成pdf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 8:41 2018/5/23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OfficeConverterUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将图片转成pdf</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgFilePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfFilePath 生成pdf图片的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">imgToPdf</span><span class="params">(String imgFilePath, String pdfFilePath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(imgFilePath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            Document document = <span class="keyword">new</span> Document();</span><br><span class="line">            FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos = <span class="keyword">new</span> FileOutputStream(pdfFilePath);</span><br><span class="line">                PdfWriter.getInstance(document, fos);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 添加PDF文档的某些信息，比如作者，主题等等</span></span><br><span class="line">                document.addAuthor(<span class="string">"arui"</span>);</span><br><span class="line">                document.addSubject(<span class="string">"test pdf."</span>);</span><br><span class="line">                <span class="comment">// 设置文档的大小</span></span><br><span class="line">                document.setPageSize(PageSize.A4);</span><br><span class="line">                <span class="comment">// 打开文档</span></span><br><span class="line">                document.open();</span><br><span class="line">                <span class="comment">// 写入一段文字</span></span><br><span class="line">                <span class="comment">//document.add(new Paragraph("JUST TEST ..."));</span></span><br><span class="line">                <span class="comment">// 读取一个图片</span></span><br><span class="line">                Image image = Image.getInstance(imgFilePath);</span><br><span class="line">                <span class="keyword">float</span> imageHeight = image.getScaledHeight();</span><br><span class="line">                <span class="keyword">float</span> imageWidth = image.getScaledWidth();</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (imageHeight &gt; <span class="number">500</span> || imageWidth &gt; <span class="number">500</span>) &#123;</span><br><span class="line">                    image.scalePercent(<span class="number">100</span> - i);</span><br><span class="line">                    i++;</span><br><span class="line">                    imageHeight = image.getScaledHeight();</span><br><span class="line">                    imageWidth = image.getScaledWidth();</span><br><span class="line">                    System.out.println(<span class="string">"imageHeight-&gt;"</span> + imageHeight);</span><br><span class="line">                    System.out.println(<span class="string">"imageWidth-&gt;"</span> + imageWidth);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                image.setAlignment(Image.ALIGN_CENTER);</span><br><span class="line"><span class="comment">//        //设置图片的绝对位置</span></span><br><span class="line">                <span class="comment">// image.setAbsolutePosition(0, 0);</span></span><br><span class="line">                <span class="comment">// image.scaleAbsolute(500, 400);</span></span><br><span class="line">                <span class="comment">// 插入一个图片</span></span><br><span class="line">                document.add(image);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (DocumentException de) &#123;</span><br><span class="line">                System.out.println(de.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                System.out.println(ioe.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            document.close();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.flush();</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * wps 转成pdf</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputFile 目标文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfFile   pdf文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wps2PDF</span><span class="params">(String inputFile, String pdfFile)</span> </span>&#123;</span><br><span class="line">        File sFile = <span class="keyword">new</span> File(inputFile);</span><br><span class="line">        File tFile = <span class="keyword">new</span> File(pdfFile);</span><br><span class="line">        ActiveXComponent wps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ComThread.InitSTA();</span><br><span class="line">            wps = <span class="keyword">new</span> ActiveXComponent(<span class="string">"wps.application"</span>);</span><br><span class="line">            ActiveXComponent doc = wps.invokeGetComponent(<span class="string">"Documents"</span>).invokeGetComponent(<span class="string">"Open"</span>, <span class="keyword">new</span> Variant(sFile.getAbsolutePath()));</span><br><span class="line">            doc.invoke(<span class="string">"ExportPdf"</span>, <span class="keyword">new</span> Variant(tFile.getAbsolutePath()));</span><br><span class="line">            doc.invoke(<span class="string">"Close"</span>);</span><br><span class="line">            doc.safeRelease();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (wps != <span class="keyword">null</span>) &#123;</span><br><span class="line">                wps.invoke(<span class="string">"Terminate"</span>);</span><br><span class="line">                wps.safeRelease();</span><br><span class="line">            &#125;</span><br><span class="line">            ComThread.Release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * log</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(OfficeConverterUtil.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WDFO_RMATPDF = <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> XLTYPE_PDF = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PPT_SAVEAS_PDF = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WORD_HTML = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WORD_TXT = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEL_HTML = <span class="number">44</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PPT_SAVEAS_JPG = <span class="number">17</span>;</span><br><span class="line">    <span class="comment">// private static final int msoTrue = -1;</span></span><br><span class="line">    <span class="comment">// private static final int msofalse = 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断文件类型 并转成pdf</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> argInputFilePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> argPdfPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">officeFileConverterToPdf</span><span class="params">(String argInputFilePath, String argPdfPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (argInputFilePath.isEmpty() || argPdfPath.isEmpty() || getFileSufix(argInputFilePath).isEmpty()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"输入或输出的文件路径有误！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String suffix = getFileSufix(argInputFilePath);</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(argInputFilePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"文件不存在！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PDF如果不存在则创建文件夹</span></span><br><span class="line">        file = <span class="keyword">new</span> File(getFilePath(argPdfPath));</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果输入的路径为PDF 则生成失败</span></span><br><span class="line">        <span class="keyword">if</span> (suffix.equals(<span class="string">"pdf"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"PDF not need to convert!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (suffix.equals(<span class="string">"doc"</span>) || suffix.equals(<span class="string">"docx"</span>) || suffix.equals(<span class="string">"txt"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> wordToPDF(argInputFilePath, argPdfPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (suffix.equals(<span class="string">"xls"</span>) || suffix.equals(<span class="string">"xlsx"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> excelToPdf(argInputFilePath, argPdfPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (suffix.equals(<span class="string">"ppt"</span>) || suffix.equals(<span class="string">"pptx"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pptToPdf(argInputFilePath, argPdfPath);</span><br><span class="line">            <span class="comment">// return ppt2PDF(argInputFilePath, argPdfPath);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (suffix.equals(<span class="string">"jpg"</span>) || suffix.equals(<span class="string">"png"</span>) || suffix.equals(<span class="string">"jpeg"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> imgToPdf(argInputFilePath, argPdfPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Word 转成PDF</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wordPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">wordToPDF</span><span class="params">(String wordPath, String pdfPath)</span> </span>&#123;</span><br><span class="line">        ActiveXComponent msWordApp = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Word.Application"</span>);</span><br><span class="line">        msWordApp.setProperty(<span class="string">"Visible"</span>, <span class="keyword">new</span> Variant(<span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">        Dispatch docs = Dispatch.get(msWordApp, <span class="string">"Documents"</span>).toDispatch();</span><br><span class="line">        <span class="comment">// long pdfStart = System.currentTimeMillis();</span></span><br><span class="line">        Dispatch doc = Dispatch.invoke(docs, <span class="string">"Open"</span>, Dispatch.Method, <span class="keyword">new</span> Object[]&#123;wordPath, <span class="keyword">new</span> Variant(<span class="keyword">false</span>), <span class="keyword">new</span> Variant(<span class="keyword">true</span>)&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>]).toDispatch();</span><br><span class="line"></span><br><span class="line">        deletePdf(pdfPath);</span><br><span class="line"></span><br><span class="line">        Dispatch.invoke(doc, <span class="string">"SaveAs"</span>, Dispatch.Method, <span class="keyword">new</span> Object[]&#123;pdfPath, <span class="keyword">new</span> Variant(WDFO_RMATPDF)&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// long pdfEnd = System.currentTimeMillis();</span></span><br><span class="line">        logger.debug(wordPath + <span class="string">",pdf转换完成.."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != doc) &#123;</span><br><span class="line">            Dispatch.call(doc, <span class="string">"Close"</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * excel 转成pdf</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputFile 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfFile   目标文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">excelToPdf</span><span class="params">(String inputFile, String pdfFile)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"启动Excel"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ActiveXComponent app = <span class="keyword">new</span> ActiveXComponent(<span class="string">"Excel.Application"</span>); <span class="comment">// 启动excel(Excel.Application)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            app.setProperty(<span class="string">"Visible"</span>, <span class="keyword">false</span>);</span><br><span class="line">            Dispatch workbooks = app.getProperty(<span class="string">"Workbooks"</span>).toDispatch();</span><br><span class="line">            System.out.println(<span class="string">"打开文档"</span> + inputFile);</span><br><span class="line">            Dispatch workbook = Dispatch.invoke(workbooks, <span class="string">"Open"</span>, Dispatch.Method, <span class="keyword">new</span> Object[]&#123;inputFile, <span class="keyword">new</span> Variant(<span class="keyword">false</span>), <span class="keyword">new</span> Variant(<span class="keyword">false</span>)&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]).toDispatch();</span><br><span class="line">            Dispatch.invoke(workbook, <span class="string">"SaveAs"</span>, Dispatch.Method, <span class="keyword">new</span> Object[]&#123;</span><br><span class="line">                    pdfFile, <span class="keyword">new</span> Variant(<span class="number">57</span>), <span class="keyword">new</span> Variant(<span class="keyword">false</span>),</span><br><span class="line">                    <span class="keyword">new</span> Variant(<span class="number">57</span>), <span class="keyword">new</span> Variant(<span class="number">57</span>), <span class="keyword">new</span> Variant(<span class="keyword">false</span>),</span><br><span class="line">                    <span class="keyword">new</span> Variant(<span class="keyword">true</span>), <span class="keyword">new</span> Variant(<span class="number">57</span>), <span class="keyword">new</span> Variant(<span class="keyword">true</span>),</span><br><span class="line">                    <span class="keyword">new</span> Variant(<span class="keyword">true</span>), <span class="keyword">new</span> Variant(<span class="keyword">true</span>)&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>]);</span><br><span class="line">            Variant f = <span class="keyword">new</span> Variant(<span class="keyword">false</span>);</span><br><span class="line">            System.out.println(<span class="string">"转换文档到PDF "</span> + pdfFile);</span><br><span class="line">            Dispatch.call(workbook, <span class="string">"Close"</span>, f);</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">"转换完成..用时："</span> + (end - start) + <span class="string">"ms."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"========Error:文档转换失败："</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (app != <span class="keyword">null</span>) &#123;</span><br><span class="line">                app.invoke(<span class="string">"Quit"</span>, <span class="keyword">new</span> Variant[]&#123;&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ppt 转成 pdf</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">pptToPdf</span><span class="params">(String inputFile, String pdfFile)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      ComThread.InitSTA();</span></span><br><span class="line">        ActiveXComponent activeXComponent = <span class="keyword">new</span> ActiveXComponent(<span class="string">"PowerPoint.Application"</span>);</span><br><span class="line"><span class="comment">//      activeXComponent.setProperty("Visible", new Variant(false));</span></span><br><span class="line">        Dispatch ppts = activeXComponent.getProperty(<span class="string">"Presentations"</span>).toDispatch();</span><br><span class="line"></span><br><span class="line">        deletePdf(pdfFile);</span><br><span class="line"></span><br><span class="line">        Dispatch ppt = Dispatch.call(ppts, <span class="string">"Open"</span>, inputFile, <span class="keyword">false</span>, <span class="comment">// ReadOnly</span></span><br><span class="line">                <span class="keyword">true</span>, <span class="comment">// Untitled指定文件是否有标题</span></span><br><span class="line">                <span class="keyword">true</span><span class="comment">// WithWindow指定文件是否可见</span></span><br><span class="line">        ).toDispatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      Dispatch ppt = Dispatch.invoke(ppts, "Open", Dispatch.Method, new Object[] &#123; inputFile, new Variant(false), new Variant(true) &#125;, new int[1]).toDispatch();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      Dispatch.call(ppt, "SaveAs", pdfFile, PPT_SAVEAS_PDF);</span></span><br><span class="line"><span class="comment">//      Dispatch.call(ppt, "SaveAs", pdfFile, new Variant(PPT_SAVEAS_PDF));</span></span><br><span class="line"><span class="comment">//      Dispatch.call(ppt, "SaveAs", pdfFile, new Variant(PPT_SAVEAS_PDF));</span></span><br><span class="line"><span class="comment">//      Dispatch.invoke(ppt, "SaveAs", Dispatch.Method, new Object[] &#123; pdfFile, PPT_SAVEAS_PDF &#125;, new int[1]);</span></span><br><span class="line"><span class="comment">//      Dispatch.invoke(ppt, "SaveAs", Dispatch.Method, new Object[] &#123; new Variant(PPT_SAVEAS_PDF) &#125;, new int[1]);</span></span><br><span class="line">        Dispatch.callN(ppt, <span class="string">"SaveAs"</span>, <span class="keyword">new</span> Variant(pdfFile));</span><br><span class="line"></span><br><span class="line">        Dispatch.call(ppt, <span class="string">"Close"</span>);</span><br><span class="line"></span><br><span class="line">        activeXComponent.invoke(<span class="string">"Quit"</span>);</span><br><span class="line"><span class="comment">//      ComThread.Release();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ppt to img</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">pptToImg</span><span class="params">(String inputFile, String imgFile)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打开word应用程序</span></span><br><span class="line">        ActiveXComponent app = <span class="keyword">new</span> ActiveXComponent(<span class="string">"PowerPoint.Application"</span>);</span><br><span class="line">        <span class="comment">// 设置word不可见，office可能有限制</span></span><br><span class="line">        <span class="comment">// app.setProperty("Visible", false);</span></span><br><span class="line">        <span class="comment">// 获取word中所打开的文档，返回Documents对象</span></span><br><span class="line">        Dispatch files = app.getProperty(<span class="string">"Presentations"</span>).toDispatch();</span><br><span class="line">        <span class="comment">// 调用Documents对象中Open方法打开文档，并返回打开的文档对象Document</span></span><br><span class="line">        Dispatch file = Dispatch.call(files, <span class="string">"open"</span>, inputFile, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>).toDispatch();</span><br><span class="line">        <span class="comment">// 调用Document对象的SaveAs方法，将文档保存为pdf格式</span></span><br><span class="line">        <span class="comment">// Dispatch.call(doc, "ExportAsFixedFormat", outputFile,</span></span><br><span class="line">        <span class="comment">// PPT_TO_PDF);</span></span><br><span class="line">        Dispatch.call(file, <span class="string">"SaveAs"</span>, imgFile, PPT_SAVEAS_JPG);</span><br><span class="line">        <span class="comment">// 关闭文档</span></span><br><span class="line">        <span class="comment">// Dispatch.call(file, "Close", false);</span></span><br><span class="line">        Dispatch.call(file, <span class="string">"Close"</span>);</span><br><span class="line">        <span class="comment">// 关闭word应用程序</span></span><br><span class="line">        <span class="comment">// app.invoke("Quit", 0);</span></span><br><span class="line">        app.invoke(<span class="string">"Quit"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断文件类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> argFilePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileSufix</span><span class="params">(String argFilePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> splitIndex = argFilePath.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">return</span> argFilePath.substring(splitIndex + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到文件路径  如D：//1/2/3.txt  得到 D：//1//2/</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> argFilePath file path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> filePaths</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFilePath</span><span class="params">(String argFilePath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从文件路径  从右往左截取到文件的目录</span></span><br><span class="line">        <span class="keyword">int</span> pathIndex = argFilePath.lastIndexOf(<span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">return</span> argFilePath.substring(<span class="number">0</span>, pathIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果PDF存在则删除PDF</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfPath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deletePdf</span><span class="params">(String pdfPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将文件目录放入File中  如果存在将进行删除</span></span><br><span class="line">        File pdfFile = <span class="keyword">new</span> File(pdfPath);</span><br><span class="line">        <span class="keyword">if</span> (pdfFile.exists()) &#123;</span><br><span class="line">            pdfFile.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件的名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        String fileName = file.getName();</span><br><span class="line">        <span class="keyword">int</span> pathIndex = fileName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">return</span> fileName.substring(<span class="number">0</span>, pathIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        String path = "D:/360Download/员工表.xls";</span></span><br><span class="line"><span class="comment">//        String filePath = OfficeConverterUtil.getFilePath(path);</span></span><br><span class="line"><span class="comment">//        String fileName = OfficeConverterUtil.getFileName(path);</span></span><br><span class="line"><span class="comment">//        OfficeConverterUtil.officeFileConverterToPdf(path,filePath+"/"+fileName+".pdf");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-将-word-excel-ppt如何转pdf&quot;&gt;&lt;a href=&quot;#Java-将-word-excel-ppt如何转pdf&quot; class=&quot;headerlink&quot; title=&quot;Java 将 word,excel,ppt如何转pdf&quot;&gt;&lt;/a&gt;Java 将 word,excel,ppt如何转pdf&lt;/h2&gt;&lt;p&gt;首先：windows server下用 jacob; linux server下 用openoffice。&lt;br&gt;        1.&lt;strong&gt;本文中说的是windows server下用 jacob这一部分,之后说openoffice的解决方案。&lt;/strong&gt;&lt;br&gt;        2.&lt;strong&gt;本文中说的解决方案支持将doc,docx,xls,xlsx,ppt,pptx这些格式转成pdf。&lt;/strong&gt;&lt;br&gt;        3.&lt;strong&gt;jacob可以调用windows com组件，但不是不止这一种方案：可以搜“java调用com”，查看其它的解决方案&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
