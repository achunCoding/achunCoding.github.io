<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿春的博客</title>
  <icon>https://www.gravatar.com/avatar/31264fc2758de3e73e437fcc8d541172</icon>
  <subtitle>改变,永远不嫌晚！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-06T13:47:23.866Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>阿春</name>
    <email>wycfight@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式学习</title>
    <link href="http://yoursite.com/2019/04/06/regex-study/"/>
    <id>http://yoursite.com/2019/04/06/regex-study/</id>
    <published>2019-04-06T13:38:35.000Z</published>
    <updated>2019-04-06T13:47:23.866Z</updated>
    
    <content type="html"><![CDATA[<p>近期学了下正则，记录下正则的在Java中的基本用法。正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE），又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。<br><img src="/2019/04/06/regex-study/regex-study.jpg" alt="预览图"><br><a id="more"></a></p><h1 id="正则一些简单用法"><a href="#正则一些简单用法" class="headerlink" title="正则一些简单用法"></a>正则一些简单用法</h1><p><a name="7806b4a6"></a></p><h1 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1. 正则表达式"></a>1. 正则表达式</h1><p>正则表达式<br>: 定义一个搜索模式的字符串。<br>正则表达式可以用于搜索、编辑和操作文本。<br>正则对文本的分析或修改过程为：首先正则表达式应用的是文本字符串（text/string），它会以定义的模式从左到右匹配文本，每个源字符只匹配一次。<br><a name="069a1df8"></a></p><h2 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h2><table><thead><tr><th style="text-align:left">正则表达式</th><th style="text-align:left">匹配</th></tr></thead><tbody><tr><td style="text-align:left"><code>this is text</code></td><td style="text-align:left">精确匹配字符串 “this is text”</td></tr><tr><td style="text-align:left"><code>this\s+is\s+text</code></td><td style="text-align:left">匹配单词 “this” 后跟一个或多个空格字符，<br>后跟词 “is” 后跟一个或多个空格字符，<br>后跟词 “text”</td></tr><tr><td style="text-align:left"><code>^\d+(\.\d+)?</code></td><td style="text-align:left"><code>^</code> 定义模式必须匹配字符串的开始，<br><code>d+</code> 匹配一个或多个数字，<br><code>?</code> 表明小括号内的语句是可选的，<br><code>\.</code> 匹配 “.”，小括号表示分组。<br>例如匹配：”5”、”1.5” 和 “2.21”</td></tr></tbody></table><p><a name="096dfb65"></a></p><h1 id="2-正则表达式的编写规则"><a href="#2-正则表达式的编写规则" class="headerlink" title="2. 正则表达式的编写规则"></a>2. 正则表达式的编写规则</h1><p><a name="4f2b92d5"></a></p><h2 id="2-1-常见匹配符号"><a href="#2-1-常见匹配符号" class="headerlink" title="2.1 常见匹配符号"></a>2.1 常见匹配符号</h2><table><thead><tr><th style="text-align:left">正则表达式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">匹配所有单个字符，<br>除了换行符（Linux 中换行是 <code>\n</code>，<br>Windows 中换行是 <code>\r\n</code>）</td></tr><tr><td style="text-align:left"><code>^regex</code></td><td style="text-align:left">正则必须匹配字符串开头</td></tr><tr><td style="text-align:left"><code>regex$</code></td><td style="text-align:left">正则必须匹配字符串结尾</td></tr><tr><td style="text-align:left"><code>[abc]</code></td><td style="text-align:left">复选集定义，匹配字母 a 或 b 或 c</td></tr><tr><td style="text-align:left"><code>[abc][vz]</code></td><td style="text-align:left">复选集定义，匹配字母 a 或 b 或 c，后面跟着 v 或 z</td></tr><tr><td style="text-align:left"><code>[^abc]</code></td><td style="text-align:left">当插入符 <code>^</code> 在中括号中以第一个字符开始显示，<br>则表示否定模式。此模式匹配所有字符，<br>除了 a 或 b 或 c</td></tr><tr><td style="text-align:left"><code>[a-d1-7]</code></td><td style="text-align:left">范围匹配，匹配字母 a 到 d 和数字从 1 到 7 之间，<br>但不匹配 d1</td></tr><tr><td style="text-align:left"><code>XZ</code></td><td style="text-align:left">匹配 X 后直接跟着 Z</td></tr><tr><td style="text-align:left">X</td><td style="text-align:left">Z</td><td>匹配 X 或 Z</td></tr></tbody></table><p><a name="e92575c5"></a></p><h2 id="2-2-元字符"><a href="#2-2-元字符" class="headerlink" title="2.2 元字符"></a>2.2 元字符</h2><p>元字符是一个预定义的字符。</p><table><thead><tr><th style="text-align:left">正则表达式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>\d</code></td><td style="text-align:left">匹配一个数字，是 <code>[0-9]</code> 的简写</td></tr><tr><td style="text-align:left"><code>\D</code></td><td style="text-align:left">匹配一个非数字，是 <code>[^0-9]</code> 的简写</td></tr><tr><td style="text-align:left"><code>\s</code></td><td style="text-align:left">匹配一个空格，是 <code>[ \t\n\x0b\r\f]</code> 的简写</td></tr><tr><td style="text-align:left"><code>\S</code></td><td style="text-align:left">匹配一个非空格</td></tr><tr><td style="text-align:left"><code>\w</code></td><td style="text-align:left">匹配一个单词字符（大小写字母、数字、下划线），<br>是 <code>[a-zA-Z_0-9]</code> 的简写</td></tr><tr><td style="text-align:left"><code>\W</code></td><td style="text-align:left">匹配一个非单词字符<br>（除了大小写字母、数字、下划线之外的字符），<br>等同于 <code>[^\w]</code></td></tr></tbody></table><p><a name="1e85a39c"></a></p><h2 id="2-3-限定符"><a href="#2-3-限定符" class="headerlink" title="2.3 限定符"></a>2.3 限定符</h2><p>限定符定义了一个元素可以发生的频率。</p><table><thead><tr><th style="text-align:left">正则表达式</th><th style="text-align:left">描述</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">匹配 &gt;=0 个，是 <code>{0,}</code> 的简写</td><td style="text-align:left"><code>X*</code> 表示匹配零个或多个字母 X，<br><code>.*</code>表示匹配任何字符串</td></tr><tr><td style="text-align:left"><code>+</code></td><td style="text-align:left">匹配 &gt;=1 个，是 <code>{1,}</code> 的简写</td><td style="text-align:left"><code>X+</code> 表示匹配一个或多个字母 X</td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:left">匹配 1 个或 0 个，是 <code>{0,1}</code> 的简写</td><td style="text-align:left"><code>X?</code> 表示匹配 0 个或 1 个字母 X</td></tr><tr><td style="text-align:left"><code>{X}</code></td><td style="text-align:left">只匹配 X 个字符</td><td style="text-align:left"><code>\d{3}</code> 表示匹配 3 个数字，<br><code>.{10}</code>表示匹配任何长度是 10 的字符串</td></tr><tr><td style="text-align:left"><code>{X,Y}</code></td><td style="text-align:left">匹配 &gt;=X 且 &lt;=Y 个</td><td style="text-align:left"><code>\d{1,4}</code> 表示匹配至少 1 个最多 4 个数字</td></tr><tr><td style="text-align:left"><code>*?</code></td><td style="text-align:left">如果 <code>?</code> 是限定符 <code>*</code> 或 <code>+</code> 或 <code>?</code> 或 <code>{}</code> 后面的第一个字符，那么表示<strong>非贪婪模式</strong>贪婪模式**</td></tr></tbody></table><p><a name="2f4d79e5"></a></p><h2 id="2-4-分组和反向引用"><a href="#2-4-分组和反向引用" class="headerlink" title="2.4 分组和反向引用"></a>2.4 分组和反向引用</h2><p>小括号 <code>()</code> 可以达到对正则表达式进行分组的效果。<br>模式分组后会在正则表达式中创建<strong>反向引用</strong>。反向引用会保存匹配模式分组的字符串片断，这使得我们可以获取并使用这个字符串片断。<br>在以正则表达式替换字符串的语法中，是通过 <code>$</code> 来引用分组的反向引用，<code>$0</code> 是匹配完整模式的字符串（注意在 JavaScript 中是用 <code>$&amp;</code> 表示）；<code>$1</code> 是第一个分组的反向引用；<code>$2</code> 是第二个分组的反向引用，以此类推。<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 正则表达式分组和反向引用测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-01-07 08:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegularTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 去除单词， . 之间的空格</span></span><br><span class="line">        String str = <span class="string">"oa ,wb ."</span>;</span><br><span class="line">        String pattern = <span class="string">"(\\w)(\\s+)([.,])"</span>;</span><br><span class="line">        <span class="comment">// $0 匹配 '(\w)(\s+)([.,])' 结果为'o空格,' 和 'd空格.'</span></span><br><span class="line">        <span class="comment">// $1 匹配 '(\w)' 结果为'0'和'd'</span></span><br><span class="line">        <span class="comment">// $2 匹配 '(\s+)' 结果为 '空格' 和 '空格'</span></span><br><span class="line">        <span class="comment">// $3 匹配 '([.,])' 结果为',' 和 '.'</span></span><br><span class="line">        System.out.println(str.replaceAll(pattern, <span class="string">"$1$3"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1546823657728-ff677cdd-3a81-4e08-b616-6eb30ac74f7e.png#align=left&amp;display=inline&amp;height=128&amp;name=image.png&amp;originHeight=128&amp;originWidth=554&amp;size=9454&amp;status=done&amp;width=554" alt="image.png"><br>上面的例子中，我们使用了 <code>[.]</code> 来匹配普通字符 <code>.</code> 而不需要使用 <code>[\\.]</code>。因为正则对于 <code>[]</code> 中的 <code>.</code>，会自动处理为 <code>[\.]</code>，即普通字符 <code>.</code> 进行匹配。<br><a name="36a5fc1c"></a></p><h3 id="2-4-1-仅分组但无反向引用"><a href="#2-4-1-仅分组但无反向引用" class="headerlink" title="2.4.1 仅分组但无反向引用"></a>2.4.1 仅分组但无反向引用</h3><p>当我们在小括号 <code>()</code> 内的模式开头加入 <code>?:</code>，那么表示这个模式仅分组，但不创建反向引用。<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 正则表达式测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-01-07 10:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"img.jpg"</span>;</span><br><span class="line">        <span class="comment">// 分组且创建反向引用</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"(jpg|png)"</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">            System.out.println(matcher.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1546827654412-c8ad79fb-045f-4826-a2ea-5e7ac6e05409.png#align=left&amp;display=inline&amp;height=168&amp;name=image.png&amp;originHeight=168&amp;originWidth=784&amp;size=14026&amp;status=done&amp;width=784" alt="image.png"><br>若源码改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 正则表达式测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-01-07 10:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"img.jpg"</span>;</span><br><span class="line">        <span class="comment">// 分组且创建反向引用</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"(?:jpg|png)"</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">            System.out.println(matcher.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1546828026159-d6f0e4aa-e213-4e40-b2e9-cebf73d6b7c8.png#align=left&amp;display=inline&amp;height=155&amp;name=image.png&amp;originHeight=155&amp;originWidth=699&amp;size=20905&amp;status=done&amp;width=699" alt="image.png"><br><a name="0ef7c0fd"></a></p><h3 id="2-4-2-分组的反向引用副本"><a href="#2-4-2-分组的反向引用副本" class="headerlink" title="2.4.2 分组的反向引用副本"></a>2.4.2 分组的反向引用副本</h3><p>Java 中可以在小括号中使用 <code>?&lt;name&gt;</code> 将小括号中匹配的内容保存为一个名字为 name 的副本。<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 正则表达式测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-01-07 10:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"@wyc 雷浩啊"</span>;</span><br><span class="line">        <span class="comment">// 分组且创建反向引用</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"@(?&lt;first&gt;\\w+\\s)"</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">            System.out.println(matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(matcher.group(<span class="string">"first"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1546828346851-8bb7444c-51dc-419f-994a-81a18bbdc0fe.png#align=left&amp;display=inline&amp;height=151&amp;name=image.png&amp;originHeight=151&amp;originWidth=666&amp;size=10823&amp;status=done&amp;width=666" alt="image.png"><br><a name="28404130"></a></p><h2 id="2-5-否定先行断言（Negative-lookahead）"><a href="#2-5-否定先行断言（Negative-lookahead）" class="headerlink" title="2.5 否定先行断言（Negative lookahead）"></a>2.5 否定先行断言（Negative lookahead）</h2><p>我们可以创建否定先行断言模式的匹配，即某个字符串后面不包含另一个字符串的匹配模式。<br>否定先行断言模式通过 <code>(?!pattern)</code> 定义。比如，我们匹配后面不是跟着 “b” 的 “a”：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">a</span><span class="params">(?!b)</span></span></span><br></pre></td></tr></table></figure></p><p><a name="56c15343"></a></p><h2 id="2-6-指定正则表达式的模式"><a href="#2-6-指定正则表达式的模式" class="headerlink" title="2.6 指定正则表达式的模式"></a>2.6 指定正则表达式的模式</h2><p>可以在正则的<strong>开头</strong>指定模式修饰符。</p><ul><li><code>(?i)</code> 使正则忽略大小写。</li><li><code>(?s)</code> 表示<em>单行模式</em>（”single line mode”）使正则的 <code>.</code> 匹配所有字符，包括换行符。</li><li><code>(?m)</code> 表示<em>多行模式</em>（”multi-line mode”），使正则的 <code>^</code> 和 <code>$</code> 匹配字符串中每行的开始和结束。<br><a name="773f0260"></a><h2 id="2-7-Java-中的反斜杠"><a href="#2-7-Java-中的反斜杠" class="headerlink" title="2.7 Java 中的反斜杠"></a>2.7 Java 中的反斜杠</h2>反斜杠 <code>\</code> 在 Java 中表示转义字符，这意味着 <code>\</code> 在 Java 拥有预定义的含义。<br>这里例举两个特别重要的用法：</li><li>在匹配 <code>.</code> 或 <code>{</code> 或 <code>[</code> 或 <code>(</code> 或 <code>?</code> 或 <code>$</code> 或 <code>^</code> 或 <code>*</code> 这些特殊字符时，需要在前面加上 <code>\\</code>，比如匹配 <code>.</code> 时，Java 中要写为 <code>\\.</code>，但对于正则表达式来说就是 <code>\.</code>。</li><li>在匹配 <code>\</code> 时，Java 中要写为 <code>\\\\</code>，但对于正则表达式来说就是 <code>\\</code>。</li></ul><p><strong>注意</strong>：Java 中的正则表达式字符串有两层含义，首先 Java 字符串转义出符合正则表达式语法的字符串，然后再由转义后的正则表达式进行模式匹配。<br><a name="c398f2be"></a></p><h2 id="2-8-易错点示例"><a href="#2-8-易错点示例" class="headerlink" title="2.8 易错点示例"></a>2.8 易错点示例</h2><ul><li><code>[jpg|png]</code> 代表匹配 <code>j</code> 或 <code>p</code> 或 <code>g</code> 或 <code>p</code> 或 <code>n</code> 或 <code>g</code> 中的任意一个字符。</li><li><code>(jpg|png)</code> 代表匹配 <code>jpg</code> 或 <code>png</code>。<br><a name="33d10fa6"></a><h1 id="3-在字符串中使用正则表达式"><a href="#3-在字符串中使用正则表达式" class="headerlink" title="3. 在字符串中使用正则表达式"></a>3. 在字符串中使用正则表达式</h1><a name="5dd65719"></a><h2 id="3-1-内置的字符串正则处理方法"><a href="#3-1-内置的字符串正则处理方法" class="headerlink" title="3.1 内置的字符串正则处理方法"></a>3.1 内置的字符串正则处理方法</h2>在 Java 中有四个内置的运行正则表达式的方法，分别是 <code>matches()</code>、<code>split())</code>、<code>replaceFirst()</code>、<code>replaceAll()</code>。注意 <code>replace()</code> 方法不支持正则表达式。</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>s.matches(&quot;regex&quot;)</code></td><td style="text-align:left">当仅且当正则匹配整个字符串时返回 <code>true</code></td></tr><tr><td style="text-align:left"><code>s.split(&quot;regex&quot;)</code></td><td style="text-align:left">按匹配的正则表达式切片字符串</td></tr><tr><td style="text-align:left"><code>s.replaceFirst(&quot;regex&quot;, &quot;replacement&quot;)</code></td><td style="text-align:left">替换首次匹配的字符串片段</td></tr><tr><td style="text-align:left"><code>s.replaceAll(&quot;regex&quot;, &quot;replacement&quot;)</code></td><td style="text-align:left">替换所有匹配的字符</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 正则表达式测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-01-07 10:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"wyc"</span>.matches(<span class="string">"wyc"</span>));</span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">        String[] array = <span class="string">"w y c"</span>.split(<span class="string">"\\s"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : array) &#123;</span><br><span class="line">            System.out.print(s + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"w y c"</span>.replaceFirst(<span class="string">"\\s"</span>,<span class="string">"-"</span>));</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"w y c"</span>.replaceAll(<span class="string">"\\s"</span>,<span class="string">"-"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1546829418616-bb5e7a90-12d4-4a8f-abcb-4ef33c6afe72.png#align=left&amp;display=inline&amp;height=196&amp;name=image.png&amp;originHeight=196&amp;originWidth=726&amp;size=11581&amp;status=done&amp;width=726" alt="image.png"><br><a name="c5e3c212"></a></p><h1 id="4-模式和匹配"><a href="#4-模式和匹配" class="headerlink" title="4. 模式和匹配"></a>4. 模式和匹配</h1><p>Java 中使用正则表达式需要用到两个类，分别为 <code>java.util.regex.Pattern</code> 和 <code>java.util.regex.Matcher</code>。<br>第一步，通过正则表达式创建模式对象 <code>Pattern</code>。<br>第二步，通过模式对象 <code>Pattern</code>，根据指定字符串创建匹配对象 <code>Matcher</code>。<br>第三步，通过匹配对象 <code>Matcher</code>，根据正则表达式操作字符串。<br>来个例子，加深理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 正则表达式测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-01-07 10:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String text = <span class="string">"Hello Regex!"</span>;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"\\w+"</span>);</span><br><span class="line">        <span class="comment">// Java中忽略大小写</span></span><br><span class="line"><span class="comment">//        Pattern.compile("\\w+",Pattern.CASE_INSENSITIVE);</span></span><br><span class="line"><span class="comment">//        Pattern.compile("(?i)\\w+");//推荐使用</span></span><br><span class="line">        Matcher matcher = pattern.matcher(text);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Start index:"</span> + matcher.start());</span><br><span class="line">            System.out.println(<span class="string">" End index: "</span> + matcher.end() + <span class="string">""</span>);</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建第二个模式，将空格替换成tab</span></span><br><span class="line">        Pattern compile = Pattern.compile(<span class="string">"\\s+"</span>);</span><br><span class="line">        Matcher matcher1 = compile.matcher(text);</span><br><span class="line">        System.out.println(matcher1.find());</span><br><span class="line">        System.out.println(matcher1.group());</span><br><span class="line">        System.out.println(matcher1.replaceAll(<span class="string">"\t"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1546830681314-768dedb4-2baa-4925-bb2e-db3ad836994e.png#align=left&amp;display=inline&amp;height=314&amp;name=image.png&amp;originHeight=314&amp;originWidth=825&amp;size=24732&amp;status=done&amp;width=825" alt="image.png"><br><a name="d343f343"></a></p><h1 id="5-若干个常用例子"><a href="#5-若干个常用例子" class="headerlink" title="5. 若干个常用例子"></a>5. 若干个常用例子</h1><p><a name="5be7de80"></a></p><h2 id="5-1-中文的匹配"><a href="#5-1-中文的匹配" class="headerlink" title="5.1 中文的匹配"></a>5.1 中文的匹配</h2><p><code>[\u4e00-\u9fa5]+</code> 代表匹配中文字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 正则表达式中文的匹配</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-01-07 10:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String text = <span class="string">"地狱空荡荡，魔鬼在人间"</span>;</span><br><span class="line">        Pattern compile = Pattern.compile(<span class="string">"[\\u4e00-\\u9fa5]+"</span>);</span><br><span class="line">        Matcher matcher = compile.matcher(text);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1546831373785-41fc817a-7de5-4e4c-9c48-2d7583291302.png#align=left&amp;display=inline&amp;height=133&amp;name=image.png&amp;originHeight=133&amp;originWidth=704&amp;size=9391&amp;status=done&amp;width=704" alt="image.png"><br><a name="d3549279"></a></p><h2 id="5-2-数字范围的匹配"><a href="#5-2-数字范围的匹配" class="headerlink" title="5.2 数字范围的匹配"></a>5.2 数字范围的匹配</h2><p>比如，匹配 1990 到 2017。<br><strong>注意：</strong>这里有个新手易范的错误，就是正则 <code>[1990-2017]</code>，实际这个正则只匹配 <code>0</code> 或 <code>1</code> 或 <code>2</code> 或 <code>7</code> 或 <code>9</code> 中的任一个字符。<br>正则表达式匹配数字范围时，首先要确定最大值与最小值，最后写中间值。<br>正确的匹配方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 学习正则表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-01-16 09:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyRegex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"1990\n2010\n2017\n2020"</span>;</span><br><span class="line">        String regex = <span class="string">"(?m)^1990$|^199[1-9]$|^20[0-1][0-8]$|^2019$"</span>;</span><br><span class="line">        Pattern compile = Pattern.compile(regex);</span><br><span class="line">        Matcher matcher = compile.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1547605545595-2abfcd99-99b5-426f-9f6c-24abc378fb7c.png#align=left&amp;display=inline&amp;height=171&amp;name=image.png&amp;originHeight=171&amp;originWidth=732&amp;size=14675&amp;status=done&amp;width=732" alt="image.png"><br><a name="581d5c0b"></a></p><h2 id="5-3-img-标签的匹配"><a href="#5-3-img-标签的匹配" class="headerlink" title="5.3 img 标签的匹配"></a>5.3 img 标签的匹配</h2><p>比如，获取图片文件内容，这里我们考虑了一些不规范的 img 标签写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 正则表达式获取img标签</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-04-06 21:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modify</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexImgTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**   这里我们考虑了一些不规范的 img 标签写法，比如：空格、引号 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern IMG_PATTERN = Pattern.compile(<span class="string">"&lt;img\\s+src=(?:['\"])?(?&lt;src&gt;\\w+.(jpg|png))(?:['\"])?\\s*/&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"&lt;img  src='aaa.jpg' /&gt;&lt;img src=bbb.png/&gt;&lt;img src=\"ccc.png\"/&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;img src='ddd.exe'/&gt;&lt;img src='eee.jpn'/&gt;"</span>;</span><br><span class="line">        Matcher matcher = IMG_PATTERN.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group(<span class="string">"src"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1554557474018-c29e1aaa-6852-44df-bdcc-a27064d954f7.png#align=left&amp;display=inline&amp;height=154&amp;name=image.png&amp;originHeight=192&amp;originWidth=562&amp;size=12790&amp;status=done&amp;width=450" alt="image.png"></p><p><a name="a1edd930"></a></p><h2 id="5-4-贪婪与非贪婪模式的匹配"><a href="#5-4-贪婪与非贪婪模式的匹配" class="headerlink" title="5.4 贪婪与非贪婪模式的匹配"></a>5.4 贪婪与非贪婪模式的匹配</h2><p>比如，获取 div 标签中的文本内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 通过正则获取文本中的内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2019-04-06 21:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modify</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexDivTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 贪婪模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern DIV_PATTERN = Pattern.compile(<span class="string">"&lt;div&gt;(?&lt;title&gt;.+)&lt;/div&gt;"</span>);</span><br><span class="line">    <span class="comment">// 非贪婪模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern DIV_PATTERN1 = Pattern.compile(<span class="string">"&lt;div&gt;(?&lt;title&gt;.+?)&lt;/div&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"&lt;div&gt;文章标题&lt;/div&gt;&lt;div&gt;发布时间&lt;/div&gt;"</span>;</span><br><span class="line">        <span class="comment">// 贪婪模式</span></span><br><span class="line">        Matcher matcher = DIV_PATTERN.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group(<span class="string">"title"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="comment">// 非贪婪模式</span></span><br><span class="line">        matcher = DIV_PATTERN1.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group(<span class="string">"title"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/235168/1554557742634-bc873c0a-b0d2-4ba0-a204-e8d52c263890.png#align=left&amp;display=inline&amp;height=186&amp;name=image.png&amp;originHeight=232&amp;originWidth=572&amp;size=19896&amp;status=done&amp;width=458" alt="image.png"></p><p>转载自：<a href="https://segmentfault.com/a/1190000009162306" target="_blank" rel="noopener">Java 正则表达式详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期学了下正则，记录下正则的在Java中的基本用法。正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE），又称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。&lt;br&gt;&lt;img src=&quot;/2019/04/06/regex-study/regex-study.jpg&quot; alt=&quot;预览图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Regex" scheme="http://yoursite.com/tags/Regex/"/>
    
  </entry>
  
  <entry>
    <title>使用Cloudflare给hexo+github添加Https</title>
    <link href="http://yoursite.com/2019/04/04/hexo-github-https/"/>
    <id>http://yoursite.com/2019/04/04/hexo-github-https/</id>
    <published>2019-04-04T00:07:43.000Z</published>
    <updated>2019-04-05T06:47:00.500Z</updated>
    
    <content type="html"><![CDATA[<p>使用Cloudflare给hexo+github添加Https。Https已经被广泛使用，因为它相对于Http更加安全，建议使用Https。Https：超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。<br><img src="/2019/04/04/hexo-github-https/hexo-github-https.png" title="这是一个新的博客的图片的说明"><br><a id="more"></a></p><h1 id="设置域名"><a href="#设置域名" class="headerlink" title="设置域名"></a>设置域名</h1><p>首先使用hexo+github搭建的网站默认github会使用哪个https进行访问，如<a href="https://xxx.github.io" target="_blank" rel="noopener">https://xxx.github.io</a>进行访问，如果我们使用自己的域名（阿里云或者腾讯云上购买的）来访问博客。那么默认是没有https的。如果已经购买域名的。可以在这里设置并使用域名访问博客。<br><img src="/2019/04/04/hexo-github-https/hexo-github-https01.png" title="这是一个新的博客的图片的说明"><br>进行域名设置<br><img src="/2019/04/04/hexo-github-https/hexo-github-https02.png" title="这是一个新的博客的图片的说明"><br>这样传到github的项目就会多出一个CNAME文件。<br><img src="/2019/04/04/hexo-github-https/hexo-github-https03.png" title="这是一个新的博客的图片的说明"></p><h1 id="Cloudflare设置Https"><a href="#Cloudflare设置Https" class="headerlink" title="Cloudflare设置Https"></a>Cloudflare设置Https</h1><ol><li>首先在Cloudflare中注册。只需要邮箱即可。<img src="/2019/04/04/hexo-github-https/hexo-github-https04.png" title="这是一个新的博客的图片的说明"></li><li>注册完成之后登陆进去首先设置自己的域名。然后一步一步默认。<img src="/2019/04/04/hexo-github-https/hexo-github-https05.png" title="这是一个新的博客的图片的说明"></li><li>点击DNS查看Cloudflare生成的两个DNS，之后去阿里云或者腾讯将DNS修改。这里以阿里云为例。<img src="/2019/04/04/hexo-github-https/hexo-github-https06.png" title="这是一个新的博客的图片的说明"><img src="/2019/04/04/hexo-github-https/hexo-github-https07.png" title="这是一个新的博客的图片的说明"></li><li>进入阿里云修改DNS。<img src="/2019/04/04/hexo-github-https/hexo-github-https08.png" title="这是一个新的博客的图片的说明"></li><li>修改完成之后进入Cloudflare页面中进行校验。这里我已经校验完成。提示是24小时，一般4-5个小时就可以了在这个页面进行校验。<img src="/2019/04/04/hexo-github-https/hexo-github-https09.png" title="这是一个新的博客的图片的说明"></li><li>点击上方DNS选项，修改需要设置你blog的ip和域名具体如下。github的blog可以通过Ping进行获取。<img src="/2019/04/04/hexo-github-https/hexo-github-https10.png" title="这是一个新的博客的图片的说明"></li><li>设置SSL。<img src="/2019/04/04/hexo-github-https/hexo-github-https11.png" title="这是一个新的博客的图片的说明"></li><li>域名重定向，当有人访问你的域名没有加上https需要跳转到https连接上。在Page Rules中设置Always Use HTTPS即可。<img src="/2019/04/04/hexo-github-https/hexo-github-https12.png" title="这是一个新的博客的图片的说明">全部设置完成之后过几分钟访问就可以有个小绿锁。开心！<img src="/2019/04/04/hexo-github-https/hexo-github-https13.png" title="这是一个新的博客的图片的说明"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Cloudflare给hexo+github添加Https。Https已经被广泛使用，因为它相对于Http更加安全，建议使用Https。Https：超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。&lt;br&gt;&lt;img src=&quot;/2019/04/04/hexo-github-https/hexo-github-https.png&quot; title=&quot;这是一个新的博客的图片的说明&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下zookeeper下环境安装搭建</title>
    <link href="http://yoursite.com/2019/03/20/linux-zookeeper-install/"/>
    <id>http://yoursite.com/2019/03/20/linux-zookeeper-install/</id>
    <published>2019-03-20T02:00:29.000Z</published>
    <updated>2019-04-05T05:48:16.747Z</updated>
    
    <content type="html"><![CDATA[<p>近来，买了个阿里云服务器，Centos7服务器，记录下配置zookeeper单机环境，没有涉及到集群的配置，后期会搭建集群。<br><img src="/2019/03/20/linux-zookeeper-install/zookeeper-architecture.jpg" alt="预览图"><br><a id="more"></a></p><h1 id="zookeeper简介"><a href="#zookeeper简介" class="headerlink" title="zookeeper简介"></a>zookeeper简介</h1><hr><p>Apache ZooKeeper是Apache软件基金会的一个软件项目，他为大型分布式计算提供开源的分布式配置服务、同步服务和命名注册。ZooKeeper曾经是Hadoop的一个子项目，但现在是一个独立的顶级项目。<br>ZooKeeper的架构通过冗余服务实现高可用性。因此，如果第一次无应答，客户端就可以询问另一台ZooKeeper主机。ZooKeeper节点将它们的数据存储于一个分层的命名空间，非常类似于一个文件系统或一个前缀树结构。客户端可以在节点读写，从而以这种方式拥有一个共享的配置服务。更新是全序的。</p><h1 id="zookeeper-环境安装搭建"><a href="#zookeeper-环境安装搭建" class="headerlink" title="zookeeper 环境安装搭建"></a>zookeeper 环境安装搭建</h1><hr><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>通过<a href="http://mirror.bit.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/zookeeper/</a> 这个链接下载，然后上传到linux服务器上（Xhell）。<br><img src="/2019/03/20/linux-zookeeper-install/zookeeper-download-page.png" alt="zookeeper下载图"><br>或者直接在linux下使用wget <a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz命令下载（这里我下载的是3.4.13，可以修改具体的版本号下载）" target="_blank" rel="noopener">https://archive.apache.org/dist/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz命令下载（这里我下载的是3.4.13，可以修改具体的版本号下载）</a></p><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.13.tar.gz</span><br></pre></td></tr></table></figure><p><img src="/2019/03/20/linux-zookeeper-install/zookeeper-list.png" alt="linux列表"><br>解压完毕之后修改一下解压之后所得的文件夹名<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv zookeeper-3.4.13 zookeeper</span><br></pre></td></tr></table></figure></p><p>删除 zookeeper 安装包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf zookeeper-3.4.13.tar.gz</span><br></pre></td></tr></table></figure></p><h2 id="3-在zookeeper下创建data目录"><a href="#3-在zookeeper下创建data目录" class="headerlink" title="3.在zookeeper下创建data目录"></a>3.在zookeeper下创建data目录</h2><p>进入zookeeper下执行命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br></pre></td></tr></table></figure></p><p>进入 data 文件夹 然后执行pwd命令，复制所得的当前目录位置(就是我用红色圈出来的文字)<br><img src="/2019/03/20/linux-zookeeper-install/zookeeper-list01.png" alt="linux01列表"></p><h2 id="4-进入-zookeeper-conf目录下，复制zoo-sample-cfg，命名为zoo-cfg"><a href="#4-进入-zookeeper-conf目录下，复制zoo-sample-cfg，命名为zoo-cfg" class="headerlink" title="4.进入/zookeeper/conf目录下，复制zoo_sample.cfg，命名为zoo.cfg"></a>4.进入/zookeeper/conf目录下，复制zoo_sample.cfg，命名为zoo.cfg</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><h2 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5.修改配置文件"></a>5.修改配置文件</h2><p>使用 vim zoo.cfg 命令修改配置文件</p><blockquote><p>vim 文件——&gt;进入文件—–&gt;命令模式——&gt;按i进入编辑模式—–&gt;编辑文件<br>——-&gt;按Esc进入底行模式—–&gt;输入:wq/q! （输入wq代表写入内容并退出，即保存；输入q!代表强制退出不保存。）</p></blockquote><p>修改配置文件中的 data 属性:</p><blockquote><p>dataDir=/usr/local/zookeeper/data</p></blockquote><h2 id="6-启动测试"><a href="#6-启动测试" class="headerlink" title="6.启动测试"></a>6.启动测试</h2><p>进入 /zookeeper/bin 目录然后执行下面的命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure></p><p>执行 ./zkServer.sh status 查看当前 zookeeper 状态。<br>或者运行 netstat -lntup 命令查看网络状态,可以看到 zookeeper 的端口号 2181 已经被占用<br><img src="/2019/03/20/linux-zookeeper-install/zookeeper-list02.png" alt="linux01列表"></p><p><strong>PS:如果外部访问不到，很大原因是防火墙没有关闭！</strong><br>转载自：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484809&amp;idx=1&amp;sn=a789eba40404e6501d51b24345b28906&amp;source=41#wechat_redirect" target="_blank" rel="noopener">使用SpringBoot+Dubbo 搭建一个简单的分布式服务</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近来，买了个阿里云服务器，Centos7服务器，记录下配置zookeeper单机环境，没有涉及到集群的配置，后期会搭建集群。&lt;br&gt;&lt;img src=&quot;/2019/03/20/linux-zookeeper-install/zookeeper-architecture.jpg&quot; alt=&quot;预览图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="zookeeper" scheme="http://yoursite.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下JDK环境变量配置</title>
    <link href="http://yoursite.com/2019/03/12/linux-jdk-environmental/"/>
    <id>http://yoursite.com/2019/03/12/linux-jdk-environmental/</id>
    <published>2019-03-12T00:59:30.000Z</published>
    <updated>2019-04-05T05:48:12.690Z</updated>
    
    <content type="html"><![CDATA[<p>最近正在学习linux基本操作，首先就是JDK环境变量的配置。成功的法则极为简单，但简单并不代表容易。<br><img src="/2019/03/12/linux-jdk-environmental/linux-beutiful.jpeg" alt="预览图"><br><a id="more"></a></p><h1 id="JDK下载"><a href="#JDK下载" class="headerlink" title="JDK下载"></a>JDK下载</h1><hr><p>这里以JDK8为案例进行安装，进入如下链接：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>首先可以查看自己是64位还是32位操作系统，选择相应的linux版本下载。这里我以64位为例，如图：<br><img src="/2019/03/12/linux-jdk-environmental/jdk-oracle.png" alt="Oracle官网"><br>下载下来用SFTP上传到服务器上。</p><h1 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h1><hr><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>下载以后通过命令检查安装包大小是否符合<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lht</span><br></pre></td></tr></table></figure></p><p><img src="/2019/03/12/linux-jdk-environmental/ls-lht.png" alt="查看jdk"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>创建安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/java</span><br></pre></td></tr></table></figure></li><li><p>解压到安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u201-linux-x64.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1></li></ol><hr><ul><li>编辑环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><ul><li>在文章末尾添加(注意自己JDK的版本号)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_201</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><ul><li>使环境变量立即生效</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ul><li>添加软链接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure><ul><li>检查</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="/2019/03/12/linux-jdk-environmental/jdk-success.png" alt="配置成功"></p><p>转载自：<a href="https://www.cnblogs.com/stulzq/p/9286878.html" target="_blank" rel="noopener">CentOS 7 安装 JAVA环境（JDK 1.8）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正在学习linux基本操作，首先就是JDK环境变量的配置。成功的法则极为简单，但简单并不代表容易。&lt;br&gt;&lt;img src=&quot;/2019/03/12/linux-jdk-environmental/linux-beutiful.jpeg&quot; alt=&quot;预览图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="环境变量" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合源码解析（1）：Iterator</title>
    <link href="http://yoursite.com/2019/03/09/iterator-study-interview/"/>
    <id>http://yoursite.com/2019/03/09/iterator-study-interview/</id>
    <published>2019-03-09T13:47:30.000Z</published>
    <updated>2019-03-09T14:45:28.536Z</updated>
    
    <content type="html"><![CDATA[<p>迭代对于我们搞 Java 的来说绝对不陌生。我们常常使用 JDK 提供的迭代接口进行 Java 集合的迭代。迭代其实我们可以简单地理解为遍历，是一个标准化遍历各类容器里面的所有对象的方法类，它是一个很典型的设计模式。Iterator模式是用于遍历集合类的标准访问方法。它可以把访问逻辑从不同类型的集合类中抽象出来，从而避免向客户端暴露集合的内部结构。<br><img src="/2019/03/09/iterator-study-interview/iterator-image.jpg" alt="预览图"><br><a id="more"></a></p><h1 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h1><hr><p><strong>Java 提供的 集合类都在 Java.utils 包下，其中包含了很多 List, Set, Map, Queue… 它们的关系如下面这张类图所示：</strong><br><img src="/2019/03/09/iterator-study-interview/iterator-structrue.jpg" alt="框架集合结构"><br><strong>可以看到，Java 集合主要分为两类：Collection 和 Map. 而 Collection 又继承了 Iterable&lt; E &gt; 接口，Iterable 中有 iterator 方法，返回一个 Iterator 迭代器:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an iterator over elements of type &#123;<span class="doctag">@code</span> T&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an Iterator.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><p><strong>事实上我们在使用 Iterator 对容器进行迭代时如果修改容器 可能会报 ConcurrentModificationException 的错。官方称这种情况下的迭代器是 fail-fast 迭代器。<br>fail-fast 与 ConcurrentModificationException<br>以 ArrayList 为例，在调用迭代器的 next，remove 方法时：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码部分没有看懂，但是出错就会抛出 ConcurrentModificationException ，也就是成为了 fail-fast。<br>而 modCount 在 ensureExplicitCapacity, clear, remove 时都会被修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>因此我们知道了 fail-fast 即 ConcurrentModificationException 出现的原因，怎么解决呢？</strong></p><p><strong>方法一:<br>用 CopyOnWriteArrayList，ConcurrentHashMap 替换 ArrayList， HashMap，它们的功能和名字一样，在写入时会创建一个 copy，然后在这个 copy 版本上进行修改操作，这样就不会影响原来的迭代。不过坏处就是浪费内存。</strong></p><p><strong>方法二：<br>使用 Collections.synchronizedList 加 同步锁，不过这样有点粗暴。</strong></p><p><strong>不过意外的发现了，原来 for-each 的循环内部也是使用了 Iterator 来遍历Collection，它也调用了Iterator.next()，所以在修改元素时会检查(元素的)变化并抛出ConcurrentModificationException。<br>在从任何 Collection中删除对象时总要使用 Iterator 的remove 方法， for-each 循环只是标准 Iterator 代码标准用法之上的一种语法糖（syntactic sugar）而已。<br>差点忘了 Iterator 的使用<br>所有 Collection 的子类都有 iterator() 方法来获得 Iterator，通过 Iterator 的标准操作方法，可以让我们不必关心具体集合的类型，从而避免向客户端暴露出集合的内部结构。<br>不使用 Iterator 遍历集合是这样的：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; 集合的大小;i++) &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Iterator 遍历集合是这样的：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>对比而言，后者客户端代码与具体集合类型耦合性弱，复用性更强。缺点就是无法获取指定的元素，只能挨个遍历。</strong></p><p>本文转载自：<a href="https://blog.csdn.net/u011240877/article/details/52743564" target="_blank" rel="noopener">Java 集合源码解析（1）：Iterator</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迭代对于我们搞 Java 的来说绝对不陌生。我们常常使用 JDK 提供的迭代接口进行 Java 集合的迭代。迭代其实我们可以简单地理解为遍历，是一个标准化遍历各类容器里面的所有对象的方法类，它是一个很典型的设计模式。Iterator模式是用于遍历集合类的标准访问方法。它可以把访问逻辑从不同类型的集合类中抽象出来，从而避免向客户端暴露集合的内部结构。&lt;br&gt;&lt;img src=&quot;/2019/03/09/iterator-study-interview/iterator-image.jpg&quot; alt=&quot;预览图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="集合" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>集合深入理解-Collection</title>
    <link href="http://yoursite.com/2019/03/07/collection-study-interview/"/>
    <id>http://yoursite.com/2019/03/07/collection-study-interview/</id>
    <published>2019-03-07T09:22:22.000Z</published>
    <updated>2019-04-05T05:48:22.499Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象的操作，就要对对象进行存储，集合就是存储对象最常用的一种方式。集合可以对数据进行存储，检索，操作。使用集合的好处：编码更轻松，代码质量更上一层楼，减少学习新API的成本。所以学好集合是非常有必要的。<br><img src="/2019/03/07/collection-study-interview/collection-structure.jpg" alt="预览图"><br><a id="more"></a></p><h1 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h1><hr><ul><li>集合或者叫容器，是一个包含多个元素的对象；</li><li>集合可以对数据进行存储，检索，操作；</li><li>它们可以把许多个体组织成一个整体： <ul><li>比如一副扑克牌（许多牌组成的集合）;</li><li>比如一个电话本（许多姓名和号码的映射）。</li></ul></li></ul><h1 id="什么是集合框架"><a href="#什么是集合框架" class="headerlink" title="什么是集合框架"></a>什么是集合框架</h1><hr><h2 id="集合框架是一个代表、操作集合的统一架构。所有的集合框架都包含以下几点："><a href="#集合框架是一个代表、操作集合的统一架构。所有的集合框架都包含以下几点：" class="headerlink" title="集合框架是一个代表、操作集合的统一架构。所有的集合框架都包含以下几点："></a>集合框架是一个代表、操作集合的统一架构。所有的集合框架都包含以下几点：</h2><ul><li>接口：表示集合的抽象数据类型。接口允许我们操作集合时不必关注具体实现，从而达到“多态”。在面向对象编程语言中，接口通常用来形成规范。</li><li>实现类：集合接口的具体实现，是重用性很高的数据结构。</li><li>算法：用来根据需要对实体类中的对象进行计算，<ul><li>比如查找，排序。 </li><li>同一种算法可以对不同的集合实现类进行计算，这是利用了“多态”。<br>重用性很高。</li></ul></li></ul><h1 id="集合框架的好处"><a href="#集合框架的好处" class="headerlink" title="集合框架的好处"></a>集合框架的好处</h1><hr><ul><li>编码更轻松：Java 集合框架为我们提供了方便使用的数据结构和算法，让我们不用从头造轮子，直接操心上层业务就好了。</li><li>代码质量更上一层楼：Java集合框架经过几次升级迭代，数据结构和算法的性能已经优化地很棒了。由于是针对接口编程，不同实现类可以轻易互相替换。这么优雅的设计，省下你自己磨练多少工夫。</li><li>减少学习新 API 的成本：过去每个集合 API 下还有子 API 来对 API<br>进行操作，你得学好几层才能知道怎么使用，而且还容易出错。现在好了!有了标准的 Java 集合框架，每个 API 都继承自己顶层API，只负责具体实现，一口气学5个集合，不费劲！</li><li>照猫画虎也容易多了：由于顶层接口已经把基础方法都定义好了，你只要实现接口，把具体实现方法填好，再也不用操心架构设计。<h1 id="Java集合框架结构图"><a href="#Java集合框架结构图" class="headerlink" title="Java集合框架结构图"></a>Java集合框架结构图</h1></li></ul><hr><p><img src="/2019/03/07/collection-study-interview/collection-structure01.jpg" alt="集合框架"><br><strong>如上图所示，Java 的集合主要按两种接口分类：Collection, Map,Collection 接口<br>Collection 作为集合的一个根接口，定义了一组对象和它的子类需要实现的 15 个方法：</strong><br><img src="/2019/03/07/collection-study-interview/collection-method.png" alt="集合框架"></p><ul><li><font color="red">int size()</font>：获取元素的个数</li><li><font color="red">boolean isEmpty()</font>：是否个数为 0</li><li><font color="red">boolean contains(Object element)</font>：是否包含指定元素</li><li><font color="red">boolean add(E element)</font>：添加元素，成功时返回 true</li><li><font color="red">boolean remove(Object element)</font>：删除元素，成功时返回 true</li><li><font color="red">Iterator<e> iterator()</e></font>：获取迭代器<br><strong>一些操作集合的方法：</strong></li><li><font color="red">boolean containsAll(Collection&lt;?&gt; c)</font> ：是否包含指定集合 c 的全部元素</li><li><font color="red">boolean addAll(Collection&lt;? extends E&gt; c) </font>：添加集合 c 中所有的元素到本集合中，如果集合有改变就返回 true</li><li><font color="red">boolean removeAll(Collection&lt;?&gt; c)</font> ：删除本集合中和 c 集合中一致的元素，如果集合有改变就返回 true</li><li><font color="red">boolean retainAll(Collection&lt;?&gt; c)</font> ：保留本集合中 c 集合中两者共有的，如果集合有改变就返回 true</li><li><font color="red">void clear()</font> ：删除所有元素<br><strong>对数组的操作：</strong></li><li><font color="red">Object[] toArray()</font> ：返回一个包含集合中所有元素的数组</li><li><font color="red"><t> T[] toArray(T[] a)</t></font>：返回一个包含集合中所有元素的数组，运行时根据集合元素的类型指定数组的类型<br><strong>JDK 8 以后，Collection 接口还提供了从集合获取连续的或者并行流：</strong></li><li><font color="red">Stream<e> stream()</e></font></li><li><font color="red">Stream<e> parallelStream()</e></font><br><strong>遍历Collection的方法</strong><ol><li>for-each语法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Book&gt; bookList = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Book book : bookList) &#123;</span><br><span class="line">            System.out.println(book.getName());</span><br><span class="line">        &#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 使用 Iterator 迭代器</span><br><span class="line">```java</span><br><span class="line">Collection&lt;Book&gt; bookList = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">        Iterator&lt;Book&gt; iterator = bookList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next().getName());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="3"><li>使用 aggregate operations 聚合操作<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Book&gt; bookList = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">        bookList.stream().forEach(<span class="keyword">new</span> Consumer&lt;Book&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">                System.out.println(book.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol><p><strong>在 JDK 8 以后，推荐使用聚合操作对一个集合进行操作。聚合操作通常和 lambda 表达式结合使用，让代码看起来更简洁（因此可能更难理解）。下面举几个简单的栗子：</strong><br>1.使用流来遍历一个 bookList，然后输出书名是Java从入门到入土的元素：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bookList.stream()</span><br><span class="line">        .filter(e -&gt; e.getName() == <span class="string">"Java从入门到入土"</span>)</span><br><span class="line">        .forEach(e -&gt; System.out.println(e.getPrice()));</span><br></pre></td></tr></table></figure></p><p>2.还可以获取一个并行流（parallelStream），当集合元素很多时使用可以提高效率：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bookList.parallelStream()</span><br><span class="line">        .filter(e -&gt; e.getName() == <span class="string">"Java从入门到入土"</span>)</span><br><span class="line">        .forEach(e -&gt; System.out.println(e.getPrice()));</span><br></pre></td></tr></table></figure></p><p>3.聚合操作还有很多操作集合的方法，比如说你想把 Collection 中的元素都转成 String 对象，然后把它们 连起来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book(<span class="number">1L</span>,<span class="string">"哈哈01"</span>,<span class="number">2000L</span>);</span><br><span class="line">        Book book1 = <span class="keyword">new</span> Book(<span class="number">2L</span>,<span class="string">"哈哈02"</span>,<span class="number">3000L</span>);</span><br><span class="line">        Book book2 = <span class="keyword">new</span> Book(<span class="number">3L</span>,<span class="string">"哈哈03"</span>,<span class="number">4000L</span>);</span><br><span class="line">        Collection&lt;Book&gt; bookList = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">        bookList.add(book);</span><br><span class="line">        bookList.add(book2);</span><br><span class="line">        bookList.add(book1);</span><br><span class="line">        <span class="comment">// 重点</span></span><br><span class="line">        String collect = bookList.stream()</span><br><span class="line">                .map(Object::toString)</span><br><span class="line">                .collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">        System.out.println(collect);</span><br></pre></td></tr></table></figure></p><p>聚合操作还有很多功能，这里仅做介绍，想要了解更多可以查看<a href="https://docs.oracle.com/javase/tutorial/collections/streams/index.html" target="_blank" rel="noopener">Aggregate Operations 官方指引</a></p><p>  <strong>结合 Collection 和 Iterator 可以实现一些复用性很强的方法，比如这样：</strong><br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;?&gt; it = c.iterator(); it.hasNext(); )</span><br><span class="line">        <span class="keyword">if</span> (!condition(it.next()))</span><br><span class="line">            it.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>这个 filter 方法是多态的，可以用于所有 Collection 的子类、实现类。 这个例子说明了使用 Java 集合框架我们可以很随便就写出 “优雅，可拓展，复用性强” 的代码~</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr><p><strong>Collection 接口是类集合框架的基础之一。<br>它创建所有类集都将拥有的 15 个核心方法。<br>因为几乎所有集合类集都实现了Collection接口，所以熟悉它对于清楚地理解框架是必要的。接下来将逐步了解集合框架的各个子接口及实现类。<br>parallel 应该是并行，而不是并发。并发与并行的概念区别还是挺大的</strong>。<br><img src="/2019/03/07/collection-study-interview/collection-parallel.jpg" alt="预览图"><br>转载自：<a href="https://blog.csdn.net/u011240877/article/details/52773577" target="_blank" rel="noopener">Java 集合深入理解（3）：Collection</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象的操作，就要对对象进行存储，集合就是存储对象最常用的一种方式。集合可以对数据进行存储，检索，操作。使用集合的好处：编码更轻松，代码质量更上一层楼，减少学习新API的成本。所以学好集合是非常有必要的。&lt;br&gt;&lt;img src=&quot;/2019/03/07/collection-study-interview/collection-structure.jpg&quot; alt=&quot;预览图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="集合" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习(一)</title>
    <link href="http://yoursite.com/2019/03/06/study-spring-detail01/"/>
    <id>http://yoursite.com/2019/03/06/study-spring-detail01/</id>
    <published>2019-03-06T02:16:27.000Z</published>
    <updated>2019-03-06T05:18:57.701Z</updated>
    
    <content type="html"><![CDATA[<p>在Web开发中用到最多的就是Spring框架，Spring框架几乎和所有热门的框架都能组合起来，Dao可以选择Mybatis、Hibernate（因项目需求而定）。Spring的源码是Java经典的学习案例，Spring的核心是控制反转（IOC）和面向切面（AOP）。<br><img src="/2019/03/06/study-spring-detail01/spring-ico.jpg" alt="预览图"><br><a id="more"></a></p><h1 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h1><hr><p>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转（IoC）和面向切面（AOP）。</p><p>　　<strong>简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</strong></p><h1 id="Spring起源"><a href="#Spring起源" class="headerlink" title="Spring起源"></a>Spring起源</h1><hr><p>Rod Johnson在2002年编著的《Expert one on one J2EE design and development》一书中，对Java EE 系统框架臃肿、低效、脱离现实的种种现状提出了质疑，并积极寻求探索革新Spring Logo之道。以此书为指导思想，他编写了interface21框架，这是一个力图冲破J2EE传统开发的困境，从实际需求出发，着眼于轻便、灵巧，易于开发、测试和部署的轻量级开发框架。Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日，发布了1.0正式版。同年他又推出了一部堪称经典的力作《Expert one-on-one J2EE Development without EJB》，该书在Java世界掀起了轩然大波，不断改变着Java开发者程序设计和开发的思考方式。在该书中，作者根据自己多年丰富的实践经验，对EJB的各种笨重臃肿的结构进行了逐一的分析和否定，并分别以简洁实用的方式替换之。至此一战功成，Rod Johnson成为一个改变Java世界的大师级人物。</p><h1 id="Spring特点"><a href="#Spring特点" class="headerlink" title="Spring特点"></a>Spring特点</h1><hr><p>　　</p><ul><li>方便解耦，简化开发<br>通过Spring提供的IoC容器，我们可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。有了Spring，用户不必再为单实例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li><li>AOP编程的支持<br>通过Spring提供的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</li><li>声明式事务的支持<br>在Spring中，我们可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</li><li>方便程序的测试<br>可以用非容器依赖的编程方式进行几乎所有的测试工作，在Spring里，测试不再是昂贵的操作，而是随手可做的事情。例如：Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li><li>方便集成各种优秀框架<br>Spring不排斥各种优秀的开源框架，相反，Spring可以降低各种框架的使用难度，Spring提供了对各种优秀框架（如Struts,Hibernate、Hessian、Quartz）等的直接支持。</li><li>降低Java EE API的使用难度<br>Spring对很多难用的Java EE API（如JDBC，JavaMail，远程调用等）提供了一个薄薄的封装层，通过Spring的简易封装，这些Java EE API的使用难度大为降低。</li><li>Java 源码是经典学习范例<br>Spring的源码设计精妙、结构清晰、匠心独运，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。Spring框架源码无疑是Java技术的最佳实践范例。如果想在短时间内迅速提高自己的Java技术水平和应用开发水平，学习和研究Spring源码将会使你收到意想不到的效果。<h1 id="Spring框架结构"><a href="#Spring框架结构" class="headerlink" title="Spring框架结构"></a>Spring框架结构</h1></li></ul><hr><p><img src="/2019/03/06/study-spring-detail01/spring-core.png" alt="框架结构"></p><ol><li>核心容器：核心容器提供 Spring 框架的基本功能(Spring Core)。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li><li>Spring 上下文：Spring 上下文是一个配置文件，向 Spring框架提供上下文信息。Spring 上下文包括企业服务，例如JNDI、EJB、电子邮件、国际化、校验和调度功能。</li><li>Spring AOP：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</li><li>Spring DAO：JDBCDAO抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li><li>Spring ORM：Spring 框架插入了若干个ORM框架，从而提供了 ORM 的对象关系工具，其中包括JDO、Hibernate和iBatisSQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li><li>Spring Web 模块：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li><li>Spring MVC 框架：MVC框架是一个全功能的构建 Web应用程序的 MVC 实现。通过策略接口，MVC框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。模型由javabean构成，存放于Map；视图是一个接口，负责显示模型；控制器表示逻辑代码，是Controller的实现。Spring框架的功能可以用在任何J2EE服务器中，大多数功能也适用于不受管理的环境。Spring 的核心要点是：支持不绑定到特定 J2EE服务的可重用业务和数据访问对象。毫无疑问，这样的对象可以在不同J2EE 环境（Web 或EJB）、独立应用程序、测试环境之间重用。</li></ol><h1 id="Spring-框架特征"><a href="#Spring-框架特征" class="headerlink" title="Spring 框架特征"></a>Spring 框架特征</h1><hr><ul><li>轻量——从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。此外，Spring是非侵入式的：典型地，Spring应用中的对象不依赖于Spring的特定类。</li><li>控制反转——Spring通过一种称作控制反转（IoC）的技术促进了低耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。</li><li>面向切面——Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。</li><li>容器——Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。</li><li>框架——Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。</li><li>MVC——Spring的作用是整合，但不仅仅限于整合，Spring 框架可以被看做是一个企业解决方案级别的框架。客户端发送请求，服务器控制器（由DispatcherServlet实现的)完成请求的转发，控制器调用一个用于映射的类HandlerMapping，该类用于将请求映射到对应的处理器来处理请求。HandlerMapping 将请求映射到对应的处理器Controller（相当于Action）在Spring 当中如果写一些处理器组件，一般实现Controller 接口，在Controller 中就可以调用一些Service 或DAO 来进行数据操作 ModelAndView 用于存放从DAO 中取出的数据，还可以存放响应视图的一些数据。 如果想将处理结果返回给用户，那么在Spring 框架中还提供一个视图组件ViewResolver，该组件根据Controller 返回的标示，找到对应的视图，将响应response 返回给用户。<h1 id="Spring优点"><a href="#Spring优点" class="headerlink" title="Spring优点"></a>Spring优点</h1></li></ul><hr><p>Spring能有效地组织你的中间层对象，无论你是否选择使用了EJB。如果你仅仅使用了Struts或其他的包含了J2EE特有APIs的framework，你会发现Spring关注了遗留下的问题。Spring能消除在许多工程上对Singleton的过多使用。根据我的经验，这是一个主要的问题，它减少了系统的可测试性和面向对象特性。</p><p>　　Spring能消除使用各种各样格式的属性定制文件的需要，在整个应用和工程中，可通过一种一致的方法来进行配置。曾经感到迷惑，一个特定类要查找迷幻般的属性关键字或系统属性，为此不得不读Javadoc乃至源编码吗？有了Spring，你可很简单地看到类的JavaBean属性。</p><p>　　Spring能通过接口而不是类促进好的编程习惯，减少编程代价到几乎为零。</p><p>　　Spring被设计为让使用它创建的应用尽可能少的依赖于他的APIs。在Spring应用中的大多数业务对象没有依赖于Spring。所以使用Spring构建的应用程序易于单元测试。</p><p>　　Spring能使EJB的使用成为一个实现选择，而不是应用架构的必然选择。你能选择用POJOs或local EJBs来实现业务接口，却不会影响调用代码。</p><p>　　Spring帮助你解决许多问题而无需使用EJB。Spring能提供一种EJB的替换物，它们适于许多web应用。例如，Spring能使用AOP提供声明性事务而不通过使用EJB容器，如果你仅仅需要与单个的数据库打交道，甚至不需要JTA实现。</p><p>　　Spring为数据存取提供了一致的框架，不论是使用JDBC或O/R mapping产品（如Hibernate）。</p><p>　　总结：<br>  <strong>1.低侵入式设计，代码污染极低<br>　　2.独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once,Run Anywhere的承诺<br>　　3.Spring的DI机制降低了业务对象替换的复杂性，提高了组件之间的解耦<br>　　4.Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式管理，从而提供了更好的复用<br>　　5.Spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问<br>　　6.Spring并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部</strong><br>转载自：<a href="http://www.cnblogs.com/ysocean/p/7466191.html" target="_blank" rel="noopener">http://www.cnblogs.com/ysocean/p/7466191.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Web开发中用到最多的就是Spring框架，Spring框架几乎和所有热门的框架都能组合起来，Dao可以选择Mybatis、Hibernate（因项目需求而定）。Spring的源码是Java经典的学习案例，Spring的核心是控制反转（IOC）和面向切面（AOP）。&lt;br&gt;&lt;img src=&quot;/2019/03/06/study-spring-detail01/spring-ico.jpg&quot; alt=&quot;预览图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web后台" scheme="http://yoursite.com/categories/Web%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Windows下Nginx无法启动的问题</title>
    <link href="http://yoursite.com/2019/03/02/nginx-windows-error/"/>
    <id>http://yoursite.com/2019/03/02/nginx-windows-error/</id>
    <published>2019-03-02T14:31:33.000Z</published>
    <updated>2019-03-04T16:02:55.333Z</updated>
    
    <content type="html"><![CDATA[<p>今天使用nginx访问静态资源，但是启动不了nginx无法再进程中查找到。因为为了方便测试，所以在Windows下进行。<br><a id="more"></a><br>在window下使用nginx无法正常启动，一般执行nginx.exe，会在任务管理器进程中出现nginx<br><img src="/2019/03/02/nginx-windows-error/nginxProcess.png" alt="nginxProcess"><br>或者直接在浏览器中输入<a href="http://localhost/出现如下界面，代表启动成功" target="_blank" rel="noopener">http://localhost/出现如下界面，代表启动成功</a><br><img src="/2019/03/02/nginx-windows-error/nginxStart.png" alt="nginxStart"><br>如果启动失败，没有这两个进程，一般可能为端口号占用（概率较低），可以先通过修改nginx中映射的端口号，看是否能正常启动nginx。<br>另外一种可能就是nginx的目录在中文文件夹下如：D:\Chore下载\nginx-1.8.1,只需要将nginx解压到没有中文的路径下即可。<br>参考链接：<a href="https://blog.csdn.net/inspiredbh/article/details/72974462" target="_blank" rel="noopener">https://blog.csdn.net/inspiredbh/article/details/72974462</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天使用nginx访问静态资源，但是启动不了nginx无法再进程中查找到。因为为了方便测试，所以在Windows下进行。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web服务器" scheme="http://yoursite.com/categories/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Web服务器" scheme="http://yoursite.com/tags/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Java后台面试总结（一）</title>
    <link href="http://yoursite.com/2019/02/23/java-interview/"/>
    <id>http://yoursite.com/2019/02/23/java-interview/</id>
    <published>2019-02-23T00:29:49.000Z</published>
    <updated>2019-03-21T13:04:19.753Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录一下面试的问题，方便自己查看和学习，good good study, day day up!。<br><img src="/2019/02/23/java-interview/interview-strive.jpg" alt="预览图"><br><a id="more"></a></p><h1 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h1><hr><h2 id="Http的特性"><a href="#Http的特性" class="headerlink" title="Http的特性"></a>Http的特性</h2><ul><li>HTTP构建于TCP/IP协议之上，默认端口号是80</li><li>HTTP是无连接无状态的<h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">method</span>&gt;</span> <span class="tag">&lt;<span class="name">request-URL</span>&gt;</span> <span class="tag">&lt;<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">headers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">entity-body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="相应报文"><a href="#相应报文" class="headerlink" title="相应报文"></a>相应报文</h2><p>HTTP 响应与 HTTP 请求相似，HTTP响应也由3个部分构成，分别是：</p><ul><li>状态行</li><li>响应头(Response Header)</li><li>响应正文</li></ul><p><strong>常见的状态码有如下几种：</strong></p><ul><li>200 OK 客户端请求成功</li><li>301 Moved Permanently 请求永久重定向</li><li>302 Moved Temporarily 请求临时重定向</li><li>304 Not Modified 文件未修改，可以直接使用缓存的文件。</li><li>400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。</li><li>401 Unauthorized 请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用</li><li>403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</li><li>404 Not Found 请求的资源不存在，例如，输入了错误的URL</li><li>500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。</li><li>503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</li></ul><p><strong>下面是一个HTTP响应的例子：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">Server:Apache Tomcat/5.0.12</span><br><span class="line">Date:Mon,6Oct2003 13:23:42 GMT</span><br><span class="line">Content-Length:112</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>...</span><br></pre></td></tr></table></figure></p><h2 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h2><ol><li>GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），POST把提交的数据则放置在是HTTP包的包体中。</li><li>GET对URL有长度限定（实际上HTTP协议没有对URL长度进行限定，限定是特定的浏览器和服务器规定的），而POST没有。</li><li>POST的安全性要比GET的安全性高。<br><strong>总结：Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</strong></li></ol><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><hr><h2 id="Spring理解"><a href="#Spring理解" class="headerlink" title="Spring理解"></a>Spring理解</h2><ul><li>开源框架</li><li>IOC（控制反转）将类的创建和依赖关系放在配置文件中，由配置文件注入。实现了松耦合。</li><li>AOP 将安全，事务等于程序逻辑相对独立的功能抽取出来，利用spring的配置文件将这些功能插进去，实现了按照面向层面编程，提高了复用性。<h2 id="Spring中IOC和AOP原理"><a href="#Spring中IOC和AOP原理" class="headerlink" title="Spring中IOC和AOP原理"></a>Spring中IOC和AOP原理</h2>IOC：控制反转也叫依赖注入，IOC利用java反射机制，AOP利用代理模式。所谓控制反转是指，本来被调用者实例由调用者来创建，这样耦合性太强。IOC则是统一交给spring来管理创建，将对象交给容器管理，你只需要在spring配置文件总配置相应的bean，以及设置相关的属性，让spring容器来生成类的实例对象以及管理对象。在spring容器启动的时候，spring会把你在配置文件中配置的bean都初始化好，然后在你需要调用的时候，就把它已经初始化好的那些bean分配给你需要调用这些bean的类。<br>AOP：AOP可以说是对OOP的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码，属于静态代理</li></ul><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><p>IO流的分类：</p><blockquote><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul></blockquote><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><ol><li>接口中的方法默认是public，所有的方法在接口中不能有实现（Java8开始接口方法可以有默认实现），抽象类可以有非抽象方法</li><li>接口中的实例变量默认是final类型的，而抽象类则不一定</li><li>一个类可以实现多个接口，但最多只能继承一个抽象类</li><li>一个类实现接口的话要实现接口中所有方法，而抽象类不一定</li><li>接口不能new实例化，但可以声明，必须引用一个实现该接口的对象。从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为规范。</li></ol><h2 id="线程池的作用"><a href="#线程池的作用" class="headerlink" title="线程池的作用"></a>线程池的作用</h2><p>线程池提供了一种限制和管理资源（包括执行一个任务）。每个线程池还维护一些基本统计信息，例如已经完成任务的数量。<br>这里借用《Java并发编程的艺术》提到的来说一下使用线程池的好处：</p><ul><li>降低资源消耗：通过重复利用已创建的线程降低线程的创建和销毁造成的消耗</li><li>提高响应速度：当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li>提高线程的可管理性：线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一和分配，调优和监控。</li></ul><h2 id="ThreadLocal的作用"><a href="#ThreadLocal的作用" class="headerlink" title="ThreadLocal的作用"></a>ThreadLocal的作用</h2><ol><li>使用这个工具类可以很简洁地编写出优美的多线程程序。</li><li>线程局部变量是局限于线程内的变量，属于线程自身所有，不在多个线程间共享。java提供ThreadLocal类来支持线程局部变量，是一个实现线程安全的方式。</li><li>任何线程局部变量一旦在工作完成后没有释放，java应用就存在内存泄露的风险</li><li>ThreadLocal是一种以空间换时间的做法，在每一个Thread里面维护了一个ThreadLocal.ThreadLocalMap把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了。</li></ol><h2 id="存储过程的定义和作用"><a href="#存储过程的定义和作用" class="headerlink" title="存储过程的定义和作用"></a>存储过程的定义和作用</h2><p>存储程序（英语：Stored Procedure），又称为存储过程，是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象，它可以视为数据库中的一种函数或子程序。</p><ol><li>使用了存储过程，很多相似性的删除、更新、新增等操作就变得十分简单，并且也便于管理。</li><li>存储过程因为SQL语句已经预编绎过了，因此运行的速度比较快。</li><li>存储过程可以接受参数、输出参数、返回单个或多个结果集以及返回值。可以向程序返回错误原因。 </li><li>存储过程运行比较稳定，不会有太多的错误。只要一次成功，以后都会按这个程序运行。 </li><li>存储过程主要是在服务器上运行，减少对客户机的压力。</li><li>存储过程可以包含程序流、逻辑以及对数据库的查询。同时可以实体封装和隐藏了数据逻辑。</li><li>存储过程可以在单个存储过程中执行一系列SQL语句。  </li><li>存储过程可以从自己的存储过程内引用其它存储过程，这可以简化一系列复杂语句。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录一下面试的问题，方便自己查看和学习，good good study, day day up!。&lt;br&gt;&lt;img src=&quot;/2019/02/23/java-interview/interview-strive.jpg&quot; alt=&quot;预览图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面试总结" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java字符串一些常用的方法</title>
    <link href="http://yoursite.com/2018/09/01/java-string-method/"/>
    <id>http://yoursite.com/2018/09/01/java-string-method/</id>
    <published>2018-09-01T00:11:36.000Z</published>
    <updated>2019-03-04T12:52:22.382Z</updated>
    
    <content type="html"><![CDATA[<p>最近也不知道干什么，那么就记录一下自己平常看到的一些字符串操作的用法，感觉自己啥也不会。可能对于Java的理解一直<br>在表面，因为身边的同学都是大神，所以要默默的记录，便于自己学习，发现不是学习的料。<br><a id="more"></a></p><h1 id="charAt的用法"><a href="#charAt的用法" class="headerlink" title="charAt的用法"></a>charAt的用法</h1><p>刚开始也不知道charAt的用法,网上百度才知道如何使用，那么就记录一下。java.lang.String.charAt() 方法返回指定索引处的char值。索引范围是从0到length() - 1。对于数组索引，序列的第一个char值是在索引为0，索引1，依此类推</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>以下是声明java.lang.String.charAt()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br></pre></td></tr></table></figure></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>index –字符串中索引的位置</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p> 此方法返回这个字符串的指定索引处的char值。第一个char值的索引为0.</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>– 如果index参数为负或大于该字符串的长度.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 字符串中charAt的用法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-09-01 08:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modify</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharAtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"Hello World"</span>;</span><br><span class="line">        <span class="comment">// 这里返回的index为4位置的字符 这里index默认是从0开始,可以判断字符串长度。有可能产生角标越界异常</span></span><br><span class="line">        System.out.println(s.charAt(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2018/09/01/java-string-method/charAtDemo.png" alt="charAtDemo"></p><h1 id="Contains的用法"><a href="#Contains的用法" class="headerlink" title="Contains的用法"></a>Contains的用法</h1><p>java.lang.String.contains() 方法返回true，当且仅当此字符串包含指定的char值序列</p><h2 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h2><p>以下是声明java.lang.String.contains()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span></span></span><br></pre></td></tr></table></figure><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p>s - 这是要搜索的序列。</p><h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><p>如果此字符串包含，返回true，否则返回false。</p><h2 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h2><p>NullPointerException – if s is null.</p><p>具体实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Java String.contains()方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-09-01 08:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modify</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里用两个字符串实例</span></span><br><span class="line">        String s1 = <span class="string">"Java is very hard"</span>;</span><br><span class="line">        String s2 = <span class="string">"good study"</span>;</span><br><span class="line">        CharSequence s3 = <span class="string">"ver"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> contains = s1.contains(s3);</span><br><span class="line">        System.out.println(<span class="string">"s1 is contains s3:"</span> + contains);</span><br><span class="line"></span><br><span class="line">        contains = s2.contains(<span class="string">"123"</span>);</span><br><span class="line">        System.out.println(<span class="string">"s2 is contains 123:"</span> + contains);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="/2018/09/01/java-string-method/containsDemo.png" alt="containsDemo"></p><h1 id="indexOf的用法"><a href="#indexOf的用法" class="headerlink" title="indexOf的用法"></a>indexOf的用法</h1><p>Java中字符串中子串的查找共有四种方法(indexof())<br>indexOf 方法返回一个整数值，指出 String 对象内子字符串的开始位置。如果没有找到子字符串，则返回-1。<br>如果 startindex 是负数，则 startindex 被当作零。如果它比最大的字符位置索引还大，则它被当作最大的可能索引。<br>Java中字符串中子串的查找共有四种方法，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span> ：返回第一次出现的指定子字符串在此字符串中的索引。 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> startIndex)</span>：从指定的索引处开始，返回第一次出现的指定子字符串在此字符串中的索引。 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str)</span> ：返回在此字符串中最右边出现的指定子字符串的索引。 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str, <span class="keyword">int</span> startIndex)</span>:从指定的索引开始想向后搜索，返回在此字符串中最后一次出现指定子字符串的索引</span></span><br></pre></td></tr></table></figure></p><p>示例demo：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Java中字符串中子串的查找共有四种方法(indexof ())</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-09-01 08:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modify</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexOfDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"Java is very interesting"</span>;</span><br><span class="line">        <span class="comment">// index is :2</span></span><br><span class="line"><span class="comment">// 从头开始查找是否存在指定的字符</span></span><br><span class="line">        System.out.println(<span class="string">"index is :"</span> + s1.indexOf(<span class="string">"v"</span>));</span><br><span class="line"><span class="comment">// index is begin  result : 20</span></span><br><span class="line"><span class="comment">// 从第17个字符位置开始往后继续查找，包含当前位置</span></span><br><span class="line">        System.out.println(<span class="string">"index is begin  result : "</span> + s1.indexOf(<span class="string">"t"</span>, <span class="number">16</span>));</span><br><span class="line"><span class="comment">// index is lastIndexof result : 21</span></span><br><span class="line">        System.out.println(<span class="string">"index is lastIndexof result : "</span> + s1.lastIndexOf(<span class="string">"i"</span>));</span><br><span class="line"><span class="comment">// index is not in String result : -1</span></span><br><span class="line"><span class="comment">//查找指定字符是在字符串中的下标。在则返回所在字符串下标；不在则返回-1.</span></span><br><span class="line">        System.out.println(<span class="string">"index is not in String result : "</span> + s1.indexOf(<span class="string">"c"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><img src="/2018/09/01/java-string-method/indexOfDemo.png" alt="indexOfDemo"></p><p>搬运来自：<a href="https://blog.csdn.net/qq_27093465/article/details/51832189" target="_blank" rel="noopener">https://blog.csdn.net/qq_27093465/article/details/51832189</a> Java中字符串indexof() 的使用方法<br><a href="https://blog.csdn.net/qq_36367789/article/details/61469717" target="_blank" rel="noopener">https://blog.csdn.net/qq_36367789/article/details/61469717</a> Java String.contains()方法<br><a href="https://blog.csdn.net/you18131371836/article/details/59525916" target="_blank" rel="noopener">https://blog.csdn.net/you18131371836/article/details/59525916</a> java中charAt()方法的使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近也不知道干什么，那么就记录一下自己平常看到的一些字符串操作的用法，感觉自己啥也不会。可能对于Java的理解一直&lt;br&gt;在表面，因为身边的同学都是大神，所以要默默的记录，便于自己学习，发现不是学习的料。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="日常总结" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>系统中定时任务的实现Quartz</title>
    <link href="http://yoursite.com/2018/08/31/%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0Quartz/"/>
    <id>http://yoursite.com/2018/08/31/系统中定时任务的实现Quartz/</id>
    <published>2018-08-31T07:23:41.000Z</published>
    <updated>2019-03-04T12:58:31.273Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要是用大神的代码，只是编写了一些定时任务Cron表达式，Cron表达式可以控制任务什么时候执行。<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>这里要先熟悉一下什么是Cron表达式，因为Quartz就是通过Cron表达式来实现定时任务的。因为Quartz做定时任务非常好，当然也有Timer也能实现简单的定时任务。<br>首先需要导入jar包，这里用的是Maven工程，只需要在POM文件中引入相应的坐标即可:整合shiro和quartz时，要将jar包剔除掉，不然会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.3&lt;/version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;shiro-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.4&lt;/version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.opensymphony.quartz&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"># Quartz能为我们做什么</span><br><span class="line"> 如果您的应用程序有需要在给定的时间内发生的任务，或者如果您的系统有经常性的维护工作，那么Quartz可能是您的理想解决方案。</span><br><span class="line">用Quartz的作业调度的例子：</span><br><span class="line"><span class="number">1</span>）驱使工作流程处理：作为一个新的订单，安排一个工作在精确的<span class="number">2</span>小时内，将检查该订单的状态，并触发警告通知，如果订单确认消息尚未收到的订单，以及改变订单的状态“等待干预”。</span><br><span class="line"><span class="number">2</span>）系统维护：安排一个工作，把数据库的内容到一个XML文件，每个工作日（节假日除外的所有平日）<span class="number">11</span>:<span class="number">30</span>。</span><br><span class="line"><span class="number">3</span>）在应用程序中提供提醒服务。</span><br><span class="line"></span><br><span class="line"># 具体代码</span><br><span class="line">这里展现的是QuartzManager工具类，里面封装了对Quartz的操作。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> com.yijia.quartz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yijia.pojo.quartz.ScheduleJob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.JobBuilder.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.CronScheduleBuilder.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.quartz.impl.StdSchedulerFactory.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Quartz调度管理器</span></span><br><span class="line"><span class="comment"> * 注：请调用时自行注意空指针异常 有很多地方没有检查</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sched       调度器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scheduleJob ScheduleJob</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 添加一个定时任务，并启动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: QuartzManager.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(Scheduler sched, ScheduleJob scheduleJob)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sched))</span><br><span class="line">            sched = getDefaultScheduler();</span><br><span class="line">        <span class="keyword">if</span> (scheduleJob.getJobStatus() != <span class="keyword">null</span> &amp;&amp; scheduleJob.getJobStatus() == <span class="number">1</span>) &#123;</span><br><span class="line">            TriggerKey triggerKey = TriggerKey.triggerKey(scheduleJob.getJobName(), scheduleJob.getJobGroup());</span><br><span class="line">            JobDetail jobDetail = newJob(scheduleJob.getJob()).withIdentity(scheduleJob.getJobName(), scheduleJob.getJobGroup()).build();</span><br><span class="line">            jobDetail.getJobDataMap().put(<span class="string">"scheduleJob"</span>, scheduleJob); <span class="comment">//???????</span></span><br><span class="line">            CronScheduleBuilder scheduleBuilder = cronSchedule(scheduleJob.getCronExpression());</span><br><span class="line">            <span class="comment">//按cronExpression表达式构建一个新的trigger(触发器)</span></span><br><span class="line">            CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(scheduleJob.getJobName(), scheduleJob.getJobGroup()).withSchedule(scheduleBuilder).build();</span><br><span class="line">            sched.scheduleJob(jobDetail, trigger);</span><br><span class="line">            <span class="comment">// 启动</span></span><br><span class="line">            <span class="keyword">if</span> (!sched.isShutdown()) &#123;</span><br><span class="line">                sched.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sched       调度器 可为null 使用默认的调度器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scheduleJob 不获取id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 修改一个任务的触发时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: QuartzManager.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyJobTime</span><span class="params">(Scheduler sched, ScheduleJob scheduleJob)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sched))</span><br><span class="line">            sched = getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">        TriggerKey triggerKey = TriggerKey.triggerKey(scheduleJob.getJobName(),</span><br><span class="line">                scheduleJob.getJobGroup());</span><br><span class="line">        CronTrigger trigger = (CronTrigger) sched.getTrigger(triggerKey);</span><br><span class="line">        <span class="comment">//表达式调度构建器</span></span><br><span class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(scheduleJob</span><br><span class="line">                .getCronExpression());</span><br><span class="line">        <span class="comment">//按新的cronExpression表达式重新构建trigger</span></span><br><span class="line">        trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class="line">                .withSchedule(scheduleBuilder).build();</span><br><span class="line">        <span class="comment">//按新的trigger重新设置job执行</span></span><br><span class="line">        sched.rescheduleJob(triggerKey, trigger);</span><br><span class="line">        sched.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复一个任务（Job）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sched       调度器 可为null 使用默认的调度器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scheduleJob 只获取JobName，JobGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SchedulerException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resumeJob</span><span class="params">(Scheduler sched, ScheduleJob scheduleJob)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sched))</span><br><span class="line">            sched = getDefaultScheduler();</span><br><span class="line">        sched.resumeJob(JobKey.jobKey(scheduleJob.getJobName(), scheduleJob.getJobGroup()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sched       调度器 可为null 使用默认的调度器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scheduleJob ScheduleJob对象 只获取JobName，JobGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 移除一个任务，注意：不维护数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: QuartzManager.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeJob</span><span class="params">(Scheduler sched, ScheduleJob scheduleJob)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sched)) &#123;</span><br><span class="line">            sched = getDefaultScheduler();</span><br><span class="line">        &#125;</span><br><span class="line">        JobKey jobKey = JobKey.jobKey(scheduleJob.getJobName(), scheduleJob.getJobGroup());</span><br><span class="line">        sched.deleteJob(jobKey);<span class="comment">// 删除任务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sched       调度器 可为null 使用默认的调度器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scheduleJob ScheduleJob对象 只获取JobName，JobGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 停止一个任务，注意：不维护数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: QuartzManager.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pauseJob</span><span class="params">(Scheduler sched, ScheduleJob scheduleJob)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sched)) &#123;</span><br><span class="line">            sched = getDefaultScheduler();</span><br><span class="line">        &#125;</span><br><span class="line">        JobKey jobKey = JobKey.jobKey(scheduleJob.getJobName(), scheduleJob.getJobGroup());</span><br><span class="line">        sched.pauseJob(jobKey);<span class="comment">// 停止任务</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteJob</span><span class="params">(Scheduler sched, ScheduleJob scheduleJob)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sched)) &#123;</span><br><span class="line">            sched = getDefaultScheduler();</span><br><span class="line">        &#125;</span><br><span class="line">        JobKey jobKey = JobKey.jobKey(scheduleJob.getJobName(), scheduleJob.getJobGroup());</span><br><span class="line">        sched.deleteJob(jobKey);<span class="comment">// 删除任务</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sched 调度器 可为null 使用默认的调度器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:启动所有定时任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: QuartzManager.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Scheduler sched)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sched)) &#123;</span><br><span class="line">            sched = getDefaultScheduler();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sched.isShutdown()) &#123;</span><br><span class="line">            sched.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:启动所有定时任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: QuartzManager.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        Scheduler sched;</span><br><span class="line">        sched = getDefaultScheduler();</span><br><span class="line">        <span class="keyword">if</span> (sched.isShutdown()) &#123;</span><br><span class="line">            sched.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:关闭所有定时任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: QuartzManager.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        Scheduler sched;</span><br><span class="line">        sched = getDefaultScheduler();</span><br><span class="line">        <span class="keyword">if</span> (!sched.isShutdown()) &#123;</span><br><span class="line">            sched.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sched</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scheduleJob</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SchedulerException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Trigger.<span class="function">TriggerState <span class="title">query</span><span class="params">(Scheduler sched, ScheduleJob scheduleJob)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(sched)) &#123;</span><br><span class="line">            sched = getDefaultScheduler();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (scheduleJob.getJobName() != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(scheduleJob.getJobName().trim())) &#123;</span><br><span class="line">            TriggerKey triggerKey = TriggerKey.triggerKey(scheduleJob.getJobName(),</span><br><span class="line">                    scheduleJob.getJobGroup());</span><br><span class="line">            <span class="keyword">return</span> sched.getTriggerState(triggerKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的Service层，这里实现了对定时任务的操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yijia.service.quartz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yijia.pojo.quartz.ScheduleJob;</span><br><span class="line"><span class="keyword">import</span> com.yijia.quartz.QuartzManager;</span><br><span class="line"><span class="keyword">import</span> com.yijia.quartz.job.*;</span><br><span class="line"><span class="keyword">import</span> com.yijia.service.frame.BaseService;</span><br><span class="line"><span class="keyword">import</span> com.yijia.util.CronUtil;</span><br><span class="line"><span class="keyword">import</span> com.yijia.util.ToolStr;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.yijia.quartz.QuartzManager.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"cronService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CronService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ScheduleJob</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CronService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ScheduleJob.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取数据库查询ScheduleJob表</span></span><br><span class="line">        List&lt;ScheduleJob&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.addAll(findAll());</span><br><span class="line">        <span class="comment">//遍历并且添加</span></span><br><span class="line">        list.forEach(scheduleJob -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (scheduleJob.getJobStatus() != <span class="keyword">null</span> &amp;&amp; scheduleJob.getJobStatus() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    addJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新定时器&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 只用于更新时间;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 如果需要更新任务请执行addJob()填写相同的name，group即可;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @RequestMapping(method = RequestMethod.GET, value = "/updata")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upadataCron</span><span class="params">(String name, String group, String cron)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ScheduleJob job = <span class="keyword">new</span> ScheduleJob(name, group, <span class="number">1</span>, cron);</span><br><span class="line">        upadataJobOrCron(job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @RequestMapping(method = RequestMethod.POST, value = "/updata")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upadataJobOrCron</span><span class="params">(ScheduleJob job)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (job != <span class="keyword">null</span> &amp;&amp; job.getJobGroup() != <span class="keyword">null</span> &amp;&amp; job.getJobName() != <span class="keyword">null</span> &amp;&amp; job.getCronExpression() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">""</span>.equals(job.getJobGroup().trim()) &amp;&amp; !<span class="string">""</span>.equals(job.getJobName().trim()) &amp;&amp; !<span class="string">""</span>.equals(job.getCronExpression().trim())) &#123;</span><br><span class="line">                modifyJobTime(<span class="keyword">null</span>, job);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @RequestMapping(method = RequestMethod.GET, value = "/deletejob")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletejob</span><span class="params">(String name, String group)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ScheduleJob job = <span class="keyword">new</span> ScheduleJob(name, group, <span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        jobdelete(job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @RequestMapping(method = RequestMethod.POST, value = "/deletejob")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobdelete</span><span class="params">(ScheduleJob job)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (job != <span class="keyword">null</span> &amp;&amp; job.getJobGroup() != <span class="keyword">null</span> &amp;&amp; job.getJobName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">""</span>.equals(job.getJobGroup().trim()) &amp;&amp; !<span class="string">""</span>.equals(job.getJobName().trim())) &#123;</span><br><span class="line">                removeJob(<span class="keyword">null</span>, job);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @RequestMapping(method = RequestMethod.GET, value = "/pausejob")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pausejob</span><span class="params">(String name, String group)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ScheduleJob job = <span class="keyword">new</span> ScheduleJob();</span><br><span class="line">        job.setJobGroup(group);</span><br><span class="line">        job.setJobName(name);</span><br><span class="line">        pauseJob(<span class="keyword">null</span>, job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @RequestMapping(method = RequestMethod.POST, value = "/pausejob")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pausejob</span><span class="params">(ScheduleJob job)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (job != <span class="keyword">null</span> &amp;&amp; job.getJobName() != <span class="keyword">null</span> &amp;&amp; job.getJobGroup() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pauseJob(<span class="keyword">null</span>, job);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public void jobPause(String jobClassName, String jobGroupName) throws Exception &#123;</span></span><br><span class="line"><span class="comment">//        scheduler.pauseJob(JobKey.jobKey(jobClassName, jobGroupName));</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @RequestMapping(method = RequestMethod.GET, value = "/resumejob")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumejob</span><span class="params">(String name, String group)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ScheduleJob job = <span class="keyword">new</span> ScheduleJob();</span><br><span class="line">        job.setJobName(name);</span><br><span class="line">        job.setJobGroup(group);</span><br><span class="line">        resumejob(job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @RequestMapping(method = RequestMethod.POST, value = "/resumejob")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumejob</span><span class="params">(ScheduleJob job)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (job != <span class="keyword">null</span> &amp;&amp; job.getJobGroup() != <span class="keyword">null</span> &amp;&amp; job.getJobName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">""</span>.equals(job.getJobName().trim()) &amp;&amp; !<span class="string">""</span>.equals(job.getJobGroup().trim())) &#123;</span><br><span class="line">                resumeJob(<span class="keyword">null</span>, job);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法封的比较狠</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> job</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功?</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SchedulerException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">jobUpdataAndStartAndStop</span><span class="params">(ScheduleJob job)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        String res = <span class="string">"fail"</span>;</span><br><span class="line">        <span class="keyword">if</span> (job != <span class="keyword">null</span> &amp;&amp; job.getJobStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (job.getJobStatus() == <span class="number">1</span>) &#123;<span class="comment">//开启</span></span><br><span class="line">                res = addOrUpScheduleJob(job);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (job.getJobStatus() == <span class="number">2</span>) &#123;<span class="comment">//关闭</span></span><br><span class="line">                deleteJob(<span class="keyword">null</span>, job);</span><br><span class="line">                res = <span class="string">"success"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (job.getJobStatus() == <span class="number">0</span>) &#123;<span class="comment">//禁用</span></span><br><span class="line">                save(job);</span><br><span class="line">                res = <span class="string">"success"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装 添加 或者更新 job ,job任务，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> job</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">addOrUpScheduleJob</span><span class="params">(ScheduleJob job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; paramsOld = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            paramsOld.put(<span class="string">" jobName = "</span>, job.getJobName());</span><br><span class="line">            paramsOld.put(<span class="string">" jobGroup = "</span>, job.getJobGroup());</span><br><span class="line">            List&lt;ScheduleJob&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            list.addAll(find4Params(paramsOld));</span><br><span class="line">            <span class="comment">//查询表中 是或否 有定时器</span></span><br><span class="line">            <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 没有就加上</span></span><br><span class="line">                <span class="keyword">this</span>.save(job);</span><br><span class="line">                list.addAll(find4Params(paramsOld));<span class="comment">//重新查</span></span><br><span class="line">            &#125;</span><br><span class="line">            ScheduleJob dbjob = list.get(<span class="number">0</span>);</span><br><span class="line">            dbjob.setCronExpression(job.getCronExpression());</span><br><span class="line">            dbjob.setNote(job.getNote());</span><br><span class="line">            dbjob.setCronNote(job.getCronNote());</span><br><span class="line">            dbjob.setJob(job.getJob());</span><br><span class="line">            dbjob.setJobStatus(job.getJobStatus());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                addJob(<span class="keyword">null</span>, dbjob);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                <span class="comment">//add遇到问题 必然是 已经添加了</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    upadataCron(dbjob.getJobName(), dbjob.getJobGroup(), dbjob.getCronExpression());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.save(dbjob);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 临时任务定时扣分</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id      临时任务id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title   临时任务标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName 任务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime 临时任务结束时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 临时任务超时扣分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveTemporaryTaskJob</span><span class="params">(String id, String title, String jobName, Date endTime)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        ScheduleJob job = <span class="keyword">new</span> ScheduleJob();</span><br><span class="line">        job.setJobName(title);</span><br><span class="line">        job.setJobGroup(jobName);</span><br><span class="line">        <span class="comment">//设置为 qidong</span></span><br><span class="line">        job.setJobStatus(<span class="number">1</span>);</span><br><span class="line">        job.setCronNote(<span class="string">"临时任务超时未报送"</span>);</span><br><span class="line">        job.setNote(id);</span><br><span class="line">        job.setJob(TemporaryTaskJob.class);</span><br><span class="line">        <span class="comment">// 调用方法 将Date 类型的转成Cron 表达式</span></span><br><span class="line">        String cron = CronUtil.getCron(endTime);</span><br><span class="line">        <span class="comment">// 使用正则验证cron表达式是否正确</span></span><br><span class="line">        <span class="keyword">boolean</span> validExpression = CronUtil.isValidExpression(cron);</span><br><span class="line">        <span class="keyword">if</span> (validExpression) &#123;</span><br><span class="line">            job.setCronExpression(cron);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用改方法</span></span><br><span class="line">        <span class="keyword">return</span> jobUpdataAndStartAndStop(job);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加分项报送提醒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id      当前登录用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ggbName 改革办名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    天数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SchedulerException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAddition</span><span class="params">(String id, String ggbName, String data)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO cron表达式还没有完成</span></span><br><span class="line">        <span class="comment">// 查询group下的所有定时任务</span></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        params.put(<span class="string">" jobGroup = "</span>, ggbName);</span><br><span class="line">        List&lt;ScheduleJob&gt; scheduleJobList = find4Params(params);</span><br><span class="line">        <span class="keyword">int</span> day = ToolStr.sToI(data);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">28</span>;</span><br><span class="line">        <span class="comment">// 调用方法 将Date 类型的转成Cron 表达式  每月执行</span></span><br><span class="line">        <span class="keyword">if</span> (!ToolStr.isEmpty(data) &amp;&amp; day &lt;= end &amp;&amp; day &gt; start) &#123;</span><br><span class="line">            <span class="comment">// 首先将所有的定时任务停止</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"28"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        String cron = <span class="string">"0 0 9 "</span> + day + <span class="string">" * ? "</span>;</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        scheduleJob.setCronExpression(cron);</span><br><span class="line">                        scheduleJob.setJob(AdditionRemindJob.class);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是29号 2 月最后一天 其他月 还是 29 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"29A"</span>.equals(scheduleJob.getJobName()) || <span class="string">"29B"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AdditionRemindJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"30A"</span>.equals(scheduleJob.getJobName()) || <span class="string">"30B"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AdditionRemindJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">31</span>) &#123;</span><br><span class="line">            <span class="comment">// 全部都是最后一天</span></span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"31"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AdditionRemindJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 是 0 的情况 关掉group下的所有定时任务</span></span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 关掉所有定时任务</span></span><br><span class="line">                    scheduleJob.setJob(AdditionRemindJob.class);</span><br><span class="line">                    scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                    jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                    QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 台账上报短信提醒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id      填写上报id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ggbName ggb名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccountRemind</span><span class="params">(String id, String ggbName, String data)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        params.put(<span class="string">" jobGroup = "</span>, ggbName);</span><br><span class="line">        List&lt;ScheduleJob&gt; scheduleJobList = find4Params(params);</span><br><span class="line">        <span class="keyword">int</span> day = ToolStr.sToI(data);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">28</span>;</span><br><span class="line">        <span class="comment">// 调用方法 将Date 类型的转成Cron 表达式  每月执行</span></span><br><span class="line">        <span class="keyword">if</span> (!ToolStr.isEmpty(data) &amp;&amp; day &lt;= end &amp;&amp; day &gt; start) &#123;</span><br><span class="line">            <span class="comment">// 首先将所有的定时任务停止</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"28"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        String cron = <span class="string">"0 40 14 "</span> + day + <span class="string">" * ? "</span>;</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        scheduleJob.setJob(AccountRemindJob.class);</span><br><span class="line">                        scheduleJob.setCronExpression(cron);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是29号 2 月最后一天 其他月 还是 29 号  29A  代表的是二月最后一天， 29B其他月都是29号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"29A"</span>.equals(scheduleJob.getJobName()) || <span class="string">"29B"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AccountRemindJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"30A"</span>.equals(scheduleJob.getJobName()) || <span class="string">"30B"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AccountRemindJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">31</span>) &#123;</span><br><span class="line">            <span class="comment">// 全部都是最后一天</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"31"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AccountRemindJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 是 0 的情况 关掉group下的所有定时任务</span></span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 关掉所有定时任务</span></span><br><span class="line">                    scheduleJob.setJob(AccountRemindJob.class);</span><br><span class="line">                    scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                    jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                    QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 台账扣分短信提醒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id      填写上报id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ggbName ggb名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccountDeduction</span><span class="params">(String id, String ggbName, String data)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        params.put(<span class="string">" jobGroup = "</span>, ggbName);</span><br><span class="line">        List&lt;ScheduleJob&gt; scheduleJobList = find4Params(params);</span><br><span class="line">        <span class="keyword">int</span> day = ToolStr.sToI(data);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">28</span>;</span><br><span class="line">        <span class="comment">// 调用方法 将Date 类型的转成Cron 表达式  每月执行</span></span><br><span class="line">        <span class="keyword">if</span> (!ToolStr.isEmpty(data) &amp;&amp; day &lt;= end &amp;&amp; day &gt; start) &#123;</span><br><span class="line">            <span class="comment">// 首先将所有的定时任务停止</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"28"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        String cron = <span class="string">"0 0 17 "</span> + day + <span class="string">" * ? "</span>;</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        scheduleJob.setJob(AccountDeductionJob.class);</span><br><span class="line">                        scheduleJob.setCronExpression(cron);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是29号 2 月最后一天 其他月 还是 29 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"29A"</span>.equals(scheduleJob.getJobName()) || <span class="string">"29B"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AccountDeductionJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"30A"</span>.equals(scheduleJob.getJobName()) || <span class="string">"30B"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AccountDeductionJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">31</span>) &#123;</span><br><span class="line">            <span class="comment">// 全部都是最后一天</span></span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"31"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(AccountDeductionJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 是 0 的情况 关掉group下的所有定时任务</span></span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 关掉所有定时任务</span></span><br><span class="line">                    scheduleJob.setJob(AccountDeductionJob.class);</span><br><span class="line">                    scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                    jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                    QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id      提交部门id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ggbName 改革办名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    天数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveScoreGenerate</span><span class="params">(String id, String ggbName, String data)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        params.put(<span class="string">" jobGroup = "</span>, ggbName);</span><br><span class="line">        List&lt;ScheduleJob&gt; scheduleJobList = find4Params(params);</span><br><span class="line">        <span class="keyword">int</span> day = ToolStr.sToI(data);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">28</span>;</span><br><span class="line">        <span class="comment">// 调用方法 将Date 类型的转成Cron 表达式  每月执行</span></span><br><span class="line">        <span class="keyword">if</span> (!ToolStr.isEmpty(data) &amp;&amp; day &lt;= end &amp;&amp; day &gt; start) &#123;</span><br><span class="line">            <span class="comment">// 首先将所有的定时任务停止</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"28"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        String cron = <span class="string">"0 0 0 "</span> + day + <span class="string">" * ? "</span>;</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        scheduleJob.setJob(GenerateScoreJob.class);</span><br><span class="line">                        scheduleJob.setCronExpression(cron);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是29号 2 月最后一天 其他月 还是 29 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"29A"</span>.equals(scheduleJob.getJobName()) || <span class="string">"29B"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(GenerateScoreJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"30A"</span>.equals(scheduleJob.getJobName()) || <span class="string">"30B"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(GenerateScoreJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day == <span class="number">31</span>) &#123;</span><br><span class="line">            <span class="comment">// 全部都是最后一天</span></span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 判断是不是指定任务 如果是就开启  不是 就暂停其他的所有任务</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"31"</span>.equals(scheduleJob.getJobName())) &#123;</span><br><span class="line">                        scheduleJob.setJob(GenerateScoreJob.class);</span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">1</span>);</span><br><span class="line">                        addOrUpScheduleJob(scheduleJob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 修改状态</span></span><br><span class="line">                        scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                        jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                        QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 是 0 的情况 关掉group下的所有定时任务</span></span><br><span class="line">            <span class="comment">// 如果是30号 2 月最后一天 其他月 还是 30 号</span></span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(scheduleJobList)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ScheduleJob scheduleJob : scheduleJobList) &#123;</span><br><span class="line">                    <span class="comment">// 关掉所有定时任务</span></span><br><span class="line">                    scheduleJob.setJob(GenerateScoreJob.class);</span><br><span class="line">                    scheduleJob.setJobStatus(<span class="number">0</span>);</span><br><span class="line">                    jobUpdataAndStartAndStop(scheduleJob);</span><br><span class="line">                    QuartzManager.pauseJob(<span class="keyword">null</span>, scheduleJob);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里还是有很多不懂的东西，因为基本是都是Copy其他人的代码，但是也了解了定时任务是如何工作的。还是要不断的学习，因为只有学习，才能知道更广的东西。<br>每一个任务都是一个JOB，需要在execute中写出来自己需要执行的代码（业务），这里我贴出自己写的（只能做一个参考吧，因为可能写的比较烂）：其中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ScheduleJob scheduleJob = (ScheduleJob) jobExecutionContext.getJobDetail().getJobDataMap().get(<span class="string">"scheduleJob"</span>);</span><br></pre></td></tr></table></figure></p><p>只需要在之前的数据中setNote，这里就可以直接获取到。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yijia.quartz.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yijia.bean.SpringUtil;</span><br><span class="line"><span class="keyword">import</span> com.yijia.pojo.admin.TaskDepartment;</span><br><span class="line"><span class="keyword">import</span> com.yijia.pojo.admin.TemporaryTask;</span><br><span class="line"><span class="keyword">import</span> com.yijia.pojo.quartz.ScheduleJob;</span><br><span class="line"><span class="keyword">import</span> com.yijia.quartz.QuartzManager;</span><br><span class="line"><span class="keyword">import</span> com.yijia.service.admin.TaskDepartmentService;</span><br><span class="line"><span class="keyword">import</span> com.yijia.service.admin.TemporaryTaskService;</span><br><span class="line"><span class="keyword">import</span> com.yijia.service.process.LedgerService;</span><br><span class="line"><span class="keyword">import</span> com.yijia.service.quartz.CronService;</span><br><span class="line"><span class="keyword">import</span> com.yijia.service.websocket.WebSocketService;</span><br><span class="line"><span class="keyword">import</span> com.yijia.util.ToolStr;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 临时任务Job类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-07-04 17:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemporaryTaskJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TemporaryTaskJob.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebSocketService webSocketService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TaskDepartmentService taskDepartmentService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CronService cronService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        webSocketService = (WebSocketService) SpringUtil.getBean(<span class="string">"webSocketService"</span>);</span><br><span class="line">        taskDepartmentService = (TaskDepartmentService) SpringUtil.getBean(<span class="string">"taskDepartmentService"</span>);</span><br><span class="line">        cronService = (CronService) SpringUtil.getBean(<span class="string">"cronService"</span>);</span><br><span class="line">        <span class="comment">// 获取属性</span></span><br><span class="line">        ScheduleJob scheduleJob = (ScheduleJob) jobExecutionContext.getJobDetail().getJobDataMap().get(<span class="string">"scheduleJob"</span>);</span><br><span class="line">        String note = scheduleJob.getNote();</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先判断有没有id  根据id查询到临时任务</span></span><br><span class="line">        <span class="keyword">if</span> (!ToolStr.isEmpty(note)) &#123;</span><br><span class="line">            params.put(<span class="string">" temporaryTask.id = "</span>, ToolStr.sToL(note, <span class="number">0</span>));;</span><br><span class="line">            <span class="comment">// 得到未上报的部门</span></span><br><span class="line">            List&lt;TaskDepartment&gt; taskDepartmentList = <span class="keyword">this</span>.taskDepartmentService.find4Params(params);</span><br><span class="line">            <span class="comment">// 遍历 得到 超时未上报的部门</span></span><br><span class="line">            <span class="keyword">for</span> (TaskDepartment taskDepartment : taskDepartmentList) &#123;</span><br><span class="line">                <span class="comment">// 判断是否已经上报了</span></span><br><span class="line">                <span class="keyword">if</span> (!TaskDepartment.YSB.equals(taskDepartment.getState())) &#123;</span><br><span class="line">                    <span class="comment">//进行报送提醒</span></span><br><span class="line">                    logger.info(<span class="string">"尊敬的"</span> + taskDepartment.getDepartment().getName() + <span class="string">"，您未按时上报【临时任务】"</span> + taskDepartment.getTemporaryTask().getName() + <span class="string">",扣****分"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 删除定时任务  杀死Quartz</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先删除数据库中存在的表</span></span><br><span class="line">            QuartzManager.deleteJob(<span class="keyword">null</span>,scheduleJob);</span><br><span class="line">            cronService.remove(scheduleJob);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来 只需要在Controller中调用写的方法就可以。这里我贴出来前台和Controller，以及需要定时效果图。<br><img src="/2018/08/31/系统中定时任务的实现Quartz/renwujiemian.png" alt="任务界面"><br>下发成功在控制台就可以看见。<br><img src="/2018/08/31/系统中定时任务的实现Quartz/renwumingcheng.png" alt="下发成功"><br>相应的控制台会显示出来没有上报临时任务部门，以及扣了多少分<br><img src="/2018/08/31/系统中定时任务的实现Quartz/renwukoufen.png" alt="扣分页面"></p><h1 id="前台模块"><a href="#前台模块" class="headerlink" title="前台模块"></a>前台模块</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row cl"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-label col-xs-4 col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">class</span>=<span class="string">"c-red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>监测台账上报时间节点(每月几号前允许上报,0不做任何限制)：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"formControls col-xs-4 col-sm-3"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;obj&#125;"</span> <span class="attr">var</span>=<span class="string">"timeNote"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;timeNote.type == 1&#125;"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"baosongid"</span> <span class="attr">value</span>=<span class="string">"$&#123;timeNote.id&#125;"</span>/&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"baosongData"</span> <span class="attr">value</span>=<span class="string">"$&#123;timeNote.date&#125;"</span>/&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;empty baosongData&#125;"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"baosongtime"</span> <span class="attr">id</span>=<span class="string">"baosongtime"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">max</span>=<span class="string">"31"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">class</span>=<span class="string">"input-text"</span> <span class="attr">required</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;not empty baosongData&#125;"</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"baosongtime"</span> <span class="attr">id</span>=<span class="string">"baosongtime"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">max</span>=<span class="string">"31"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">class</span>=<span class="string">"input-text"</span> <span class="attr">required</span> <span class="attr">value</span>=<span class="string">"$&#123;baosongData&#125;"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"baosongtimeid"</span> <span class="attr">id</span>=<span class="string">"baosongtimeid"</span> <span class="attr">type</span>=<span class="string">"hidden"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">"$&#123;baosongid&#125;"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体Controller：</p><pre><code class="java"><span class="comment">// 临时任务定时扣分</span>     <span class="keyword">try</span> {         cronService.saveTemporaryTaskJob(temporaryTask2.getId().toString(), name,                 username + ToolRandom.randomStr(<span class="number">5</span>), time);     } <span class="keyword">catch</span> (SchedulerException e) {         e.printStackTrace();     }</code></pre><p>搬运来自： <a href="https://blog.csdn.net/u010648555/article/details/54863144" target="_blank" rel="noopener">https://blog.csdn.net/u010648555/article/details/54863144</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要是用大神的代码，只是编写了一些定时任务Cron表达式，Cron表达式可以控制任务什么时候执行。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="日常积累" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="Quartz" scheme="http://yoursite.com/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>使用freemarker导出Word</title>
    <link href="http://yoursite.com/2018/08/29/%E4%BD%BF%E7%94%A8freemarker%E5%AF%BC%E5%87%BAWord/"/>
    <id>http://yoursite.com/2018/08/29/使用freemarker导出Word/</id>
    <published>2018-08-29T07:54:58.000Z</published>
    <updated>2019-03-04T13:03:26.729Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要是参考一些网上大神的案例，不过也要记录一下。便于以后自己学习，也可以给其他人做参考。我做的不一定对。<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>其实我也看过一些用POI或者其他工具进行导出Word，都感觉挺好的。这次记录一下自己使用freemarker进行Word导出。<br>首先电脑上要有Word，感觉这一点不是很好。但总体上来说，就是使用Word制作一个模板，用一些占位符在Word中。<br>因为使用freemarker可以将占位符替换成自己想要的内容，这里我只做了一个表格模板。其他情况可以参考下方链接。</p><h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><p>我这里使用的maven工程。所以只需要引入相应的坐标就可以将jar包引入。如果是普通web项目 可以自行去下jar包。<br>POM文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.28&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>Jar下载链接：<br><a href="https://freemarker.apache.org/freemarkerdownload.html" target="_blank" rel="noopener">https://freemarker.apache.org/freemarkerdownload.html</a></p><h2 id="Word模板"><a href="#Word模板" class="headerlink" title="Word模板"></a>Word模板</h2><p>用Word制作好模板。调成自己想要的样式，我目前是调成这个样式，建议先调整好样式，不然保存成xml不好改样式。<br>这里首先使用占位符，前面也提到了。便于将自己的数据放到表格里面。这里如果有图片，先放上图片。因为这样可以<br>进行该一些模板里面的东西。保存成xml可以将图片里面的信息换成占位符，可以随时进行替换。<br><img src="/2018/08/29/使用freemarker导出Word/wordmuban.png" alt="word模板"><br>PS：这里我没有用WPS试过，如果都是保存成XML应该是可以的。这里我使用的word 2013版本。<br>编辑好之后需要将格式存成XML格式。如果存成别的，可能不能导出或者其他的一些问题。如下图所示：<br><img src="/2018/08/29/使用freemarker导出Word/lingcunwei.png" alt="word另存为"><br>这里需要提醒一下，数据很多 如果打开编辑的话，建议适应一些工具，我这里使用的是IDEA，可以使用notepad++，或者一些<br>便于XML文件编辑的工具。首先将xml后缀名改成ftl文件为后缀的，在IDEA可以使用里面的标签代码。</p><h2 id="Ftl模板-文字处理"><a href="#Ftl模板-文字处理" class="headerlink" title="Ftl模板(文字处理)"></a>Ftl模板(文字处理)</h2><p><img src="/2018/08/29/使用freemarker导出Word/ftlmuban.png" alt="FtL模板"><br>这里模板的信息我不是很了解，这里我贴出一些我认为比较关键地方的东西。首先全局查找在模板中自己存的占位符，很有可能会<br>被打乱。但是存成Word XML 格式应该不会有错。这里w:t就是要存放的数据。这里只要占位符和后台传的数据一样就行。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:r</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:rFonts</span> <span class="attr">w:ascii</span>=<span class="string">"宋体"</span> <span class="attr">w:h-ansi</span>=<span class="string">"宋体"</span> <span class="attr">w:hint</span>=<span class="string">"fareast"</span>/&gt;</span><span class="tag">&lt;<span class="name">wx:font</span> <span class="attr">wx:val</span>=<span class="string">"宋体"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:t</span>&gt;</span>$&#123;username&#125;<span class="tag">&lt;/<span class="name">w:t</span>&gt;</span><span class="tag">&lt;/<span class="name">w:r</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果是多条数据可以加上freemarker语法，遍历List，并放入指定的位置。具体语法如下 在需要遍历的tr前面加上&lt;#list 自己后台传的list as name<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;<span class="name">#list</span> <span class="attr">messageList</span> <span class="attr">as</span> <span class="attr">message</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">w:tr</span> <span class="attr">wsp:rsidR</span>=<span class="string">"004255BB"</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span> <span class="attr">wsp:rsidTr</span>=<span class="string">"00182F67"</span>&gt;</span></span><br><span class="line">我这里可以直接.出来想要的数据在规定的位置，也是使用占位符<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;<span class="name">w:t</span>&gt;</span>$&#123;message.name&#125;<span class="tag">&lt;/<span class="name">w:t</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:tr</span>&gt;</span><span class="tag">&lt;/<span class="name">#list</span>&gt;</span> 注意这里有结束的标签。不然会报错。</span><br></pre></td></tr></table></figure></p><h2 id="Ftl模板-图片处理"><a href="#Ftl模板-图片处理" class="headerlink" title="Ftl模板(图片处理)"></a>Ftl模板(图片处理)</h2><p>上面只是处理了一些文字，这里处理一些图片的处理，因为之前在模板中我们已经放了图片，所以在ftl模板中直接将图片的base64码改成占位符<br>首先找到binData，将底下的Base64码改成占位符<br><img src="/2018/08/29/使用freemarker导出Word/ftlxinxi.png" alt="FtL信息"><br>改成如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:binData</span> <span class="attr">w:name</span>=<span class="string">"wordml://02000001.jpg"</span> <span class="attr">xml:space</span>=<span class="string">"preserve"</span>&gt;</span>$&#123;自己取的占位符&#125;<span class="tag">&lt;/<span class="name">w:binData</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面主要是展示一张图片，如果有多张，可以用上面的方式，将图片变成List遍历取出图片即可。<br>这里需要注意的是多张图片只显示一张的原因。w:name和src下的图片名称不能一样，所以src=”${“wordml://0300000”+img_index + 1 + “.png”}”<br>这种方式来解决，一开始我这里判断是否为空，如果为空就不显示，不判断的话，如果没有图片，导出的word中会有空白图片的存在。<br>&lt;#list imgList as img&gt;&lt;#if img.jiejueUrl != “”&gt;&lt;#else &gt;&lt;w:p&gt;&lt;/w:p&gt;&lt;/#if&gt;&lt;/#list&gt;具体可以参考下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:tr</span> <span class="attr">wsp:rsidR</span>=<span class="string">"001B01DD"</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span> <span class="attr">wsp:rsidTr</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:tc</span>&gt;</span><span class="tag">&lt;<span class="name">w:tcPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:tcW</span> <span class="attr">w:w</span>=<span class="string">"4148"</span> <span class="attr">w:type</span>=<span class="string">"dxa"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:shd</span> <span class="attr">w:val</span>=<span class="string">"clear"</span> <span class="attr">w:color</span>=<span class="string">"auto"</span> <span class="attr">w:fill</span>=<span class="string">"auto"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:tcPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:p</span> <span class="attr">wsp:rsidR</span>=<span class="string">"001B01DD"</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span> <span class="attr">wsp:rsidRDefault</span>=<span class="string">"001B01DD"</span> <span class="attr">wsp:rsidP</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:pPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:jc</span> <span class="attr">w:val</span>=<span class="string">"left"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;/<span class="name">w:pPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:r</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:t</span>&gt;</span>$&#123;content&#125;<span class="tag">&lt;/<span class="name">w:t</span>&gt;</span><span class="tag">&lt;/<span class="name">w:r</span>&gt;</span><span class="tag">&lt;/<span class="name">w:p</span>&gt;</span><span class="tag">&lt;/<span class="name">w:tc</span>&gt;</span><span class="tag">&lt;<span class="name">w:tc</span>&gt;</span><span class="tag">&lt;<span class="name">w:tcPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:tcW</span> <span class="attr">w:w</span>=<span class="string">"4148"</span> <span class="attr">w:type</span>=<span class="string">"dxa"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:shd</span> <span class="attr">w:val</span>=<span class="string">"clear"</span> <span class="attr">w:color</span>=<span class="string">"auto"</span> <span class="attr">w:fill</span>=<span class="string">"auto"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:tcPr</span>&gt;</span><span class="tag">&lt;<span class="name">#list</span> <span class="attr">imgList</span> <span class="attr">as</span> <span class="attr">img</span>&gt;</span><span class="tag">&lt;<span class="name">#if</span> <span class="attr">img.jiejueUrl</span> != <span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">w:p</span> <span class="attr">wsp:rsidR</span>=<span class="string">"001B01DD"</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span> <span class="attr">wsp:rsidRDefault</span>=<span class="string">"003A4BDD"</span> <span class="attr">wsp:rsidP</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:pPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:jc</span> <span class="attr">w:val</span>=<span class="string">"center"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:b</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;/<span class="name">w:pPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:r</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"003A4BDD"</span>&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:b</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:pict</span>&gt;</span><span class="tag">&lt;<span class="name">w:binData</span> <span class="attr">w:name</span>=<span class="string">"$&#123;"</span><span class="attr">wordml:</span>//<span class="attr">0300000</span>"+<span class="attr">img_index</span> + <span class="attr">1</span> + "<span class="attr">.png</span>"&#125;" <span class="attr">xml:space</span>=<span class="string">"preserve"</span>&gt;</span>$&#123;img.jiejueUrl&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">w:binData</span>&gt;</span><span class="tag">&lt;<span class="name">v:shape</span> <span class="attr">id</span>=<span class="string">"_x0000_i1026"</span> <span class="attr">type</span>=<span class="string">"#_x0000_t75"</span> <span class="attr">style</span>=<span class="string">"width:180pt;height:180pt"</span>&gt;</span><span class="tag">&lt;<span class="name">v:imagedata</span> <span class="attr">src</span>=<span class="string">"$&#123;"</span><span class="attr">wordml:</span>//<span class="attr">0300000</span>"+<span class="attr">img_index</span> + <span class="attr">1</span> + "<span class="attr">.png</span>"&#125;" <span class="attr">o:title</span>=<span class="string">"L4GSV(&#125;~LA[A2LH3CLZWXUL"</span>/&gt;</span><span class="tag">&lt;/<span class="name">v:shape</span>&gt;</span><span class="tag">&lt;/<span class="name">w:pict</span>&gt;</span><span class="tag">&lt;/<span class="name">w:r</span>&gt;</span><span class="tag">&lt;/<span class="name">w:p</span>&gt;</span><span class="tag">&lt;<span class="name">#else</span> &gt;</span><span class="tag">&lt;<span class="name">w:p</span>&gt;</span><span class="tag">&lt;/<span class="name">w:p</span>&gt;</span><span class="tag">&lt;/<span class="name">#if</span>&gt;</span><span class="tag">&lt;/<span class="name">#list</span>&gt;</span><span class="tag">&lt;/<span class="name">w:tc</span>&gt;</span><span class="tag">&lt;/<span class="name">w:tr</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>PS：freemarker需要注意的就是null值的判断，这块很不友好。</p><h1 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h1><p>这里直接使用人家的代码，都贴出来。只需要自己在Controller做处理就行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-22 11:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置信息,代码本身写的还是很可读的,就不过多注解了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//这里注意的是利用WordUtils的类加载器动态获得模板文件的位置</span></span><br><span class="line">    <span class="comment">// private static final String templateFolder = WordUtils.class.getClassLoader().getResource("../../").getPath() + "WEB-INF/templetes/";</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String templateFolder = <span class="string">"/"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_0);</span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            configuration.setClassForTemplateLoading(WordUtil.class,templateFolder);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WordUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exportMillCertificateWord</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Map map, String title, String ftlFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Template freemarkerTemplate = configuration.getTemplate(ftlFile);</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        InputStream fin = <span class="keyword">null</span>;</span><br><span class="line">        ServletOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用工具类的createDoc方法生成Word文档</span></span><br><span class="line">            file = createDoc(map,freemarkerTemplate);</span><br><span class="line">            fin = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            response.setContentType(<span class="string">"application/msword"</span>);</span><br><span class="line">            Random r = <span class="keyword">new</span> Random();</span><br><span class="line">            SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            sb.append(sdf1.format(<span class="keyword">new</span> Date()));</span><br><span class="line">            sb.append(<span class="string">"_"</span>);</span><br><span class="line">            sb.append(r.nextInt(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 设置浏览器以下载的方式处理该文件名</span></span><br><span class="line">            String fileName = title+sb + <span class="string">".doc"</span>;</span><br><span class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span></span><br><span class="line">                    .concat(String.valueOf(URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>))));</span><br><span class="line"></span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];  <span class="comment">// 缓冲区</span></span><br><span class="line">            <span class="keyword">int</span> bytesToRead = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 通过循环将读入的Word文件的内容输出到浏览器中</span></span><br><span class="line">            <span class="keyword">while</span>((bytesToRead = fin.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, bytesToRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fin != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fin.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(out != <span class="keyword">null</span>)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除临时文件</span></span><br><span class="line">            <span class="keyword">if</span>(file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> File <span class="title">createDoc</span><span class="params">(Map&lt;?, ?&gt; dataMap, Template template)</span> </span>&#123;</span><br><span class="line">        String name =  <span class="string">"sellPlan.doc"</span>;</span><br><span class="line">        File f = <span class="keyword">new</span> File(name);</span><br><span class="line">        Template t = template;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这个地方不能使用FileWriter因为需要指定编码类型否则生成的Word文档会因为有无法识别的编码而无法打开</span></span><br><span class="line">            Writer w = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(f), <span class="string">"utf-8"</span>);</span><br><span class="line">            t.process(dataMap, w);</span><br><span class="line">            w.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的Controller代码如下：<br>处理图片的代码，将图片转成Base64并返回。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取图片的base64码</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getImageBase</span><span class="params">(String src, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(src==<span class="keyword">null</span>||src==<span class="string">""</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       File file = <span class="keyword">new</span> File(request.getRealPath(<span class="string">"/"</span>)+src.replace(request.getContextPath(), <span class="string">""</span>));</span><br><span class="line">       <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       InputStream in = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line">           e1.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           data = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">           in.read(data);</span><br><span class="line">           in.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">       <span class="keyword">return</span> encoder.encode(data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>后台代码实现，将查询出来的数据存放到map中，只需要保证名字和占位符的一样就可以。我在这里就进行了判null处理 ，用List<map>存放图片信息，这块还可以完善<br>，目前我技术有限，可能写的比较垃圾。但是如果能给你带来一些帮助。那真实太好了。<br>上面定义的url：</map></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出Word</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXPORT_WORD_URL = PERMISSION_URL_PREFIX + <span class="string">"/exportWord"</span>;</span><br></pre></td></tr></table></figure><p>具体代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出Word</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(EXPORT_WORD_URL)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(EXPORT_WORD_URL)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportWord</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String messageId)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        AdminWarning adminWarning = warningRepository.getOne(ToolStr.sToL(messageId,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 存放人员名称</span></span><br><span class="line">        List&lt;String&gt; username = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;PeopleLineTower&gt; people=peopleLineTowerRepository.findAllByAdminLineIdOrAdminTowerId(adminWarning.getTower().getLine().getId(),adminWarning.getTower().getId());</span><br><span class="line">        <span class="keyword">for</span> (PeopleLineTower peopleLineTower:people) &#123;</span><br><span class="line">            username.add(peopleLineTower.getPeople().getSysUser().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 首先查询出来所有的预警解决图片</span></span><br><span class="line">        <span class="comment">// 存放预警图片的</span></span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String uuidName = adminWarning.getUuidName();</span><br><span class="line">        String[] split = uuidName.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">"jiejueUrl"</span>,getImageBase(<span class="string">"/"</span> + adminWarning.getPicture() + <span class="string">"/"</span> +split[i],request));</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        dataMap.put(<span class="string">"username"</span>,String.join(<span class="string">","</span>,username));</span><br><span class="line">        dataMap.put(<span class="string">"createdTime"</span>, adminWarning.getCreatedTime());</span><br><span class="line">        dataMap.put(<span class="string">"updataTime"</span>, adminWarning.getUpdataTime().getTime() &lt;= adminWarning.getCreatedTime().getTime() ? <span class="string">"尚未解决"</span> : adminWarning.getUpdataTime());</span><br><span class="line">        dataMap.put(<span class="string">"lineName"</span>, ToolStr.isEmpty(adminWarning.getTower().getLine().getName()) ? <span class="string">""</span> : adminWarning.getTower().getLine().getName());</span><br><span class="line">        dataMap.put(<span class="string">"towerName"</span>, ToolStr.isEmpty(adminWarning.getTower().getName()) ? <span class="string">""</span> : adminWarning.getTower().getName());</span><br><span class="line">        dataMap.put(<span class="string">"cameraName"</span>,ToolStr.isEmpty(adminWarning.getCamera().getName())?<span class="string">""</span> : adminWarning.getCamera().getName() );</span><br><span class="line">        dataMap.put(<span class="string">"info"</span>, ToolStr.isEmpty(adminWarning.getInfo()) ? <span class="string">""</span> : adminWarning.getInfo());</span><br><span class="line">        dataMap.put(<span class="string">"yujingUrl"</span>, getImageBase(<span class="string">"/"</span>+CameraController.FILE_URL + adminWarning.getImge().getCameraName() + <span class="string">"/"</span> + adminWarning.getImge().getUuidName(),request));</span><br><span class="line">        dataMap.put(<span class="string">"content"</span>, ToolStr.isEmpty(adminWarning.getFont())?<span class="string">""</span>:adminWarning.getFont());</span><br><span class="line">        dataMap.put(<span class="string">"imgList"</span>,list);</span><br><span class="line">        <span class="comment">/** 生成word */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WordUtil.exportMillCertificateWord(request,response,dataMap,<span class="string">"消息处理列表"</span>, <span class="string">"预警明细.ftl"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 前台Html页面</span><br><span class="line"></span><br><span class="line">前台导出word实现：</span><br><span class="line">```html</span><br><span class="line"> &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"r"</span>&gt;</span><br><span class="line">                &lt;a shiro:hasPermission=<span class="string">"$&#123;EXPORT_WORD_URL&#125;"</span> href=<span class="string">"javascript:;"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-secondary radius"</span></span><br><span class="line">                   th:href=<span class="string">"@&#123;$&#123;EXPORT_WORD_URL+'?messageId='+id&#125;&#125;"</span>&gt;</span><br><span class="line">                    &lt;i class="Hui-iconfont"&gt;&amp;#xe644;&lt;/i&gt;导出Word</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>具体效果如下：<br>导出页面，这块还没有完善。<br><img src="/2018/08/29/使用freemarker导出Word/daochuhtml.png" alt="FtL信息"><br>具体导出的模板信息如下：这块图片和文字还不知道怎么处理，但可以实现简单的导文字和图片了。<br><img src="/2018/08/29/使用freemarker导出Word/worddaochu.png" alt="FtL信息"></p><p>搬运来自：<a href="https://www.cnblogs.com/zwqh/p/7182953.html" target="_blank" rel="noopener">https://www.cnblogs.com/zwqh/p/7182953.html</a> Java  用Freemarker完美导出word文档（带图片）<br><a href="https://blog.csdn.net/huangwenyi1010/article/details/51771551" target="_blank" rel="noopener">https://blog.csdn.net/huangwenyi1010/article/details/51771551</a>   Java之利用FreeMarker导出Word实例</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要是参考一些网上大神的案例，不过也要记录一下。便于以后自己学习，也可以给其他人做参考。我做的不一定对。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="日常积累" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="freemarker" scheme="http://yoursite.com/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>使用freemarker导出Word 2018-08-29</title>
    <link href="http://yoursite.com/2018/08/29/%E4%BD%BF%E7%94%A8freemarker%E5%AF%BC%E5%87%BAWord-2018-08-29/"/>
    <id>http://yoursite.com/2018/08/29/使用freemarker导出Word-2018-08-29/</id>
    <published>2018-08-29T07:54:58.000Z</published>
    <updated>2019-03-06T04:56:32.525Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要是参考一些网上大神的案例，不过也要记录一下。便于以后自己学习，也可以给其他人做参考。我做的不一定对。<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>其实我也看过一些用POI或者其他工具进行导出Word，都感觉挺好的。这次记录一下自己使用freemarker进行Word导出。<br>首先电脑上要有Word，感觉这一点不是很好。但总体上来说，就是使用Word制作一个模板，用一些占位符在Word中。<br>因为使用freemarker可以将占位符替换成自己想要的内容，这里我只做了一个表格模板。其他情况可以参考下方链接。</p><h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><p>我这里使用的maven工程。所以只需要引入相应的坐标就可以将jar包引入。如果是普通web项目 可以自行去下jar包。<br>POM文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.28&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>Jar下载链接：<br><a href="https://freemarker.apache.org/freemarkerdownload.html" target="_blank" rel="noopener">https://freemarker.apache.org/freemarkerdownload.html</a></p><h2 id="Word模板"><a href="#Word模板" class="headerlink" title="Word模板"></a>Word模板</h2><p>用Word制作好模板。调成自己想要的样式，我目前是调成这个样式，建议先调整好样式，不然保存成xml不好改样式。<br>这里首先使用占位符，前面也提到了。便于将自己的数据放到表格里面。这里如果有图片，先放上图片。因为这样可以<br>进行该一些模板里面的东西。保存成xml可以将图片里面的信息换成占位符，可以随时进行替换。<br><img src="/2018/08/29/使用freemarker导出Word-2018-08-29/images/wordmuban.png" alt="word模板"><br>PS：这里我没有用WPS试过，如果都是保存成XML应该是可以的。这里我使用的word 2013版本。<br>编辑好之后需要将格式存成XML格式。如果存成别的，可能不能导出或者其他的一些问题。如下图所示：<br><img src="/2018/08/29/使用freemarker导出Word-2018-08-29/images/lingcunwei.png" alt="word另存为"><br>这里需要提醒一下，数据很多 如果打开编辑的话，建议适应一些工具，我这里使用的是IDEA，可以使用notepad++，或者一些<br>便于XML文件编辑的工具。首先将xml后缀名改成ftl文件为后缀的，在IDEA可以使用里面的标签代码。</p><h2 id="Ftl模板-文字处理"><a href="#Ftl模板-文字处理" class="headerlink" title="Ftl模板(文字处理)"></a>Ftl模板(文字处理)</h2><p><img src="/2018/08/29/使用freemarker导出Word-2018-08-29/images/ftlmuban.png" alt="FtL模板"><br>这里模板的信息我不是很了解，这里我贴出一些我认为比较关键地方的东西。首先全局查找在模板中自己存的占位符，很有可能会<br>被打乱。但是存成Word XML 格式应该不会有错。这里w:t就是要存放的数据。这里只要占位符和后台传的数据一样就行。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:r</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:rFonts</span> <span class="attr">w:ascii</span>=<span class="string">"宋体"</span> <span class="attr">w:h-ansi</span>=<span class="string">"宋体"</span> <span class="attr">w:hint</span>=<span class="string">"fareast"</span>/&gt;</span><span class="tag">&lt;<span class="name">wx:font</span> <span class="attr">wx:val</span>=<span class="string">"宋体"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:t</span>&gt;</span>$&#123;username&#125;<span class="tag">&lt;/<span class="name">w:t</span>&gt;</span><span class="tag">&lt;/<span class="name">w:r</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果是多条数据可以加上freemarker语法，遍历List，并放入指定的位置。具体语法如下 在需要遍历的tr前面加上&lt;#list 自己后台传的list as name<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;<span class="name">#list</span> <span class="attr">messageList</span> <span class="attr">as</span> <span class="attr">message</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">w:tr</span> <span class="attr">wsp:rsidR</span>=<span class="string">"004255BB"</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span> <span class="attr">wsp:rsidTr</span>=<span class="string">"00182F67"</span>&gt;</span></span><br><span class="line">我这里可以直接.出来想要的数据在规定的位置，也是使用占位符<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;<span class="name">w:t</span>&gt;</span>$&#123;message.name&#125;<span class="tag">&lt;/<span class="name">w:t</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">w:tr</span>&gt;</span><span class="tag">&lt;/<span class="name">#list</span>&gt;</span> 注意这里有结束的标签。不然会报错。</span><br></pre></td></tr></table></figure></p><h2 id="Ftl模板-图片处理"><a href="#Ftl模板-图片处理" class="headerlink" title="Ftl模板(图片处理)"></a>Ftl模板(图片处理)</h2><p>上面只是处理了一些文字，这里处理一些图片的处理，因为之前在模板中我们已经放了图片，所以在ftl模板中直接将图片的base64码改成占位符<br>首先找到binData，将底下的Base64码改成占位符<br><img src="/2018/08/29/使用freemarker导出Word-2018-08-29/images/ftlxinxi.png" alt="FtL信息"><br>改成如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:binData</span> <span class="attr">w:name</span>=<span class="string">"wordml://02000001.jpg"</span> <span class="attr">xml:space</span>=<span class="string">"preserve"</span>&gt;</span>$&#123;自己取的占位符&#125;<span class="tag">&lt;/<span class="name">w:binData</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面主要是展示一张图片，如果有多张，可以用上面的方式，将图片变成List遍历取出图片即可。<br>这里需要注意的是多张图片只显示一张的原因。w:name和src下的图片名称不能一样，所以src=”${“wordml://0300000”+img_index + 1 + “.png”}”<br>这种方式来解决，一开始我这里判断是否为空，如果为空就不显示，不判断的话，如果没有图片，导出的word中会有空白图片的存在。<br>&lt;#list imgList as img&gt;&lt;#if img.jiejueUrl != “”&gt;&lt;#else &gt;&lt;w:p&gt;&lt;/w:p&gt;&lt;/#if&gt;&lt;/#list&gt;具体可以参考下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">w:tr</span> <span class="attr">wsp:rsidR</span>=<span class="string">"001B01DD"</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span> <span class="attr">wsp:rsidTr</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:tc</span>&gt;</span><span class="tag">&lt;<span class="name">w:tcPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:tcW</span> <span class="attr">w:w</span>=<span class="string">"4148"</span> <span class="attr">w:type</span>=<span class="string">"dxa"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:shd</span> <span class="attr">w:val</span>=<span class="string">"clear"</span> <span class="attr">w:color</span>=<span class="string">"auto"</span> <span class="attr">w:fill</span>=<span class="string">"auto"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:tcPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:p</span> <span class="attr">wsp:rsidR</span>=<span class="string">"001B01DD"</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span> <span class="attr">wsp:rsidRDefault</span>=<span class="string">"001B01DD"</span> <span class="attr">wsp:rsidP</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:pPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:jc</span> <span class="attr">w:val</span>=<span class="string">"left"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;/<span class="name">w:pPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:r</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:t</span>&gt;</span>$&#123;content&#125;<span class="tag">&lt;/<span class="name">w:t</span>&gt;</span><span class="tag">&lt;/<span class="name">w:r</span>&gt;</span><span class="tag">&lt;/<span class="name">w:p</span>&gt;</span><span class="tag">&lt;/<span class="name">w:tc</span>&gt;</span><span class="tag">&lt;<span class="name">w:tc</span>&gt;</span><span class="tag">&lt;<span class="name">w:tcPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:tcW</span> <span class="attr">w:w</span>=<span class="string">"4148"</span> <span class="attr">w:type</span>=<span class="string">"dxa"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:shd</span> <span class="attr">w:val</span>=<span class="string">"clear"</span> <span class="attr">w:color</span>=<span class="string">"auto"</span> <span class="attr">w:fill</span>=<span class="string">"auto"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:tcPr</span>&gt;</span><span class="tag">&lt;<span class="name">#list</span> <span class="attr">imgList</span> <span class="attr">as</span> <span class="attr">img</span>&gt;</span><span class="tag">&lt;<span class="name">#if</span> <span class="attr">img.jiejueUrl</span> != <span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">w:p</span> <span class="attr">wsp:rsidR</span>=<span class="string">"001B01DD"</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"00182F67"</span> <span class="attr">wsp:rsidRDefault</span>=<span class="string">"003A4BDD"</span> <span class="attr">wsp:rsidP</span>=<span class="string">"00182F67"</span>&gt;</span><span class="tag">&lt;<span class="name">w:pPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:jc</span> <span class="attr">w:val</span>=<span class="string">"center"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:b</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;/<span class="name">w:pPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:r</span> <span class="attr">wsp:rsidRPr</span>=<span class="string">"003A4BDD"</span>&gt;</span><span class="tag">&lt;<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:b</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;<span class="name">w:sz-cs</span> <span class="attr">w:val</span>=<span class="string">"28"</span>/&gt;</span><span class="tag">&lt;/<span class="name">w:rPr</span>&gt;</span><span class="tag">&lt;<span class="name">w:pict</span>&gt;</span><span class="tag">&lt;<span class="name">w:binData</span> <span class="attr">w:name</span>=<span class="string">"$&#123;"</span><span class="attr">wordml:</span>//<span class="attr">0300000</span>"+<span class="attr">img_index</span> + <span class="attr">1</span> + "<span class="attr">.png</span>"&#125;" <span class="attr">xml:space</span>=<span class="string">"preserve"</span>&gt;</span>$&#123;img.jiejueUrl&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">w:binData</span>&gt;</span><span class="tag">&lt;<span class="name">v:shape</span> <span class="attr">id</span>=<span class="string">"_x0000_i1026"</span> <span class="attr">type</span>=<span class="string">"#_x0000_t75"</span> <span class="attr">style</span>=<span class="string">"width:180pt;height:180pt"</span>&gt;</span><span class="tag">&lt;<span class="name">v:imagedata</span> <span class="attr">src</span>=<span class="string">"$&#123;"</span><span class="attr">wordml:</span>//<span class="attr">0300000</span>"+<span class="attr">img_index</span> + <span class="attr">1</span> + "<span class="attr">.png</span>"&#125;" <span class="attr">o:title</span>=<span class="string">"L4GSV(&#125;~LA[A2LH3CLZWXUL"</span>/&gt;</span><span class="tag">&lt;/<span class="name">v:shape</span>&gt;</span><span class="tag">&lt;/<span class="name">w:pict</span>&gt;</span><span class="tag">&lt;/<span class="name">w:r</span>&gt;</span><span class="tag">&lt;/<span class="name">w:p</span>&gt;</span><span class="tag">&lt;<span class="name">#else</span> &gt;</span><span class="tag">&lt;<span class="name">w:p</span>&gt;</span><span class="tag">&lt;/<span class="name">w:p</span>&gt;</span><span class="tag">&lt;/<span class="name">#if</span>&gt;</span><span class="tag">&lt;/<span class="name">#list</span>&gt;</span><span class="tag">&lt;/<span class="name">w:tc</span>&gt;</span><span class="tag">&lt;/<span class="name">w:tr</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>PS：freemarker需要注意的就是null值的判断，这块很不友好。</p><h1 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h1><p>这里直接使用人家的代码，都贴出来。只需要自己在Controller做处理就行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wycfight@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-22 11:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置信息,代码本身写的还是很可读的,就不过多注解了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//这里注意的是利用WordUtils的类加载器动态获得模板文件的位置</span></span><br><span class="line">    <span class="comment">// private static final String templateFolder = WordUtils.class.getClassLoader().getResource("../../").getPath() + "WEB-INF/templetes/";</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String templateFolder = <span class="string">"/"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_0);</span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            configuration.setClassForTemplateLoading(WordUtil.class,templateFolder);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WordUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exportMillCertificateWord</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Map map, String title, String ftlFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Template freemarkerTemplate = configuration.getTemplate(ftlFile);</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        InputStream fin = <span class="keyword">null</span>;</span><br><span class="line">        ServletOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用工具类的createDoc方法生成Word文档</span></span><br><span class="line">            file = createDoc(map,freemarkerTemplate);</span><br><span class="line">            fin = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            response.setContentType(<span class="string">"application/msword"</span>);</span><br><span class="line">            Random r = <span class="keyword">new</span> Random();</span><br><span class="line">            SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            sb.append(sdf1.format(<span class="keyword">new</span> Date()));</span><br><span class="line">            sb.append(<span class="string">"_"</span>);</span><br><span class="line">            sb.append(r.nextInt(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 设置浏览器以下载的方式处理该文件名</span></span><br><span class="line">            String fileName = title+sb + <span class="string">".doc"</span>;</span><br><span class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span></span><br><span class="line">                    .concat(String.valueOf(URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>))));</span><br><span class="line"></span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];  <span class="comment">// 缓冲区</span></span><br><span class="line">            <span class="keyword">int</span> bytesToRead = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 通过循环将读入的Word文件的内容输出到浏览器中</span></span><br><span class="line">            <span class="keyword">while</span>((bytesToRead = fin.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, bytesToRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fin != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fin.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(out != <span class="keyword">null</span>)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除临时文件</span></span><br><span class="line">            <span class="keyword">if</span>(file != <span class="keyword">null</span>) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> File <span class="title">createDoc</span><span class="params">(Map&lt;?, ?&gt; dataMap, Template template)</span> </span>&#123;</span><br><span class="line">        String name =  <span class="string">"sellPlan.doc"</span>;</span><br><span class="line">        File f = <span class="keyword">new</span> File(name);</span><br><span class="line">        Template t = template;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这个地方不能使用FileWriter因为需要指定编码类型否则生成的Word文档会因为有无法识别的编码而无法打开</span></span><br><span class="line">            Writer w = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(f), <span class="string">"utf-8"</span>);</span><br><span class="line">            t.process(dataMap, w);</span><br><span class="line">            w.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的Controller代码如下：<br>处理图片的代码，将图片转成Base64并返回。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取图片的base64码</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getImageBase</span><span class="params">(String src, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(src==<span class="keyword">null</span>||src==<span class="string">""</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       File file = <span class="keyword">new</span> File(request.getRealPath(<span class="string">"/"</span>)+src.replace(request.getContextPath(), <span class="string">""</span>));</span><br><span class="line">       <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       InputStream in = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line">           e1.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           data = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">           in.read(data);</span><br><span class="line">           in.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       BASE64Encoder encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">       <span class="keyword">return</span> encoder.encode(data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>后台代码实现，将查询出来的数据存放到map中，只需要保证名字和占位符的一样就可以。我在这里就进行了判null处理 ，用List<map>存放图片信息，这块还可以完善<br>，目前我技术有限，可能写的比较垃圾。但是如果能给你带来一些帮助。那真实太好了。<br>上面定义的url：</map></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出Word</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXPORT_WORD_URL = PERMISSION_URL_PREFIX + <span class="string">"/exportWord"</span>;</span><br></pre></td></tr></table></figure><p>具体代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出Word</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(EXPORT_WORD_URL)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(EXPORT_WORD_URL)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportWord</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String messageId)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        AdminWarning adminWarning = warningRepository.getOne(ToolStr.sToL(messageId,<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 存放人员名称</span></span><br><span class="line">        List&lt;String&gt; username = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;PeopleLineTower&gt; people=peopleLineTowerRepository.findAllByAdminLineIdOrAdminTowerId(adminWarning.getTower().getLine().getId(),adminWarning.getTower().getId());</span><br><span class="line">        <span class="keyword">for</span> (PeopleLineTower peopleLineTower:people) &#123;</span><br><span class="line">            username.add(peopleLineTower.getPeople().getSysUser().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 首先查询出来所有的预警解决图片</span></span><br><span class="line">        <span class="comment">// 存放预警图片的</span></span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String uuidName = adminWarning.getUuidName();</span><br><span class="line">        String[] split = uuidName.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">"jiejueUrl"</span>,getImageBase(<span class="string">"/"</span> + adminWarning.getPicture() + <span class="string">"/"</span> +split[i],request));</span><br><span class="line">            list.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        dataMap.put(<span class="string">"username"</span>,String.join(<span class="string">","</span>,username));</span><br><span class="line">        dataMap.put(<span class="string">"createdTime"</span>, adminWarning.getCreatedTime());</span><br><span class="line">        dataMap.put(<span class="string">"updataTime"</span>, adminWarning.getUpdataTime().getTime() &lt;= adminWarning.getCreatedTime().getTime() ? <span class="string">"尚未解决"</span> : adminWarning.getUpdataTime());</span><br><span class="line">        dataMap.put(<span class="string">"lineName"</span>, ToolStr.isEmpty(adminWarning.getTower().getLine().getName()) ? <span class="string">""</span> : adminWarning.getTower().getLine().getName());</span><br><span class="line">        dataMap.put(<span class="string">"towerName"</span>, ToolStr.isEmpty(adminWarning.getTower().getName()) ? <span class="string">""</span> : adminWarning.getTower().getName());</span><br><span class="line">        dataMap.put(<span class="string">"cameraName"</span>,ToolStr.isEmpty(adminWarning.getCamera().getName())?<span class="string">""</span> : adminWarning.getCamera().getName() );</span><br><span class="line">        dataMap.put(<span class="string">"info"</span>, ToolStr.isEmpty(adminWarning.getInfo()) ? <span class="string">""</span> : adminWarning.getInfo());</span><br><span class="line">        dataMap.put(<span class="string">"yujingUrl"</span>, getImageBase(<span class="string">"/"</span>+CameraController.FILE_URL + adminWarning.getImge().getCameraName() + <span class="string">"/"</span> + adminWarning.getImge().getUuidName(),request));</span><br><span class="line">        dataMap.put(<span class="string">"content"</span>, ToolStr.isEmpty(adminWarning.getFont())?<span class="string">""</span>:adminWarning.getFont());</span><br><span class="line">        dataMap.put(<span class="string">"imgList"</span>,list);</span><br><span class="line">        <span class="comment">/** 生成word */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WordUtil.exportMillCertificateWord(request,response,dataMap,<span class="string">"消息处理列表"</span>, <span class="string">"预警明细.ftl"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">## 前台Html页面</span><br><span class="line"></span><br><span class="line">前台导出word实现：</span><br><span class="line">```html</span><br><span class="line"> &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"r"</span>&gt;</span><br><span class="line">                &lt;a shiro:hasPermission=<span class="string">"$&#123;EXPORT_WORD_URL&#125;"</span> href=<span class="string">"javascript:;"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-secondary radius"</span></span><br><span class="line">                   th:href=<span class="string">"@&#123;$&#123;EXPORT_WORD_URL+'?messageId='+id&#125;&#125;"</span>&gt;</span><br><span class="line">                    &lt;i class="Hui-iconfont"&gt;&amp;#xe644;&lt;/i&gt;导出Word</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>具体效果如下：<br>导出页面，这块还没有完善。<br><img src="/2018/08/29/使用freemarker导出Word-2018-08-29/images/daochuhtml.png" alt="FtL信息"><br>具体导出的模板信息如下：这块图片和文字还不知道怎么处理，但可以实现简单的导文字和图片了。<br><img src="/2018/08/29/使用freemarker导出Word-2018-08-29/images/worddaochu.png" alt="FtL信息"></p><p>搬运来自：<a href="https://www.cnblogs.com/zwqh/p/7182953.html" target="_blank" rel="noopener">https://www.cnblogs.com/zwqh/p/7182953.html</a> Java  用Freemarker完美导出word文档（带图片）<br><a href="https://blog.csdn.net/huangwenyi1010/article/details/51771551" target="_blank" rel="noopener">https://blog.csdn.net/huangwenyi1010/article/details/51771551</a>   Java之利用FreeMarker导出Word实例</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要是参考一些网上大神的案例，不过也要记录一下。便于以后自己学习，也可以给其他人做参考。我做的不一定对。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>批量导出Excel</title>
    <link href="http://yoursite.com/2018/08/09/%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BAExcel/"/>
    <id>http://yoursite.com/2018/08/09/批量导出Excel/</id>
    <published>2018-08-09T05:50:07.000Z</published>
    <updated>2019-03-04T14:56:26.189Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要是看大神代码，主要实现了，将所有要导出的信息，可以一键导出，并将文件压缩在文件夹中。<br><a id="more"></a><br>具体页面如下，导出之后会自动变成压缩包<br><img src="/2018/08/09/批量导出Excel/images/daochuyemian.png" alt="导出页面"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先要将所有要导出信息的数据查询出来，具体后台查询：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转台账一键导出市台账</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(TOONEKEYEXPORTEXCEL_URL + <span class="string">"1"</span>)</span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(TOONEKEYEXPORTEXCEL_URL + <span class="string">"1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">TooneKeyExportExcel1</span><span class="params">(Model m)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查当前用户拥有的台账</span></span><br><span class="line">        Map&lt;String, Object&gt; paramsOld = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        paramsOld.put(<span class="string">" user.id = "</span>, userService.getUser(<span class="keyword">null</span>).getId());</span><br><span class="line">        paramsOld.put(<span class="string">" ledger.submitUser.department.level = "</span>, <span class="number">0</span>);</span><br><span class="line">        List&lt;LedgerPermission&gt; find4Params = ledgerPermissionService.find4Params(paramsOld,</span><br><span class="line">                <span class="string">" order by ledger.name asc"</span>);</span><br><span class="line">        m.addAttribute(<span class="string">"list"</span>, find4Params);</span><br><span class="line">        Date[] monthDate = ToolDate.monthDate(<span class="keyword">new</span> Date());</span><br><span class="line">        String startTime = (monthDate[<span class="number">0</span>].getYear() + <span class="number">1900</span>) + <span class="string">"-"</span> + (monthDate[<span class="number">0</span>].getMonth() + <span class="number">1</span>);</span><br><span class="line">        m.addAttribute(<span class="string">"startTime"</span>, startTime);</span><br><span class="line">        String endTime = (monthDate[<span class="number">0</span>].getYear() + <span class="number">1900</span>) + <span class="string">"-"</span> + (monthDate[<span class="number">0</span>].getMonth() + <span class="number">1</span>);</span><br><span class="line">        m.addAttribute(<span class="string">"endTime"</span>, endTime);</span><br><span class="line">        <span class="keyword">return</span> TOONEKEYEXPORTEXCEL_URL;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="前台页面"><a href="#前台页面" class="headerlink" title="前台页面"></a>前台页面</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用的是jsp</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"selectall()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary radius size-S"</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp;&amp;nbsp;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"noselectall()"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary radius size-S"</span>&gt;</span>全不选<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp;&amp;nbsp;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary radius size-S"</span> <span class="attr">value</span>=<span class="string">"导出"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list &#125;"</span> <span class="attr">var</span>=<span class="string">"obj"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ids"</span> <span class="attr">class</span>=<span class="string">"checkboxs"</span> <span class="attr">id</span>=<span class="string">"$&#123;obj.id &#125;"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"$&#123;obj.ledger.id &#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"$&#123;obj.id &#125;"</span>&gt;</span>$&#123;obj.ledger.name &#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全选与全不选js代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">".checkboxs"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noselectall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">".checkboxs"</span>).prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="具体一键导出Excel实现代码"><a href="#具体一键导出Excel实现代码" class="headerlink" title="具体一键导出Excel实现代码"></a>具体一键导出Excel实现代码</h1><p>这里看的是将文件全部压缩到一个文件夹下面。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 台账一键导出</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     *            需要导出的台账的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime</span></span><br><span class="line"><span class="comment">     *            开始时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">     *            结束时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state</span></span><br><span class="line"><span class="comment">     *            审核状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(ONEKEYEXPORTEXCEL_URL)</span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(ONEKEYEXPORTEXCEL_URL)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; oneKeyExportExcel(String ids, String startTime, String endTime, String state) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ToolStr.isEmpty(ids)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MsgException(<span class="string">"至少选择一个台账"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先创建一个临时文件夹,用来存放excel</span></span><br><span class="line">        String fileName = userService.getUser(<span class="keyword">null</span>).getUsername() + <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        String path2 = ContextLoader.getCurrentWebApplicationContext().getServletContext().getRealPath(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> lastIndexOf = path2.lastIndexOf(<span class="string">"\\"</span>);</span><br><span class="line">        String substring = path2.substring(<span class="number">0</span>, lastIndexOf);</span><br><span class="line">        <span class="keyword">int</span> lastIndexOf2 = substring.lastIndexOf(<span class="string">"\\"</span>);</span><br><span class="line">        path2 = substring.substring(<span class="number">0</span>, lastIndexOf2 + <span class="number">1</span>);</span><br><span class="line">        String path3 = <span class="string">"zipfile"</span>;</span><br><span class="line">        path2 += <span class="string">"zipexcelfile/"</span> + fileName;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(path2);</span><br><span class="line">        File dir2 = <span class="keyword">new</span> File(path3);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dir2.exists()) &#123;</span><br><span class="line">            dir2.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 再创建一个临时文件夹用来存zip</span></span><br><span class="line"></span><br><span class="line">        String[] split = ids.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span> (String string : split) &#123;</span><br><span class="line">            <span class="comment">// 得到台账</span></span><br><span class="line">            Ledger ledger = ledgerService.get(ToolStr.sToL(string, <span class="number">0</span>));</span><br><span class="line">            <span class="keyword">if</span> (!ToolStr.isEmpty(ledger)) &#123;</span><br><span class="line">                <span class="comment">// 得到没被删除的台账详情</span></span><br><span class="line">                List&lt;LedgerInfo&gt; ledgerInfoList = ledger.getLedgerInfoList();</span><br><span class="line">                List&lt;LedgerInfo&gt; collect = ledgerInfoList.stream()</span><br><span class="line">                        .filter((LedgerInfo l) -&gt; l.getState().equals(LedgerInfo.NORMAL)).collect(Collectors.toList());</span><br><span class="line">                <span class="comment">// 查询台账的上报记录</span></span><br><span class="line">                <span class="comment">// 审核员和非审核员查询到的内容不同</span></span><br><span class="line">                List&lt;LedgerRecords&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                String checkPermission = ledgerCheckPermissionService.checkPermission(ledger.getId());</span><br><span class="line">                <span class="keyword">if</span> (!ToolStr.isEmpty(checkPermission)) &#123;</span><br><span class="line">                    list = ledgerRecordsService.findLedgerRecords4LedgerIdExport(ledger.getId(), startTime, endTime,</span><br><span class="line">                            state);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    list = ledgerRecordsService.findLedgerRecords4LedgerIdAndUserDeptExport(ledger.getId(), startTime,</span><br><span class="line">                            endTime, state);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 新建excel</span></span><br><span class="line">                HSSFWorkbook excel = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">                HSSFSheet createSheet = excel.createSheet();</span><br><span class="line">                <span class="comment">// 设置列宽 序号,上报单位,上报时间</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= collect.size() + <span class="number">2</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                        createSheet.setColumnWidth(i, <span class="number">20</span> * <span class="number">100</span>);<span class="comment">// 宽度</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == collect.size() + <span class="number">2</span>) &#123;</span><br><span class="line">                        createSheet.setColumnWidth(i, <span class="number">20</span> * <span class="number">200</span>);<span class="comment">// 宽度</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        createSheet.setColumnWidth(i, <span class="number">20</span> * <span class="number">400</span>);<span class="comment">// 宽度</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 标题</span></span><br><span class="line">                HSSFCellStyle style1 = excel.createCellStyle();</span><br><span class="line">                style1.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">                HSSFFont font = excel.createFont();</span><br><span class="line">                font.setFontName(<span class="string">"黑体"</span>);</span><br><span class="line">                font.setFontHeightInPoints(Short.parseShort(<span class="string">"16"</span>));<span class="comment">// 设置字体大小</span></span><br><span class="line">                style1.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">                style1.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class="line">                style1.setFont(font);</span><br><span class="line">                <span class="comment">// 表头样式</span></span><br><span class="line">                CellStyle headerStyle = excel.createCellStyle();</span><br><span class="line">                headerStyle.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">                headerStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">                headerStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class="line">                Font headerFont = excel.createFont();</span><br><span class="line">                headerFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</span><br><span class="line">                headerFont.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">                headerStyle.setFont(headerFont);</span><br><span class="line">                <span class="comment">// 普通单元格样式</span></span><br><span class="line">                CellStyle cellStyle = excel.createCellStyle();</span><br><span class="line">                cellStyle.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">                cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">                Font cellFont = excel.createFont();</span><br><span class="line">                cellFont.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">                cellStyle.setFont(cellFont);</span><br><span class="line">                <span class="comment">// 创建第一行</span></span><br><span class="line">                HSSFRow createRow3 = createSheet.createRow(<span class="number">0</span>);</span><br><span class="line">                createRow3.setHeight((<span class="keyword">short</span>) (<span class="number">25</span> * <span class="number">20</span>));</span><br><span class="line">                <span class="comment">// 根据cols.size()进行合并</span></span><br><span class="line">                CellRangeAddress cra = <span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, collect.size() + <span class="number">2</span>);<span class="comment">// 合并单元格</span></span><br><span class="line">                createSheet.addMergedRegion(cra);</span><br><span class="line">                HSSFCell titleCell = createRow3.createCell(<span class="number">0</span>);</span><br><span class="line">                titleCell.setCellValue(ledger.getName());<span class="comment">// 表的标题</span></span><br><span class="line">                titleCell.setCellStyle(style1);</span><br><span class="line">                <span class="comment">// 表头</span></span><br><span class="line">                <span class="comment">// 创建表头</span></span><br><span class="line">                <span class="comment">// 创建第二行</span></span><br><span class="line">                HSSFRow createRow2 = createSheet.createRow(<span class="number">1</span>);</span><br><span class="line">                createRow2.setHeight((<span class="keyword">short</span>) (<span class="number">15</span> * <span class="number">20</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= collect.size() + <span class="number">2</span>; j++) &#123;</span><br><span class="line">                    HSSFCell createCell = createRow2.createCell(j);</span><br><span class="line">                    <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                        createCell.setCellValue(<span class="string">"序号"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">                        createCell.setCellValue(<span class="string">"上报单位"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == collect.size() + <span class="number">2</span>) &#123;</span><br><span class="line">                        createCell.setCellValue(<span class="string">"上报时间"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        createCell.setCellValue(collect.get(j - <span class="number">2</span>).getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                    createCell.setCellStyle(headerStyle);</span><br><span class="line">                    createCell.setCellType(HSSFCell.CELL_TYPE_STRING);<span class="comment">// 变成文本型</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">                <span class="comment">// 内容</span></span><br><span class="line">                <span class="keyword">for</span> (LedgerRecords ledgerRecords : list) &#123;</span><br><span class="line">                    <span class="comment">// 创建一行</span></span><br><span class="line">                    HSSFRow createRow = createSheet.createRow(i++);</span><br><span class="line">                    List&lt;LedgerInfoRecords&gt; ledgerInfoRecords = ledgerRecords.getLedgerInfoRecords();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= collect.size() + <span class="number">2</span>; j++) &#123;</span><br><span class="line">                        HSSFCell createCell = createRow.createCell(j);</span><br><span class="line">                        <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                            createCell.setCellValue(i - <span class="number">2</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">                            createCell.setCellValue(ledgerRecords.getSubmitUser().getDepartment().getName());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == collect.size() + <span class="number">2</span>) &#123;</span><br><span class="line">                            createCell.setCellValue(</span><br><span class="line">                                    ToolDate.formatTime(ledgerRecords.getCreateTime(), <span class="string">"yyyy年MM月dd日"</span>, <span class="string">""</span>));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            LedgerInfo ledgerInfo = collect.get(j - <span class="number">2</span>);</span><br><span class="line">                            <span class="keyword">for</span> (LedgerInfoRecords ledgerInfoRecords2 : ledgerInfoRecords) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (ledgerInfo.getId().equals(ledgerInfoRecords2.getLedgerInfo().getId())) &#123;</span><br><span class="line">                                    createCell.setCellValue(ledgerInfoRecords2.getContent());</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        createCell.setCellStyle(cellStyle);</span><br><span class="line">                        createCell.setCellType(HSSFCell.CELL_TYPE_STRING);<span class="comment">// 变成文本型</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 都保存到一个临时文件夹</span></span><br><span class="line">                FileOutputStream fout;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fout = <span class="keyword">new</span> FileOutputStream(path2 + <span class="string">"/"</span> + ledger.getName() + <span class="string">".xls"</span>);</span><br><span class="line">                    excel.write(fout);</span><br><span class="line">                    fout.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 压缩文件夹</span></span><br><span class="line">        FileOutputStream fos1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos1 = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(path3 + <span class="string">"/"</span> + fileName + <span class="string">".zip"</span>));</span><br><span class="line">            FileUtil.toZip(path2, fos1, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        File f = <span class="keyword">new</span> File(path3 + <span class="string">"/"</span> + fileName + <span class="string">".zip"</span>);</span><br><span class="line">        <span class="comment">// 下载</span></span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            headers.setContentDispositionFormData(<span class="string">"attachment"</span>, java.net.URLEncoder.encode(<span class="string">"监测台账"</span>, <span class="string">"UTF-8"</span>) + <span class="string">".zip"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            headers.setContentDispositionFormData(<span class="string">"attachment"</span>, <span class="string">"download"</span> + <span class="string">".zip"</span>);</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(FileUtils.readFileToByteArray(f), headers, HttpStatus.CREATED);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>具体的FileUtil<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">2</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩成ZIP 方法1</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcDir</span></span><br><span class="line"><span class="comment">     *            压缩文件夹路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out</span></span><br><span class="line"><span class="comment">     *            压缩文件输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> KeepDirStructure</span></span><br><span class="line"><span class="comment">     *            是否保留原来的目录结构,true:保留目录结构;</span></span><br><span class="line"><span class="comment">     *            false:所有文件跑到压缩包根目录下(注意：不保留目录结构可能会出现同名文件,会压缩失败)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RuntimeException</span></span><br><span class="line"><span class="comment">     *             压缩失败会抛出运行时异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toZip</span><span class="params">(String srcDir, OutputStream out, <span class="keyword">boolean</span> KeepDirStructure)</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ZipOutputStream zos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zos = <span class="keyword">new</span> ZipOutputStream(out);</span><br><span class="line">            File sourceFile = <span class="keyword">new</span> File(srcDir);</span><br><span class="line">            compress(sourceFile, zos, sourceFile.getName(), KeepDirStructure);</span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">"压缩完成，耗时："</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"zip error from ZipUtils"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (zos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归压缩方法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceFile</span></span><br><span class="line"><span class="comment">     *            源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zos</span></span><br><span class="line"><span class="comment">     *            zip输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     *            压缩后的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> KeepDirStructure</span></span><br><span class="line"><span class="comment">     *            是否保留原来的目录结构,true:保留目录结构;</span></span><br><span class="line"><span class="comment">     *            false:所有文件跑到压缩包根目录下(注意：不保留目录结构可能会出现同名文件,会压缩失败)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(File sourceFile, ZipOutputStream zos, String name, <span class="keyword">boolean</span> KeepDirStructure)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zos.setEncoding(<span class="string">"gbk"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        <span class="keyword">if</span> (sourceFile.isFile()) &#123;</span><br><span class="line">            <span class="comment">// 向zip输出流中添加一个zip实体，构造器中name为zip实体的文件的名字</span></span><br><span class="line">            zos.putNextEntry(<span class="keyword">new</span> ZipEntry(name));</span><br><span class="line">            <span class="comment">// copy文件到zip输出流中</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            FileInputStream in = <span class="keyword">new</span> FileInputStream(sourceFile);</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                zos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Complete the entry</span></span><br><span class="line">            zos.closeEntry();</span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            File[] listFiles = sourceFile.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (listFiles == <span class="keyword">null</span> || listFiles.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 需要保留原来的文件结构时,需要对空文件夹进行处理</span></span><br><span class="line">                <span class="keyword">if</span> (KeepDirStructure) &#123;</span><br><span class="line">                    <span class="comment">// 空文件夹的处理</span></span><br><span class="line">                    zos.putNextEntry(<span class="keyword">new</span> ZipEntry(name + <span class="string">"/"</span>));</span><br><span class="line">                    <span class="comment">// 没有文件，不需要文件的copy</span></span><br><span class="line">                    zos.closeEntry();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (File file : listFiles) &#123;</span><br><span class="line">                    <span class="comment">// 判断是否需要保留原来的文件结构</span></span><br><span class="line">                    <span class="keyword">if</span> (KeepDirStructure) &#123;</span><br><span class="line">                        <span class="comment">// 注意：file.getName()前面需要带上父文件夹的名字加一斜杠,</span></span><br><span class="line">                        <span class="comment">// 不然最后压缩包中就不能保留原来的文件结构,即：所有文件都跑到压缩包根目录下了</span></span><br><span class="line">                        compress(file, zos, name + <span class="string">"/"</span> + file.getName(), KeepDirStructure);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        compress(file, zos, file.getName(), KeepDirStructure);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String path1, String path2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream input = <span class="keyword">new</span> FileInputStream(path1);<span class="comment">// 可替换为任何路径何和文件名</span></span><br><span class="line">            FileOutputStream output = <span class="keyword">new</span> FileOutputStream(path2);<span class="comment">// 可替换为任何路径何和文件名</span></span><br><span class="line">            <span class="keyword">int</span> in = input.read();</span><br><span class="line">            <span class="keyword">while</span> (in != -<span class="number">1</span>) &#123;</span><br><span class="line">                output.write(in);</span><br><span class="line">                in = input.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要是看大神代码，主要实现了，将所有要导出的信息，可以一键导出，并将文件压缩在文件夹中。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web后台" scheme="http://yoursite.com/categories/Web%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="日常积累" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="POI" scheme="http://yoursite.com/tags/POI/"/>
    
  </entry>
  
  <entry>
    <title>导出Excel(可选择)—2018-08-09</title>
    <link href="http://yoursite.com/2018/08/09/%E5%AF%BC%E5%87%BAExcel-%E5%8F%AF%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2018/08/09/导出Excel-可选择/</id>
    <published>2018-08-09T01:53:06.000Z</published>
    <updated>2019-03-04T14:35:29.073Z</updated>
    
    <content type="html"><![CDATA[<p>实现导出Excel可以进行选择具体某几列进行导出，这里是用别人的代码，觉得比较高端，所以记录一下，以便自己学习。<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>导入导出Excel需要的jar包，这里用的是Maven工程，只需要引入相应的坐标即可。<br>POM文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;3.15&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-scratchpad&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h1 id="前台实现"><a href="#前台实现" class="headerlink" title="前台实现"></a>前台实现</h1><p>用的是jsp，前台框架用的H-UI,一开始需要将显示弹框的内容进行隐藏，用layer.open就可以实现弹框。<br>效果如下，没有美化：</p><p><img src="/2018/08/09/导出Excel-可选择/daochuExcel.png" alt="导出Excel弹窗"><br>具体实现代码:这里是导出的按钮<br><img src="/2018/08/09/导出Excel-可选择/daochu.png" alt="导出按钮"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"float:right"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary radius"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">onclick</span>=<span class="string">"daochuexcel4ledgerid()"</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>隐藏的弹出框的内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"exportexceldiv"</span> <span class="attr">hidden</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"width: 95%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;ctx &#125;$&#123;exportexcel&#125;"</span> <span class="attr">id</span>=<span class="string">"exportexcelform"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"reportTime"</span> <span class="attr">value</span>=<span class="string">"$&#123;reportTime &#125;"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"deadTime"</span> <span class="attr">value</span>=<span class="string">"$&#123;deadTime &#125;"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"state"</span> <span class="attr">value</span>=<span class="string">"$&#123;param.state &#125;"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"additionFirstId"</span> <span class="attr">value</span>=<span class="string">"$&#123;additionFirstId &#125;"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"pagerowTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;page.rowTotal &#125;"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"departmentId"</span> <span class="attr">value</span>=<span class="string">"$&#123;departmentId &#125;"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row cl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-label col-xs-4 col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"c-red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>请选择导出列：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"formControls col-xs-8 col-sm-9"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"xuhao"</span> <span class="attr">name</span>=<span class="string">"col"</span> <span class="attr">id</span>=<span class="string">"colxuhao"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colxuhao"</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"mingcheng"</span> <span class="attr">name</span>=<span class="string">"col"</span> <span class="attr">id</span>=<span class="string">"collmingcheng"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"collmingcheng"</span>&gt;</span>部门名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 这里写上用户自定义的哪一些 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"ledgerinfocheckbox"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"shijian"</span> <span class="attr">name</span>=<span class="string">"col"</span> <span class="attr">id</span>=<span class="string">"colshijian"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colshijian"</span>&gt;</span>上报时间<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"zhuangtai"</span> <span class="attr">name</span>=<span class="string">"col"</span> <span class="attr">id</span>=<span class="string">"colzhuangtai"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colzhuangtai"</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row cl"</span> <span class="attr">style</span>=<span class="string">"padding-top: 15px;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4 col-sm-offset-5"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary radius"</span> <span class="attr">value</span>=<span class="string">"导出"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>daochuexcel4ledgerid实现方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//这是导出某一台账的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">daochuexcel4ledgerid</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//先清空多选框</span></span><br><span class="line">        $(<span class="string">"#ledgerinfocheckbox"</span>).html(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//获得到当前台账的id和搜索条件</span></span><br><span class="line">        <span class="comment">//展示loading框</span></span><br><span class="line">        <span class="keyword">var</span> layermsgindex = layer.msg(<span class="string">'加载中'</span>, &#123;</span><br><span class="line">            icon: <span class="number">16</span>,</span><br><span class="line">            shade: <span class="number">0.01</span>,</span><br><span class="line">            time:<span class="number">0</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url : <span class="string">"$&#123;ctx &#125;$&#123;beforeexportexcel&#125;"</span>,</span><br><span class="line">            data : &#123;</span><br><span class="line">                <span class="string">"additionFirstId"</span>:<span class="string">'$&#123;additionFirstId&#125;'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            dataType : <span class="string">"json"</span>,</span><br><span class="line">            type: <span class="string">"post"</span>,</span><br><span class="line">            <span class="keyword">async</span>:<span class="literal">true</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> jsonobj = <span class="built_in">eval</span>(result);</span><br><span class="line">                <span class="keyword">var</span> htmlcont = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">if</span> (result.length != <span class="number">0</span> || result != <span class="literal">null</span> || result !=<span class="string">''</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> jsonobj)&#123;</span><br><span class="line">                        <span class="comment">//追加多选框</span></span><br><span class="line">                        htmlcont += <span class="string">' &lt;input type="checkbox" value="'</span>+ jsonobj[i].id +<span class="string">'" name="col" id="col'</span>+ jsonobj[i].id +<span class="string">'"&gt;&lt;label for="col'</span>+ jsonobj[i].id +<span class="string">'"&gt;'</span>+ jsonobj[i].secondName +<span class="string">'&lt;/label&gt;&lt;br&gt; '</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $(<span class="string">"#ledgerinfocheckbox"</span>).html(htmlcont);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, status, error</span>) </span>&#123;</span><br><span class="line">                layer.closeAll();</span><br><span class="line">                layer.msg(<span class="string">'加载失败，请重试。'</span>, &#123;<span class="attr">icon</span>: <span class="number">5</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        layer.closeAll();</span><br><span class="line">        <span class="comment">//弹出提示框选择列数</span></span><br><span class="line">        layer.open(&#123;</span><br><span class="line">            type: <span class="number">1</span>,</span><br><span class="line">            title: <span class="string">"导出列表"</span>,</span><br><span class="line">            skin: <span class="string">'layui-layer-rim'</span>, <span class="comment">//加上边框</span></span><br><span class="line">            area: [<span class="string">'800px'</span>, <span class="string">'600px'</span>], <span class="comment">//宽高</span></span><br><span class="line">            content: $(<span class="string">"#exportexceldiv"</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h1><p>查询出来具体需要导出的Excel列表数据<br>这里用框架的方法，可以自己实现查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加分项导出Excel前查询上报项</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(BEFORE_EXPORT_EXCEL_URL)</span><br><span class="line">    <span class="meta">@RequiresPermissions</span>(BEFORE_EXPORT_EXCEL_URL)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">beforeExportExcel</span><span class="params">(String additionFirstId)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        params.put(<span class="string">" additionFirstConfig.id = "</span>, ToolStr.sToL(additionFirstId, <span class="number">0</span>));</span><br><span class="line">        params.put(<span class="string">" state = "</span>, <span class="number">1</span>);</span><br><span class="line">        params.put(<span class="string">" deleteState = "</span>, <span class="number">1</span>);</span><br><span class="line">        List&lt;AdditionSecondConfig&gt; additionSecondConfigList = additionSecondConfigService.find4Params(params, <span class="string">" order by sort,id asc"</span>);</span><br><span class="line">        String jsonString = JSONObject.toJSONString(additionSecondConfigList);</span><br><span class="line">        <span class="keyword">return</span> jsonString;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="导出Excel"><a href="#导出Excel" class="headerlink" title="导出Excel"></a>导出Excel</h1><p>  点击弹出框中的导出可以进行导出，执行form表单中的方法，具体后台实现代码如下：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> response        响应</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> additionFirstId 一级菜单id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> pagerowTotal    总记录数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> col             列选择的每一列</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> type            类型</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> reportTime      上报时间 搜索条件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> deadTime        结束时间 搜索条件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> state           状态 搜索条件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> departmentId    部门id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(EXPORT_EXCEL_URL)</span><br><span class="line">  <span class="meta">@RequiresPermissions</span>(EXPORT_EXCEL_URL)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">exportExcel</span><span class="params">(HttpServletResponse response, String additionFirstId, String pagerowTotal,</span></span></span><br><span class="line"><span class="function"><span class="params">                            String col, String type, String reportTime, String deadTime, String state,</span></span></span><br><span class="line"><span class="function"><span class="params">                            String departmentId)</span> </span>&#123;</span><br><span class="line">      Page page = <span class="keyword">new</span> Page();</span><br><span class="line">      page.setCurentPage(<span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 这个根据具体的数量再定</span></span><br><span class="line">      page.setPageSize(ToolStr.sToI(pagerowTotal, <span class="number">0</span>));</span><br><span class="line">      Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">      <span class="comment">// 先查看导出哪一类台账</span></span><br><span class="line">      String additionTitle = <span class="string">"加分项列表"</span>;</span><br><span class="line">      <span class="comment">// 先查看有无ledgerId</span></span><br><span class="line">      List&lt;ReportAddition&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">// 获取当前年月</span></span><br><span class="line">      Calendar cal = Calendar.getInstance();</span><br><span class="line">      <span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line">      <span class="keyword">int</span> month = cal.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (!ToolStr.isEmpty(additionFirstId)) &#123;</span><br><span class="line">          AdditionFirstConfig additionFirstConfig = additionFirstConfigService.get(ToolStr.sToL(additionFirstId, <span class="number">0</span>));</span><br><span class="line">          <span class="comment">// 获取一级菜单名称</span></span><br><span class="line">          params.clear();</span><br><span class="line">          additionTitle = additionFirstConfig.getFirstName();</span><br><span class="line">          <span class="comment">// 判断是否有部门id</span></span><br><span class="line">          <span class="keyword">if</span> (!ToolStr.isEmpty(departmentId)) &#123;</span><br><span class="line">              params.put(<span class="string">" department.id = "</span>, ToolStr.sToL(departmentId, <span class="number">0</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          params.put(<span class="string">" additionFirstConfig.id = "</span>, ToolStr.sToL(additionFirstId, <span class="number">0</span>));</span><br><span class="line">          <span class="keyword">if</span> (!ToolStr.isEmpty(state)) &#123;</span><br><span class="line">              params.put(<span class="string">" state = "</span>, ToolStr.sToI(state));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!ToolStr.isEmpty(reportTime)) &#123;</span><br><span class="line">              reportTime += <span class="string">"-01 00:00:00"</span>;</span><br><span class="line">              params.put(<span class="string">" reportTime &gt;= "</span>, ToolDate.parseTime(reportTime, <span class="keyword">null</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 判断截止日期是否存在</span></span><br><span class="line">          <span class="keyword">if</span> (!ToolStr.isEmpty(deadTime)) &#123;</span><br><span class="line">              Date[] monthDate = ToolDate.monthDate(<span class="keyword">new</span> Date());</span><br><span class="line">              deadTime = deadTime + <span class="string">"-"</span> + (monthDate[<span class="number">1</span>].getDate()) + <span class="string">" 23:59:59"</span>;</span><br><span class="line">              params.put(<span class="string">" reportTime &lt;= "</span>, ToolDate.parseTime(deadTime, <span class="keyword">null</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 查询上报列表</span></span><br><span class="line">          list = reportAdditionService.find4Page(<span class="keyword">null</span>, params, <span class="string">" order by reportTime desc"</span>);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">      List&lt;String&gt; cols = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="keyword">if</span> (!ToolStr.isEmpty(col)) &#123;</span><br><span class="line">          String[] colsplit = col.split(<span class="string">","</span>);</span><br><span class="line">          len += colsplit.length;</span><br><span class="line">          <span class="keyword">for</span> (String string : colsplit) &#123;</span><br><span class="line">              cols.add(string);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// if (!ToolStr.isEmpty(colids)) &#123;</span></span><br><span class="line">      <span class="comment">// String[] colidssplit = colids.split(",");</span></span><br><span class="line">      <span class="comment">// len += colidssplit.length;</span></span><br><span class="line">      <span class="comment">// for (String string : colidssplit) &#123;</span></span><br><span class="line">      <span class="comment">// cols.add(string);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      XSSFWorkbook excel = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">      XSSFSheet createSheet = excel.createSheet();</span><br><span class="line">      <span class="comment">// 根据col的长度设置列宽</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cols.size(); i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> ((<span class="string">"xuhao"</span>).equals(cols.get(i)) || (<span class="string">"zhuangtai"</span>).equals(cols.get(i))) &#123;</span><br><span class="line">              <span class="comment">// 宽度</span></span><br><span class="line">              createSheet.setColumnWidth(i, <span class="number">20</span> * <span class="number">100</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="string">"mingcheng"</span>).equals(cols.get(i)) || (<span class="string">"shijian"</span>).equals(cols.get(i))) &#123;</span><br><span class="line">              <span class="comment">// 宽度</span></span><br><span class="line">              createSheet.setColumnWidth(i, <span class="number">20</span> * <span class="number">200</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 宽度</span></span><br><span class="line">              createSheet.setColumnWidth(i, <span class="number">20</span> * <span class="number">400</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      XSSFCellStyle style1 = excel.createCellStyle();</span><br><span class="line">      style1.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">      XSSFFont font = excel.createFont();</span><br><span class="line">      font.setFontName(<span class="string">"黑体"</span>);</span><br><span class="line">      <span class="comment">// 设置字体大小</span></span><br><span class="line">      font.setFontHeightInPoints(Short.parseShort(<span class="string">"16"</span>));</span><br><span class="line">      style1.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">      style1.setAlignment(XSSFCellStyle.ALIGN_CENTER);</span><br><span class="line">      style1.setFont(font);</span><br><span class="line">      <span class="comment">// 表头样式</span></span><br><span class="line">      CellStyle headerStyle = excel.createCellStyle();</span><br><span class="line">      headerStyle.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">      headerStyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">      headerStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);</span><br><span class="line">      Font headerFont = excel.createFont();</span><br><span class="line">      headerFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">11</span>);</span><br><span class="line">      headerFont.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">      headerStyle.setFont(headerFont);</span><br><span class="line">      <span class="comment">// 普通单元格样式</span></span><br><span class="line">      CellStyle cellStyle = excel.createCellStyle();</span><br><span class="line">      cellStyle.setWrapText(<span class="keyword">true</span>);</span><br><span class="line">      cellStyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line">      Font cellFont = excel.createFont();</span><br><span class="line">      cellFont.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">      cellStyle.setFont(cellFont);</span><br><span class="line">      <span class="comment">// 创建第一行</span></span><br><span class="line">      XSSFRow createRow3 = createSheet.createRow(<span class="number">0</span>);</span><br><span class="line">      createRow3.setHeight((<span class="keyword">short</span>) (<span class="number">25</span> * <span class="number">20</span>));</span><br><span class="line">      <span class="comment">// 根据cols.size()进行合并</span></span><br><span class="line">      CellRangeAddress cra = <span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, cols.size() - <span class="number">1</span>);<span class="comment">// 合并单元格</span></span><br><span class="line">      createSheet.addMergedRegion(cra);</span><br><span class="line">      XSSFCell titleCell = createRow3.createCell(<span class="number">0</span>);</span><br><span class="line">      <span class="comment">// 表的标题</span></span><br><span class="line">      titleCell.setCellValue(additionTitle);</span><br><span class="line">      titleCell.setCellStyle(style1);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建第二行</span></span><br><span class="line">      XSSFRow createRow2 = createSheet.createRow(<span class="number">1</span>);</span><br><span class="line">      createRow2.setHeight((<span class="keyword">short</span>) (<span class="number">15</span> * <span class="number">20</span>));</span><br><span class="line">      <span class="comment">// 创建表头</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols.size(); j++) &#123;</span><br><span class="line">          XSSFCell createCell = createRow2.createCell(j);</span><br><span class="line">          <span class="keyword">if</span> ((<span class="string">"xuhao"</span>.equals(cols.get(j)))) &#123;</span><br><span class="line">              createCell.setCellValue(<span class="string">"序号"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ((<span class="string">"mingcheng"</span>).equals(cols.get(j))) &#123;</span><br><span class="line">              createCell.setCellValue(<span class="string">"部门名称"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!(<span class="string">"zhuangtai"</span>).equals(cols.get(j)) &amp;&amp; !(<span class="string">"shijian"</span>).equals(cols.get(j))) &#123;</span><br><span class="line">              <span class="comment">// 拿着id去取</span></span><br><span class="line">              AdditionSecondConfig additionSecondConfig = additionSecondConfigService.get(ToolStr.sToL(cols.get(j), <span class="number">0</span>));</span><br><span class="line">              <span class="keyword">if</span> (additionSecondConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  createCell.setCellValue(additionSecondConfig.getSecondName());</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ((<span class="string">"shijian"</span>).equals(cols.get(j))) &#123;</span><br><span class="line">              createCell.setCellValue(<span class="string">"上报时间"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ((<span class="string">"zhuangtai"</span>).equals(cols.get(j))) &#123;</span><br><span class="line">              createCell.setCellValue(<span class="string">"状态"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          createCell.setCellStyle(headerStyle);</span><br><span class="line">          createCell.setCellType(XSSFCell.CELL_TYPE_STRING);<span class="comment">// 变成文本型</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">for</span> (ReportAddition reportAddition : list) &#123;</span><br><span class="line">          List&lt;String&gt; cols2 = cols;</span><br><span class="line">          <span class="comment">// 创建一行</span></span><br><span class="line">          XSSFRow createRow = createSheet.createRow(i++);</span><br><span class="line">          <span class="comment">// createRow.setHeight((short) (15 * 20)); 行高不要了，加上会把默认换行抵消掉</span></span><br><span class="line">          <span class="comment">// 获取上报详情</span></span><br><span class="line">          List&lt;ReportAdditionDetail&gt; reportAdditionDetailList = reportAddition.getReportAdditionDetailList();</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols2.size(); j++) &#123;</span><br><span class="line">              XSSFCell createCell = createRow.createCell(j);</span><br><span class="line">              <span class="keyword">if</span> ((<span class="string">"xuhao"</span>).equals(cols.get(j).toString())) &#123;</span><br><span class="line">                  String s = String.valueOf(i - <span class="number">2</span>);</span><br><span class="line">                  createCell.setCellValue(s);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ((<span class="string">"mingcheng"</span>.equals(cols.get(j).toString()))) &#123;</span><br><span class="line">                  createCell.setCellValue(reportAddition.getDepartment().getName());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (!(<span class="string">"zhuangtai"</span>).equals(cols.get(j)) &amp;&amp; !(<span class="string">"shijian"</span>).equals(cols.get(j).toString())) &#123;</span><br><span class="line">                  <span class="keyword">for</span> (ReportAdditionDetail reportAdditionDetail : reportAdditionDetailList) &#123;</span><br><span class="line">                      <span class="keyword">if</span> (reportAdditionDetail.getAdditionSecondConfig().getId().toString().equals(cols.get(j))) &#123;</span><br><span class="line">                          createCell.setCellValue(reportAdditionDetail.getContent());</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ((<span class="string">"shijian"</span>).equals(cols.get(j).toString())) &#123;</span><br><span class="line">                  createCell.setCellValue(ToolDate.formatTime(reportAddition.getCreateTime(), <span class="string">"yyyy-MM-dd"</span>, <span class="string">"时间为空"</span>));</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ((<span class="string">"zhuangtai"</span>).equals(cols.get(j).toString())) &#123;</span><br><span class="line">                  String reportState = <span class="string">""</span>;</span><br><span class="line">                  <span class="keyword">switch</span> (reportAddition.getState()) &#123;</span><br><span class="line">                      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                          reportState += <span class="string">"待审核"</span>;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                          reportState += <span class="string">"未通过"</span>;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                          reportState += <span class="string">"通过"</span>;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                          reportState += <span class="string">"退回"</span>;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                          reportState += <span class="string">"二次报送"</span>;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">default</span>:</span><br><span class="line">                  &#125;</span><br><span class="line">                  createCell.setCellValue(reportState);</span><br><span class="line">              &#125;</span><br><span class="line">              createCell.setCellStyle(cellStyle);</span><br><span class="line">              <span class="comment">// 变成文本型</span></span><br><span class="line">              createCell.setCellType(XSSFCell.CELL_TYPE_STRING);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 最后输出</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          response.setHeader(<span class="string">"content-Disposition"</span>,</span><br><span class="line">                  <span class="string">"attachment;filename="</span> + java.net.URLEncoder.encode(additionTitle, <span class="string">"UTF-8"</span>) + <span class="string">".xlsx"</span>);</span><br><span class="line">          excel.write(response.getOutputStream());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现导出Excel可以进行选择具体某几列进行导出，这里是用别人的代码，觉得比较高端，所以记录一下，以便自己学习。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="日常积累" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="POI" scheme="http://yoursite.com/tags/POI/"/>
    
  </entry>
  
  <entry>
    <title>使用jquery下拉弹出多选框选择相应信息</title>
    <link href="http://yoursite.com/2018/08/09/%E4%BD%BF%E7%94%A8jquery%E4%B8%8B%E6%8B%89%E5%BC%B9%E5%87%BA%E5%A4%9A%E9%80%89%E6%A1%86%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2018/08/09/使用jquery下拉弹出多选框选择相应信息/</id>
    <published>2018-08-09T00:39:05.000Z</published>
    <updated>2019-03-04T14:37:39.805Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录下自己平常用到的一些技术，方便以后去复习，也是进一步加深自己的印象。不至于忘得太快。<br>这里主要实现的是弹出多选框进行选择信息，用的是别人的插件。<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>这里自己看到一个插件，挺不错的，这里分享一下。直接下载就可以使用。</p><p>网址如下：<a href="http://www.jqueryfuns.com/resource/1628" target="_blank" rel="noopener">http://www.jqueryfuns.com/resource/1628</a><br>这里只是实现了将信息展示出来，但没有搜索，可以自己加上<br>整体效果展示图：<br><img src="/2018/08/09/使用jquery下拉弹出多选框选择相应信息/jquery-xmenu.png" alt="Jquery-XMENU插件"></p><p>首先要引入相应的js和css(PS:这里可能引入高版本的js插件可能就会报错)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">css:</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx &#125;/admin/own/css/powerFloat.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx &#125;/admin/own/css/xmenu.css"</span> /&gt;</span></span><br><span class="line">js:</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx &#125;/admin/own/js/jquery-1.7.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx &#125;/admin/own/js/jquery-xmenu.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx &#125;/admin/own/js/jquery-powerFloat-min-my.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="前台代码"><a href="#前台代码" class="headerlink" title="前台代码"></a>前台代码</h1><p>input 中隐藏的是 所选择部门的id，跟下面li中rel的属性有关系，rel可以存放你想要传到前台的数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row cl"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-label col-xs-4 col-sm-3"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"c-red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>发送对象：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"formControls col-xs-4 col-sm-3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"selectdept"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"as"</span> <span class="attr">onclick</span>=<span class="string">"change_zindex()"</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"xmenuspan"</span> &gt;</span>选择用户<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"selectdeptidden"</span> <span class="attr">name</span>=<span class="string">"deptId"</span> <span class="attr">required</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>具体加载初始化Xmenu方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里是找到id并初始化加载Xmenu</span></span><br><span class="line">        $(<span class="string">"#selectdept"</span>).xMenu(&#123;</span><br><span class="line">            width :<span class="number">600</span>,</span><br><span class="line">            eventType: <span class="string">"click"</span>, <span class="comment">//事件类型 支持focus click hover</span></span><br><span class="line">            dropmenu:<span class="string">"#m1"</span>,<span class="comment">//弹出层</span></span><br><span class="line">            hiddenID : <span class="string">"selectdeptidden"</span><span class="comment">//隐藏域ID</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>首先必须初始化数据，就是在列表查询的时候 就将下拉框中的值查询出来，不然通过ajax 或者其他的方式<br>会出现错误，因为xmenu.js 一开始就默认初始化加载数据。一开始只需要隐藏即可。具体弹出框的代码如下：<br>这里使用的是jsp页面，html页面不太懂一开始怎么取加载数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"m1"</span> <span class="attr">class</span>=<span class="string">"xmenu"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"select-info"</span> <span class="attr">id</span>=<span class="string">"wycselect"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"top-label"</span> <span class="attr">id</span>=<span class="string">"selectuser"</span>&gt;</span>已选用户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span>  <span class="attr">name</span>=<span class="string">"menu-confirm"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"a-btn"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"a-btn-text"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;departmentList&#125;"</span> <span class="attr">var</span>=<span class="string">"department"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span>$&#123;department.key&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span> <span class="attr">style</span>=<span class="string">"display: none"</span> <span class="attr">id</span>=<span class="string">"selectdeptname"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary radius size-MINI"</span> <span class="attr">onclick</span>=<span class="string">"inverse(this)"</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;department.value &#125;"</span> <span class="attr">var</span>=<span class="string">"dept"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">rel</span>=<span class="string">"$&#123;dept.id &#125;"</span> &gt;</span>$&#123;dept.name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>反选实现方式，就是讲 li 中加上class属性，就代表的是选中状态，也可以模拟点击事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inverse</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        $(obj).next().children().each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="keyword">this</span>).click();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h1><p>后台代码的主要实现就是将要显示的数据查询出来，遍历list即可，这里我用的是Map集合&lt;选择大项名称，小项具体数据List&gt;<br>也可以通过json进行传输{“大项名称”:[“name”：”小项名称”,”id”:”小项id”，….]}<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model, String reportTime, String deadTime, HttpServletRequest request, Page page)</span> </span>&#123;</span><br><span class="line">Map&lt;String, List&lt;Department&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">// 这里查询数据库中的数据</span></span><br><span class="line"><span class="comment">//query data;</span></span><br><span class="line">map.put(<span class="string">"大项名称"</span>，小项list);</span><br><span class="line"><span class="comment">// model进行传值到jsp页面中</span></span><br><span class="line">model.addAttribute(<span class="string">"departmentList"</span>, map);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"页面url"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要记录下自己平常用到的一些技术，方便以后去复习，也是进一步加深自己的印象。不至于忘得太快。&lt;br&gt;这里主要实现的是弹出多选框进行选择信息，用的是别人的插件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>Java从零开始—多线程实现的三种方式</title>
    <link href="http://yoursite.com/2018/07/22/Java%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E2%80%94%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/07/22/Java从零开始—多线程实现的三种方式/</id>
    <published>2018-07-22T03:19:09.000Z</published>
    <updated>2019-03-04T14:38:58.954Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA多线程实现方式主要有三种：继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。其中前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。<br><a id="more"></a></p><h1 id="1、继承Thread类实现多线程"><a href="#1、继承Thread类实现多线程" class="headerlink" title="1、继承Thread类实现多线程"></a>1、继承Thread类实现多线程</h1><p>继承Thread类的方法尽管被我列为一种多线程实现方式，但Thread本质上也是实现了Runnable接口的一个实例，它代表一个线程的实例，并且，启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个native方法，它将启动一个新线程，并执行run()方法。这种方式实现多线程很简单，通过自己的类直接extend Thread，并复写run()方法，就可以启动新线程并执行自己定义的run()方法。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span>  <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do  something!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在合适的地方启动线程如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadDemo threadDemo1 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        ThreadDemo threadDemo2 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        threadDemo1.start();</span><br><span class="line">        threadDemo2.start();</span><br></pre></td></tr></table></figure></p><h1 id="2、实现Runnable接口方式实现多线程"><a href="#2、实现Runnable接口方式实现多线程" class="headerlink" title="2、实现Runnable接口方式实现多线程"></a>2、实现Runnable接口方式实现多线程</h1><p>如果自己的类已经extends另一个类，就无法直接extends Thread，此时，必须实现一个Runnable接口，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">extends</span> <span class="title">BlockOrNo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了启动MyThread，需要首先实例化一个Thread，并传入自己的MyThread实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RunnableDemo runnableDemo = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnableDemo);</span><br><span class="line">        thread.start();</span><br></pre></td></tr></table></figure></p><p>事实上，当传入一个Runnable target参数给Thread后，Thread的run()方法就会调用target.run()，参考JDK源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line"># 3、使用ExecutorService、Callable、Future实现有返回结果的多线程</span><br><span class="line">ExecutorService、Callable、Future这个对象实际上都是属于Executor框架中的功能类。想要详细了解Executor框架的可以访问http:<span class="comment">//www.javaeye.com/topic/366591 ，这里面对该框架做了很详细的解释。返回结果的线程是在JDK1.5中引入的新特征，确实很实用，有了这种特征我就不需要再为了得到返回值而大费周折了，而且即便实现了也可能漏洞百出。</span></span><br><span class="line">可返回值的任务必须实现Callable接口，类似的，无返回值的任务必须Runnable接口。执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了，再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。下面提供了一个完整的有返回结果的多线程测试例子，在JDK1.5下验证过没问题可以直接使用。代码如下：    </span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESCFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"程序开始运行..."</span>);</span><br><span class="line">        Date data1 = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">int</span> takeSize = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 创建一个线程池</span></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(takeSize);</span><br><span class="line">        <span class="comment">// 创建有多个返回值的任务</span></span><br><span class="line">        List&lt;Future&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; takeSize; i++) &#123;</span><br><span class="line">            Callable callable = <span class="keyword">new</span> MyCallable(i + <span class="string">""</span>);</span><br><span class="line">            <span class="comment">// 执行任务并获取Future对象</span></span><br><span class="line">            Future f = pool.submit(callable);</span><br><span class="line">            futures.add(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有并发任务的运行结果</span></span><br><span class="line">        <span class="keyword">for</span> (Future f : futures) &#123;</span><br><span class="line">            <span class="comment">// 从Future中获取返回值</span></span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + f.get().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">"--程序结束运行----，程序运行时间【"</span> + (date2.getTime() - data1.getTime()) + <span class="string">"】毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String taskNum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCallable</span><span class="params">(String taskNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskNum = taskNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务启动"</span>);</span><br><span class="line">        Date dateTmpl = <span class="keyword">new</span> Date();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        Date dateTmp2 = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> time = dateTmp2.getTime() - dateTmpl.getTime();</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务终止"</span>);</span><br><span class="line">        <span class="keyword">return</span> taskNum + <span class="string">"任务返回运行结果，当前任务时间【"</span> + time + <span class="string">"毫秒】"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码说明：<br>上述代码中Executors类，提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口。<br>public static ExecutorService newFixedThreadPool(int nThreads)<br>创建固定数目线程的线程池。<br>public static ExecutorService newCachedThreadPool()<br>创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。<br>public static ExecutorService newSingleThreadExecutor()<br>创建一个单线程化的Executor。<br>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)<br>创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p><p>ExecutoreService提供了submit()方法，传递一个Callable，或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的计算，这调用返回Future对象的get()方法，会阻塞直到计算完成。<br>搬运来自：  <a href="https://blog.csdn.net/aboy123/article/details/38307539" target="_blank" rel="noopener">https://blog.csdn.net/aboy123/article/details/38307539</a>   </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA多线程实现方式主要有三种：继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。其中前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="日常总结" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java从零开始—字符串</title>
    <link href="http://yoursite.com/2018/07/21/java-string-begin/"/>
    <id>http://yoursite.com/2018/07/21/java-string-begin/</id>
    <published>2018-07-21T02:19:32.000Z</published>
    <updated>2019-03-04T12:49:32.877Z</updated>
    
    <content type="html"><![CDATA[<p>记录自己参考别人博客，一点一点学习Java基础知识。也记录自己一点一点学习成效，便于以后学习。<br><a id="more"></a></p><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><p>使用Idea查看String类（源码）<br>打开这个类文件就会发现String类是被final修饰的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Class String is special cased within the Serialization Stream Protocol.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A String instance is written into an ObjectOutputStream according to</span></span><br><span class="line"><span class="comment">     * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../platform/serialization/spec/output.html"&gt;</span></span><br><span class="line"><span class="comment">     * Object Serialization Specification, Section 6.2, "Stream Elements"&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><p>从上面可以看出几点：<br>（1）String类是final类，也即意味着String类不能被继承，并且它的成员方法都默认为final方法。<br>在Java中，被final修饰的类是不允许被继承的，并且该类中的成员方法都默认为final方法。<br>在早期的JVM实现版本中，被final修饰的方法会被转为内嵌调用以提升执行效率。<br>而从Java SE5/6开始，就渐渐摈弃这种方式了。因此在现在的JavaSE版本中，<br>不需要考虑用final去提升方法调用效率。只有在确定不想让该方法被覆盖时，才将方法设置为final。<br>（2）上面列举出了String类中所有的成员属性，从上面可以看出String类其实是通过char数组来保存字符串的。</p><p>　　下面再继续看String类的一些方法实现：jdk版本1.8<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">        <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></span><br><span class="line">                : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> otherLen = str.length();</span><br><span class="line">        <span class="keyword">if</span> (otherLen == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = value.length;</span><br><span class="line">        <span class="keyword">char</span> buf[] = Arrays.copyOf(value, len + otherLen);</span><br><span class="line">        str.getChars(buf, len);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oldChar != newChar) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = value.length;</span><br><span class="line">            <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span>[] val = value; <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (++i &lt; len) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val[i] == oldChar) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">                <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                    buf[j] = val[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">                    <span class="keyword">char</span> c = val[i];</span><br><span class="line">                    buf[i] = (c == oldChar) ? newChar : c;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>从上面的三个方法可以看出，无论是sub操、concat还是replace操作都不是在原有的字符串上进行的，而是重新生成了一个新的字符串对象。也就是说进行这些操作后，最原始的字符串并没有被改变。<br>　在这里要永远记住一点：<br>    <font color="red">“对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象”。</font><br>    在了解了于String类基础的知识后，下面来看一些在平常使用中容易忽略和混淆的地方</p><h1 id="深入理解String、StringBuffer、StringBuilder"><a href="#深入理解String、StringBuffer、StringBuilder" class="headerlink" title="深入理解String、StringBuffer、StringBuilder"></a>深入理解String、StringBuffer、StringBuilder</h1><p>1.String str=”hello world”和String str=new String(“hello world”)的区别<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> time = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"hello world"</span>;</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"hello world"</span>);</span><br><span class="line">        String s3 = <span class="string">"hello world"</span>;</span><br><span class="line">        String s4 = <span class="keyword">new</span> String(<span class="string">"hello world"</span>);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(s2 == s4);</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        System.out.println(s1 == s3);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>代码运行结果：<br><img src="/2018/07/21/java-string-begin/javaString1.png" alt="字符串比较运行结果"><br>为什么会出现这样的结果？下面解释一下原因：<br>在前面一篇讲解关于JVM内存机制的一篇博文中提到 ，在class文件中有一部分 来存储编译期间生成的 字面常量以及符号引用，这部分叫做class文件常量池，在运行期间对应着方法区的运行时常量池。</p><p>　　因此在上述代码中，String str1 = “hello world”;和String str3 = “hello world”; 都在编译期间生成了 字面常量和符号引用，运行期间字面常量”hello world”被存储在运行时常量池（当然只保存了一份）。通过这种方式来将String对象跟引用绑定的话，JVM执行引擎会先在运行时常量池查找是否存在相同的字面常量，如果存在，则直接将引用指向已经存在的字面常量；否则在运行时常量池开辟一个空间来存储该字面常量，并将引用指向该字面常量。</p><p>　　总所周知，通过new关键字来生成对象是在堆区进行的，而在堆区进行对象生成的过程是不会去检测该对象是否已经存在的。因此通过new来创建对象，创建出的一定是不同的对象，即使字符串的内容是相同的。    </p><p>2.String、StringBuffer以及StringBuilder的区别<br>既然在Java中已经存在了String类，那为什么还需要StringBuilder和StringBuffer类呢？</p><p>　　那么看下面这段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> time = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            s += <span class="string">"hello world"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这句 string += “hello”;的过程相当于将原有的string变量指向的对象内容取出与”hello”作字符串相加操作再存进另一个新的String对象当中，再让string变量指向新生成的对象。每循环一次就会new一个对象。造成资源浪费<br> s += “hello world”的操作事实上会自动被JVM优化成：</p><p>　　StringBuilder str = new StringBuilder(string);</p><p>　　str.append(“hello world”);</p><p>　　str.toString();</p><p>　　再看下面这段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> time = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>StringBuilder只会new一个对象，append操作是在原有对象的基础上进行的。因此在循环了10000次之后，这段代码所占的资源要比上面小得多。</p><p>　　那么有人会问既然有了StringBuilder类，为什么还需要StringBuffer类？查看源代码便一目了然，事实上，StringBuilder和StringBuffer类拥有的成员属性以及成员方法基本相同，区别是StringBuffer类的成员方法前面多了一个关键字：synchronized，不用多说，这个关键字是在多线程访问时起到安全保护作用的,也就是说StringBuffer是线程安全的。</p><p>　　下面摘了2段代码分别来自StringBuffer和StringBuilder，insert方法的具体实现：<br>StringBuilder的insert方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span>[] str, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.insert(index, str, offset, len);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>StringBuffer的insert方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span>[] str, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        toStringCache = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">super</span>.insert(index, str, offset, len);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="不同场景下三个类性能测试"><a href="#不同场景下三个类性能测试" class="headerlink" title="不同场景下三个类性能测试"></a>不同场景下三个类性能测试</h1><p>从第二节我们已经看出了三个类的区别，这一小节我们来做个小测试，来测试一下三个类的性能区别：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> time = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        StringBuilder sb = new StringBuilder();</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class="line"><span class="comment">//            sb.append("hello world");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        String s = "";</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 10000; i++) &#123;</span></span><br><span class="line"><span class="comment">//            s += "hello world";</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        String s1 = "hello world";</span></span><br><span class="line"><span class="comment">//        String s2 = new String("hello world");</span></span><br><span class="line"><span class="comment">//        String s3 = "hello world";</span></span><br><span class="line"><span class="comment">//        String s4 = new String("hello world");</span></span><br><span class="line"><span class="comment">//        System.out.println(s1 == s2);</span></span><br><span class="line"><span class="comment">//        System.out.println(s2 == s4);</span></span><br><span class="line"><span class="comment">//        System.out.println(s1 == s3);</span></span><br><span class="line">        testString();</span><br><span class="line">        testOptimaString();</span><br><span class="line">        testStringBuffer();</span><br><span class="line">        testStringBuilder();</span><br><span class="line">        test1String();</span><br><span class="line">        test2String();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line">            s += <span class="string">"java"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"操作"</span> + s.getClass().getName() + <span class="string">"类型使用时间为"</span> + (end - begin) + <span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOptimaString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">long</span> begin  = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i ++) &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(<span class="string">"java"</span>);</span><br><span class="line">            s = sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"优化字符串相加时间"</span>+(end - begin)+<span class="string">"毫秒"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">"java"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"操作"</span> + sb.getClass().getName() + <span class="string">"类型使用时间为"</span> + (end - begin) + <span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStringBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">"java"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"操作"</span> + sb.getClass().getName() + <span class="string">"类型使用时间为"</span> + (end - begin) + <span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;time; i++) &#123;</span><br><span class="line">            String s= <span class="string">"I"</span>+<span class="string">"love"</span>+<span class="string">"java"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"字符串直接相加操作1："</span>+(end-begin)+<span class="string">"毫秒"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        String s1 = <span class="string">"I"</span>;</span><br><span class="line">        String s2 = <span class="string">"love"</span>;</span><br><span class="line">        String s3 = <span class="string">"java"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;time; i++) &#123;</span><br><span class="line">            String s= s1 + s2 +s3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"字符串间接相加操作2："</span>+(end-begin)+<span class="string">"毫秒"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>测试结果（win10，IDEA，JDK8)：<br><img src="/2018/07/21/java-string-begin/javaString2.png" alt="性能比较"><br>得到验证。</p><p>　　下面对上面的执行结果进行一般性的解释：</p><p>　　1）对于直接相加字符串，效率很高，因为在编译器便确定了它的值，也就是说形如”I”+”love”+”java”; 的字符串相加，在编译期间便被优化成了”Ilovejava”。这个可以用javap -c命令反编译生成的class文件进行验证。</p><p>　　对于间接相加（即包含字符串引用），形如s1+s2+s3; 效率要比直接相加低，因为在编译器不会对引用变量进行优化。</p><p>　　2）String、StringBuilder、StringBuffer三者的执行效率：</p><p>　　StringBuilder &gt; StringBuffer &gt; String</p><p>　　当然这个是相对的，不一定在所有情况下都是这样。</p><p>　　比如String str = “hello”+ “world”的效率就比 StringBuilder st  = new StringBuilder().append(“hello”).append(“world”)要高。</p><p>　　因此，这三个类是各有利弊，应当根据不同的情况来进行选择使用：</p><p>　　当字符串相加操作或者改动较少的情况下，建议使用 String str=”hello”这种形式；</p><p>　　当字符串相加操作较多的情况下，建议使用StringBuilder，如果采用了多线程，则使用StringBuffer。</p><h1 id="关于String、StringBuffer的面试题"><a href="#关于String、StringBuffer的面试题" class="headerlink" title="关于String、StringBuffer的面试题"></a>关于String、StringBuffer的面试题</h1><p>下面是一些常见的关于String、StringBuffer的一些面试笔试题，若有不正之处，请谅解和批评指正。</p><ol><li>下面这段代码的输出结果是什么？</li></ol><p>　　String a = “hello2”; 　　String b = “hello” + 2; 　　System.out.println((a == b));</p><p>　　输出结果为：true。原因很简单，”hello”+2在编译期间就已经被优化成”hello2”，因此在运行期间，变量a和变量b指向的是同一个对象。<br>2.下面这段代码的输出结果是什么？</p><p>　　String a = “hello2”; 　  String b = “hello”;       String c = b + 2;       System.out.println((a == c));</p><p>　　输出结果为:false。由于有符号引用的存在，所以  String c = b + 2;不会在编译期间被优化，不会把b+2当做字面常量来处理的，因此这种方式生成的对象事实上是保存在堆上的。因此a和c指向的并不是同一个对象。<br>3.下面这段代码的输出结果是什么？</p><p>　　String a = “hello2”;   　 final String b = “hello”;       String c = b + 2;       System.out.println((a == c));</p><p>　　输出结果为：true。对于被final修饰的变量，会在class文件常量池中保存一个副本，也就是说不会通过连接而进行访问，对final变量的访问在编译期间都会直接被替代为真实的值。那么String c = b + 2;在编译期间就会被优化成：String c = “hello” + 2;<br>4.下面这段代码输出结果为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringInterviewDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">"hello2"</span>;</span><br><span class="line">        <span class="keyword">final</span> String b =getHello();</span><br><span class="line">        String c = b + <span class="number">2</span>;</span><br><span class="line">        System.out.println( a == c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果为false。这里面虽然将b用final修饰了，但是由于其赋值是通过方法调用返回的，那么它的值只能在运行期间确定，因此a和c指向的不是同一个对象。<br>5.下面这段代码的输出结果是什么？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringInterviewDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        String a = "hello2";</span></span><br><span class="line"><span class="comment">//        final String b =getHello();</span></span><br><span class="line"><span class="comment">//        String c = b + 2;</span></span><br><span class="line"><span class="comment">//        System.out.println( a == c);</span></span><br><span class="line">        String a = <span class="string">"hello"</span>;</span><br><span class="line">        String b = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String c = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String d = a.intern();</span><br><span class="line">        System.out.println(a==b);</span><br><span class="line">        System.out.println(c==b);</span><br><span class="line">        System.out.println(d==b);</span><br><span class="line">        System.out.println(a==d);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><pre><code>输出结果为（JDK版本 JDK8)</code></pre><p> <img src="/2018/07/21/java-string-begin/javaString3.png" alt="字符串比较"><br> 这里面涉及到的是String.intern方法的使用。在String类中，intern方法是一个本地方法，在JAVA SE6之前，intern方法会在运行时常量池中查找是否存在内容相同的字符串，如果存在则返回指向该字符串的引用，如果不存在，则会将该字符串入池，并返回一个指向该字符串的引用。因此，a和d指向的是同一个对象。</p><p>6.String str = new String(“abc”)创建了多少个对象？<br>个问题在很多书籍上都有说到比如《Java程序员面试宝典》，包括很多国内大公司笔试面试题都会遇到，大部分网上流传的以及一些面试书籍上都说是2个对象，这种说法是片面的。</p><p>　　如果有不懂得地方可以参考这篇帖子：</p><p>　　<a href="http://rednaxelafx.iteye.com/blog/774673/" target="_blank" rel="noopener">http://rednaxelafx.iteye.com/blog/774673/</a></p><p>　　首先必须弄清楚创建对象的含义，创建是什么时候创建的？这段代码在运行期间会创建2个对象么？毫无疑问不可能，<br>很显然，new只调用了一次，也就是说只创建了一个对象。</p><p>　　而这道题目让人混淆的地方就是这里，这段代码在运行期间确实只创建了一个对象，即在堆上创建了”abc”对象。而为什么大家都在说是2个对象呢，这里面要澄清一个概念  该段代码执行过程和类的加载过程是有区别的。在类加载的过程中，确实在运行时常量池中创建了一个”abc”对象，而在代码执行过程中确实只创建了一个String对象。</p><p>　　因此，这个问题如果换成 String str = new String(“abc”)涉及到几个String对象？合理的解释是2个。</p><p>　　个人觉得在面试的时候如果遇到这个问题，可以向面试官询问清楚”是这段代码执行过程中创建了多少个对象还是涉及到多少个对象“再根据具体的来进行回答。<br>7.下面这段代码1）和2）的区别是什么？\<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"I"</span>;</span><br><span class="line">        <span class="comment">//str1 += "love"+"java";        1)</span></span><br><span class="line">        str1 = str1+<span class="string">"love"</span>+<span class="string">"java"</span>;      <span class="comment">//2)</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1）的效率比2）的效率要高，1）中的”love”+”java”在编译期间会被优化成”lovejava”，而2）中的不会被优化。<br>可以看出，在1）中只进行了一次append操作，而在2）中进行了两次append操作。<br>搬运来自：<a href="http://www.cnblogs.com/dolphin0520/p/3778589.html" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/p/3778589.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录自己参考别人博客，一点一点学习Java基础知识。也记录自己一点一点学习成效，便于以后学习。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="日常总结" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate 中利用Sql进行查询</title>
    <link href="http://yoursite.com/2018/06/29/Hibernate-%E4%B8%AD%E5%88%A9%E7%94%A8Sql%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2018/06/29/Hibernate-中利用Sql进行查询/</id>
    <published>2018-06-29T01:20:52.000Z</published>
    <updated>2019-03-04T14:42:22.831Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚开始接触Hibernate框架，不知道如何使用，现在也弄得迷迷糊糊的。使用一段时间，发现Hibernte中hql语句查询也是很方便，后来在网上查阅资料，发现也能用原生的sql查询。<br>根据网上的资料，记录一下自己学习Hibernate框架，以后也可以方便自己查看。<br><a id="more"></a></p><h1 id="Hibernate-查询方式"><a href="#Hibernate-查询方式" class="headerlink" title="Hibernate 查询方式"></a>Hibernate 查询方式</h1><p>hibernate的查询方式有HQL,Cretiria和SQL.<br>hql查询面向对象的语句风格确实要简洁一些(只是那么一点),<br>cretiria本人目前没在项目中使用过.<br>有一半的时候, 我在Hibernate框架中使用的是SQL查询,<br>简单,可控, 原生. 使用起来风格原始,简单有效, 不增加学习成本,且利于多人开发的维护. </p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Service层代码</span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; findAbandoned2(String name ,String  kjyear) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ToolStr.isEmpty(name) &amp;&amp; ToolStr.isEmpty(kjyear))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;String , Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String , Object&gt; params2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params2.put(<span class="string">" consumableName.name like "</span>,name);</span><br><span class="line">        params2.put(<span class="string">" consumableAudit = "</span> ,<span class="number">1</span> );</span><br><span class="line">        List&lt;Consumables&gt; conlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        conlist.addAll(     consumablesService.find4Params(params2));</span><br><span class="line">        List&lt;Long&gt; listIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listIds.addAll(conlist.stream().map(Consumables::getId).collect(Collectors.toList()));</span><br><span class="line">        StringBuffer bs = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        listIds.forEach( id -&gt; &#123;</span><br><span class="line">            bs.append(id + <span class="string">","</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        String sql = <span class="string">"SELECT\n"</span> +</span><br><span class="line">                <span class="string">"chejian.id 购入车间id,\n"</span> +</span><br><span class="line">                <span class="string">"chejian.`name` 购入者车间,\n"</span> +</span><br><span class="line">                <span class="string">"ren.name 购入者,\n"</span> +</span><br><span class="line">                <span class="string">"wupin.updateTime 购入日期,\n"</span> +</span><br><span class="line">                <span class="string">"wupin.price 购入单价,\n"</span> +</span><br><span class="line">                <span class="string">"wupin.maxNum 购入数量,\n"</span> +</span><br><span class="line">                <span class="string">"wupin.totalAmount 购入金额,\n"</span> +</span><br><span class="line">                <span class="string">"(wupin.maxNum-wupin.num) 领取数量\n"</span> +</span><br><span class="line">                <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"\n"</span> +</span><br><span class="line">                <span class="string">"FROM\n"</span> +</span><br><span class="line">                <span class="string">"admin_consumables wupin\n"</span> +</span><br><span class="line">                <span class="string">"LEFT JOIN admin_workerman ren ON wupin.conPribcipal = ren.`code`\n"</span> +</span><br><span class="line">                <span class="string">"LEFT JOIN admin_workerman banzu ON ren.fatherId = banzu.id\n"</span> +</span><br><span class="line">                <span class="string">"LEFT JOIN admin_workerman chejian ON banzu.fatherId = chejian.id\n"</span> +</span><br><span class="line">                <span class="string">"LEFT JOIN admin_consumablestype pinming ON pinming.id = wupin.consumableName_id\n"</span> +</span><br><span class="line">                <span class="string">"WHERE wupin.id in( "</span>+</span><br><span class="line">                bs.substring(<span class="number">0</span>,bs.length()-<span class="number">1</span>)</span><br><span class="line">                + <span class="string">") and wupin.kjYear = :kjyear \n"</span> +</span><br><span class="line">                <span class="string">"GROUP BY chejian.id\n"</span> +</span><br><span class="line">                <span class="string">"ORDER BY chejian.id ASC"</span>;</span><br><span class="line"></span><br><span class="line">        params.put(<span class="string">"kjyear"</span>,Integer.valueOf(kjyear));</span><br><span class="line">        <span class="keyword">return</span> abandonedDao.find4SQL(sql, params);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里sql语句没有看懂，以后再看。如果分页的话，可以用Hierbante封装的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dao层代码</span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; find4SQL(<span class="keyword">final</span> String sql, <span class="keyword">final</span> Map&lt;String, Object&gt; params) &#123;</span><br><span class="line">        SQLQuery query = getSession().createSQLQuery(sql);</span><br><span class="line">        <span class="comment">// 转成Map</span></span><br><span class="line">        query.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);</span><br><span class="line"><span class="comment">//        query.setCacheable(true);</span></span><br><span class="line">        QUERY_INIT(query, params);</span><br><span class="line">        <span class="keyword">return</span> query.list();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>查询出来是List&lt;Map&lt;String,Object&gt;&gt; 我用的是jsp页面 ，在jsp页面容易遍历。直接遍历list，然后直接点出来 查询时候的列名称 就可以取到值了。<br>如果是List<string> 在jsp页面中 直接  Object[index]就可以取出想要的值。<br>搬运来自： <a href="https://blog.csdn.net/hjiacheng/article/details/53717727" target="_blank" rel="noopener">https://blog.csdn.net/hjiacheng/article/details/53717727</a> Hibernate SQLQuery原生sql查询<br><a href="https://blog.csdn.net/woduoxiangfeiya/article/details/53536033" target="_blank" rel="noopener">https://blog.csdn.net/woduoxiangfeiya/article/details/53536033</a> 前端jsp页面获取List&lt;List<string>&gt;格式数据<br><a href="https://blog.csdn.net/leave417/article/details/78346088" target="_blank" rel="noopener">https://blog.csdn.net/leave417/article/details/78346088</a> jsp页面遍历List&lt;Map&lt;String,Object&gt;&gt;</string></string></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刚开始接触Hibernate框架，不知道如何使用，现在也弄得迷迷糊糊的。使用一段时间，发现Hibernte中hql语句查询也是很方便，后来在网上查阅资料，发现也能用原生的sql查询。&lt;br&gt;根据网上的资料，记录一下自己学习Hibernate框架，以后也可以方便自己查看。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web后台" scheme="http://yoursite.com/categories/Web%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="日常积累" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate用Sql查询in的用法</title>
    <link href="http://yoursite.com/2018/06/29/Hibernate%E7%94%A8Sql%E6%9F%A5%E8%AF%A2in%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/29/Hibernate用Sql查询in的用法/</id>
    <published>2018-06-29T00:27:23.000Z</published>
    <updated>2019-03-04T14:42:55.366Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始接触Hibernate,不是很会Hibernate框架，因为要做一个查询，编写的是SQL语句，想用Hibernate框架查询，后来在网上查阅资料，发现和一般的hql语句查询几乎一样。<br>由于在Hibernate用到了sql语句，所以记录一下自己学到的一些新东西。能方便以后查看。在处理Hibernate的实体查询，一般可以采用多种方式处理复杂的查询，比如HQL的灵活使用，<br>Query的外部参数化赋值等。但是，对于IN字句在sql中的处理，也会出现，不过，一般不建议使用这样的sql处理，转而采用关联条件来处理这种查询。<br><a id="more"></a></p><h1 id="编写MySQL语句"><a href="#编写MySQL语句" class="headerlink" title="编写MySQL语句"></a>编写MySQL语句</h1><p>首先在可视化工具中编写sql语句，如果可以达到想要的结果，这一步就搞定了。</p><h1 id="在Hibernate中利用sql语句查询"><a href="#在Hibernate中利用sql语句查询" class="headerlink" title="在Hibernate中利用sql语句查询"></a>在Hibernate中利用sql语句查询</h1><p>一般对于可变参数传入在in字句中，大概有下面几种总结的方法：<br>1、直接外面拼转sql,这种拼sql的方式容易出现sql注入，比如in(123,drop table ttt,)，而且如果in字句字符串太多，也会受限的，所以一般不赞成使用。</p><p>2、进一步解决上面的问题就是拼赋值sql,采用预处理处理，比如Select * from tab t where t.id in(?,?,?….),参数一并传入就行额。缺点还是受限于要包含的那些记录数据量。</p><p>3、一般在hibernate处理这个也比较方便，采用显示参数传递赋值，如 : String sql =  from Task t where t.id(:ids)</p><p>4、建议系统中出现的in处理，直接采用关联查询处理，in字句本来性能就差，没做好就是是全表扫描。</p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Service层代码：</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行查询手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deptIds 传入的部门id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">find4Phone</span><span class="params">(String[] deptIds)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 将String数组转成Long数组</span></span><br><span class="line">        Long[] deptId = (Long[]) ConvertUtils.convert(deptIds, Long.class);</span><br><span class="line">        <span class="comment">// SQL 语句</span></span><br><span class="line">        String sql = <span class="string">"SELECT phone from core_department_phone WHERE department_id IN (:deptId)"</span>;</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        <span class="keyword">return</span> departmentPhoneDao.find4Phone(sql, deptId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先部门id不是String类型的。先转成Long类型的数组，将sql语句写上，这里使用占位符的方式，避免SQL注入。in语句处理容易全表扫描，所以可以优化一下in语句。<br>Dao层代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deptId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  List&lt;String&gt; <span class="title">find4Phone</span><span class="params">(String sql, Long[] deptId)</span> </span>&#123;</span><br><span class="line">        SQLQuery query = <span class="keyword">this</span>.getSession().createSQLQuery(sql);</span><br><span class="line">        query.setParameterList(<span class="string">"deptId"</span>,deptId);</span><br><span class="line">        <span class="keyword">return</span> query.list();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里用到了setParameterList中key的属性是前面in语句中占位符的内容deptId需要传入的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setParameterList方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> Query <span class="title">setParameterList</span><span class="params">(String name, Object[] values)</span></span>;</span><br></pre></td></tr></table></figure></p><p>后面可以传入任意类型的对象数组，也可以传入List集合。<br>搬运来自 ： <a href="https://blog.csdn.net/wodestudy/article/details/38200421" target="_blank" rel="noopener">https://blog.csdn.net/wodestudy/article/details/38200421</a> Hibernate 处理查询 in 字句<br><a href="https://blog.csdn.net/qq_23339149/article/details/54692942" target="_blank" rel="noopener">https://blog.csdn.net/qq_23339149/article/details/54692942</a> Hibernate如何使用in关键字</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始接触Hibernate,不是很会Hibernate框架，因为要做一个查询，编写的是SQL语句，想用Hibernate框架查询，后来在网上查阅资料，发现和一般的hql语句查询几乎一样。&lt;br&gt;由于在Hibernate用到了sql语句，所以记录一下自己学到的一些新东西。能方便以后查看。在处理Hibernate的实体查询，一般可以采用多种方式处理复杂的查询，比如HQL的灵活使用，&lt;br&gt;Query的外部参数化赋值等。但是，对于IN字句在sql中的处理，也会出现，不过，一般不建议使用这样的sql处理，转而采用关联条件来处理这种查询。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web后台" scheme="http://yoursite.com/categories/Web%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="日常积累" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
</feed>
